## vim: ft=mako:fdm=marker
<%!
from bauble.utils import xml_safe
from bauble.utils.geo import transform
from bauble.meta import get_default
sys_crs = get_default('system_proj_string')
%>\
<%
def json_to_kml_point(coords):
    return ','.join(str(i) for i in coords + [0])

def json_to_kml_line(coords):
    return ' '.join(json_to_kml_point(i) for i in coords)

def json_to_kml_poly(coords):
    return ' '.join(json_to_kml_point(i) for i in coords[0])

point = line = poly = None

if value.geojson and sys_crs:
  # incase another system crs is used.
  geojson = transform(value.geojson, in_crs=sys_crs.value, out_crs='epsg:4326')
  # should always be a polygon but allow others incase
  if geojson.get('type') == 'Point':
    point = json_to_kml_point(value.geojson.get('coordinates'))
  elif geojson.get('type') == 'LineString':
    line = json_to_kml_line(geojson.get('coordinates'))
  elif geojson.get('type') == 'Polygon':
    plygn = geojson.get('coordinates')
    poly = json_to_kml_poly(plygn)
%>\
<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2" xmlns:gx="http://www.google.com/kml/ext/2.2">
  <Document>
    <name>${xml_safe(value.code)}</name>
    <LookAt>
    ## make an educated guess for LookAt
<%
  extents = {
    'max_x': -180,
    'min_x': 180,
    'max_y': -180,
    'min_y': 180,
  }

  lng = lat = 0

  geo_point = geo_line = geo_shape = ''
  if value.geojson:
    if value.geojson.get('type') == 'Point':
      geo_point = json_to_kml_point(value.geojson.get('coordinates'))
    elif value.geojson.get('type') == 'LineString':
      geo_line = json_to_kml_line(value.geojson.get('coordinates'))
    elif value.geojson.get('type') == 'Polygon':
      geo_shape = json_to_kml_poly(value.geojson.get('coordinates'))

    points = geo_shape + ' ' + geo_line + ' ' + geo_point
    points = points.strip()
    if points:
      coords = [[float(x), float(y)] for x, y, _ in [s.split(',') for s in points.split()]]
      x_vals = [x for x, y in coords]
      y_vals = [y for x, y in coords]
      extents['max_x'] = max(x_vals + [extents.get('max_x')])
      extents['min_x'] = min(x_vals + [extents.get('min_x')])
      extents['max_y'] = max(y_vals + [extents.get('max_y')])
      extents['min_y'] = min(y_vals + [extents.get('min_y')])
      lng = (extents.get('max_x') + extents.get('min_x')) / 2
      lat = (extents.get('max_y') + extents.get('min_y')) / 2
      ## these multipliers (100000 and 150000) are arbitrary.  From trial and error they seem to work, nothing more.
      ## They most likely are very dependant on the current resolution...
      rang = abs(extents.get('max_x') - extents.get('min_x')) * 100000
      rang2 = abs(extents.get('max_y') - extents.get('min_y')) * 150000
      rang = max([rang, rang2])
      if rang < 30:
        rang = 30

  ## Bail out if nothing has coordinates.
  try:
    rang
  except NameError:
    raise ValueError("Can't find anything to map for the current selection")
%>\
      <longitude>${lng}</longitude>
      <latitude>${lat}</latitude>
      <altitude>0</altitude>
      <heading>0</heading>
      <tilt>0</tilt>
      <range>${rang}</range>
      <altitudeMode>absolute</altitudeMode>
    </LookAt>
    <visibility>1</visibility>
    <Placemark>
      <name>${xml_safe(value.code)}</name>
      <description><![CDATA[
        <table>
          <tr>
            <td>CODE:</td>
            <td>${xml_safe(value.code)}</td>
          </tr>
          % if value.name:
          <tr>
            <td>NAME:</td>
            <td>${xml_safe(value.name)}</td>
          </tr>
          % endif
          % if value.description:
          <tr>
            <td>DESCRIPTION:</td>
            <td>${xml_safe(value.description)}</td>
          </tr>
          % endif
        </table>
          ]]>
      </description>
      <visibility>1</visibility>
      % if point:
      <Point>
        <coordinates>
          ${point}
        </coordinates>
      </Point>
      % elif line:
      <LineString>
        <coordinates>
          ${line}
        </coordinates>
      </LineString>
      % elif poly:
      <Polygon>
        <altitudeMode>relativeToGround</altitudeMode>
        <outerBoundaryIs>
          <LinearRing>
            <coordinates>
              ${poly.replace(',0 ', ',0.2 ')}
            </coordinates>
          </LinearRing>
        </outerBoundaryIs>
      </Polygon>
      % endif
    </Placemark>
  </Document>
</kml>
