--- ./bauble/__init__.py	(original)
+++ ./bauble/__init__.py	(refactored)
@@ -132,14 +132,14 @@
     import bauble.utils as utils
     try:
         import bauble.task as task
-    except Exception, e:
+    except Exception as e:
         logger.error('bauble.quit(): %s' % utils.utf8(e))
     else:
         task.kill()
     try:
         save_state()
         Gtk.main_quit()
-    except RuntimeError, e:
+    except RuntimeError as e:
         # in case main_quit is called before main, e.g. before
         # bauble.main() is called
         sys.exit(1)
@@ -166,7 +166,7 @@
     handler_cls = None
     try:
         handler_cls = pluginmgr.commands[cmd]
-    except KeyError, e:
+    except KeyError as e:
         if cmd is None:
             utils.message_dialog(_('No default handler registered'))
         else:
@@ -188,7 +188,7 @@
             gui.window.add_accel_group(handler_view.accel_group)
     try:
         last_handler(cmd, arg)
-    except Exception, e:
+    except Exception as e:
         msg = utils.xml_safe(e)
         logger.error('bauble.command_handler(): %s' % msg)
         utils.message_details_dialog(
@@ -215,11 +215,11 @@
     try:
         from gi.repository import Gtk
         from gi.repository import GObject
-    except ImportError, e:
-        print _('** Error: could not import gtk and/or gobject')
-        print e
+    except ImportError as e:
+        print(_('** Error: could not import gtk and/or gobject'))
+        print(e)
         if sys.platform == 'win32':
-            print _('Please make sure that GTK_ROOT\\bin is in your PATH.')
+            print(_('Please make sure that GTK_ROOT\\bin is in your PATH.'))
         sys.exit(1)
 
     # create the user directory
@@ -280,7 +280,7 @@
         else:
             logger.debug('not registering sentry client')
 
-    except Exception, e:
+    except Exception as e:
         logger.warning("can't configure sentry client")
         logger.debug("%s(%s)" % (type(e).__name__, e))
 
@@ -291,7 +291,7 @@
 
     display = Gdk.Display.get_default()
     if display is None:
-        print _("**Error: Ghini must be run in a windowed environment.")
+        print(_("**Error: Ghini must be run in a windowed environment."))
         sys.exit(1)
 
     import bauble.pluginmgr as pluginmgr
@@ -302,7 +302,7 @@
 
     try:
         import bauble.db as db
-    except Exception, e:
+    except Exception as e:
         utils.message_dialog(utils.xml_safe(e), Gtk.MessageType.ERROR)
         sys.exit(1)
 
@@ -328,23 +328,23 @@
                     break
                 else:
                     uri = conn_name = None
-            except err.VersionError, e:
+            except err.VersionError as e:
                 logger.warning("%s(%s)" % (type(e), e))
                 db.open(uri, False)
                 break
             except (err.EmptyDatabaseError, err.MetaTableError,
                     err.VersionError, err.TimestampError,
-                    err.RegistryError), e:
+                    err.RegistryError) as e:
                 logger.info("%s(%s)" % (type(e), e))
                 open_exc = e
                 # reopen without verification so that db.Session and
                 # db.engine, db.metadata will be bound to an engine
                 db.open(uri, False)
                 break
-            except err.DatabaseError, e:
+            except err.DatabaseError as e:
                 logger.debug("%s(%s)" % (type(e).__name__, e))
                 open_exc = e
-            except Exception, e:
+            except Exception as e:
                 msg = _("Could not open connection.\n\n%s") % e
                 utils.message_details_dialog(msg, traceback.format_exc(),
                                              Gtk.MessageType.ERROR)
@@ -386,14 +386,14 @@
                         pluginmgr.init()
                         # set the default connection
                         prefs[conn_default_pref] = conn_name
-                    except Exception, e:
+                    except Exception as e:
                         utils.message_details_dialog(utils.xml_safe(e),
                                                      traceback.format_exc(),
                                                      Gtk.MessageType.ERROR)
                         logger.error("%s(%s)" % (type(e).__name__, e))
             else:
                 pluginmgr.init()
-        except Exception, e:
+        except Exception as e:
             logger.warning("%s\n%s(%s)"
                            % (traceback.format_exc(), type(e).__name__, e))
             msg = utils.utf8("%s(%s)" % (type(e).__name__, e))
--- ./bauble/btypes.py	(original)
+++ ./bauble/btypes.py	(refactored)
@@ -57,12 +57,12 @@
         except TypeError:
             raise EnumError(_('Enum requires string values (or None)'))
         if set(type(x) for x in values if x is not None) - \
-                set([type(''), type(u'')]) != set():
+                set([type(''), type('')]) != set():
             raise EnumError(_('Enum requires string values (or None)'))
         if len(values) != len(set(values)):
             raise EnumError(_('Enum requires the values to be different'))
         self.translations = dict((v, v) for v in values)
-        for key, value in translations.iteritems():
+        for key, value in translations.items():
             self.translations[key] = value
         if empty_to_none and None not in values:
             raise EnumError(_('You have configured empty_to_none=True but '
@@ -110,7 +110,7 @@
     _rx_tz = re.compile('[+-]')
 
     def process_bind_param(self, value, dialect):
-        if not isinstance(value, basestring):
+        if not isinstance(value, str):
             return value
         try:
             DateTime._dayfirst
@@ -138,7 +138,7 @@
     impl = types.Date
 
     def process_bind_param(self, value, dialect):
-        if not isinstance(value, basestring):
+        if not isinstance(value, str):
             return value
         try:
             Date._dayfirst
--- ./bauble/connmgr.py	(original)
+++ ./bauble/connmgr.py	(refactored)
@@ -134,11 +134,11 @@
         '.desktop/ghini-%s.%s-bbg/bauble/version.py'
     ) % bauble.version_tuple[:2]
     try:
-        import urllib2
+        import urllib.request, urllib.error, urllib.parse
         import ssl
         import json
         ## from github retrieve the date of the latest release
-        stream = urllib2.urlopen(
+        stream = urllib.request.urlopen(
             ("https://api.github.com/repos/RoDuth/ghini.desktop/"
              "branches/ghini-1.0-bbg"),
             timeout=5)
@@ -146,7 +146,7 @@
         bauble.release_date = response['commit']['commit']['committer']['date']
 
         ## from github retrieve the version number
-        github_version_stream = urllib2.urlopen(version_on_github, timeout=5)
+        github_version_stream = urllib.request.urlopen(version_on_github, timeout=5)
         bauble.release_version = newer_version_on_github(github_version_stream,
                                                          force=True)
 
@@ -160,13 +160,13 @@
             + datetime.timedelta(0, int(last_modified_seconds))
         )
         bauble.installation_date = last_modified_date.isoformat() + "Z"
-    except urllib2.URLError:
+    except urllib.error.URLError:
         logger.info('connection is slow or down')
-    except ssl.SSLError, e:
+    except ssl.SSLError as e:
         logger.info('SSLError %s while checking for newer version' % e)
-    except urllib2.HTTPError:
+    except urllib.error.HTTPError:
         logger.info('HTTPError while checking for newer version')
-    except Exception, e:
+    except Exception as e:
         logger.warning('unhandled %s(%s) while checking for newer version'
                        % (type(e), e))
 
@@ -179,9 +179,9 @@
         '.desktop/ghini-%s.%s-bbg/bauble/version.py'
     ) % bauble.version_tuple[:2]
     try:
-        import urllib2
+        import urllib.request, urllib.error, urllib.parse
         import ssl
-        github_version_stream = urllib2.urlopen(
+        github_version_stream = urllib.request.urlopen(
             version_on_github, timeout=5)
         remote = newer_version_on_github(github_version_stream)
         if remote:
@@ -199,13 +199,13 @@
             # asynchronously in the main loop, with GObject.idle_add.
             from gi.repository import GObject
             GObject.idle_add(show_message_box)
-    except urllib2.URLError:
+    except urllib.error.URLError:
         logger.info('connection is slow or down')
-    except ssl.SSLError, e:
+    except ssl.SSLError as e:
         logger.info('SSLError %s while checking for newer version' % e)
-    except urllib2.HTTPError:
+    except urllib.error.HTTPError:
         logger.info('HTTPError while checking for newer version')
-    except Exception, e:
+    except Exception as e:
         logger.warning('unhandled %s(%s) while checking for newer version'
                        % type(e), e)
 
@@ -252,9 +252,9 @@
             GObject.idle_add(show_message_box)
     except exceptions.Timeout:
         logger.info('connection timed out while checking for newer installer')
-    except exceptions.RequestException, e:
+    except exceptions.RequestException as e:
         logger.info('Requests error %s while checking for newer installer', e)
-    except Exception, e:
+    except Exception as e:
         logger.warning('unhandled %s(%s) while checking for newer '
                        'installer', type(e).__name__, e)
 
@@ -384,7 +384,7 @@
     def refresh_view(self):
         GenericEditorPresenter.refresh_view(self)
         conn_dict = self.connections
-        if conn_dict is None or len(conn_dict.keys()) == 0:
+        if conn_dict is None or len(list(conn_dict.keys())) == 0:
             self.view.widget_set_visible('noconnectionlabel', True)
             self.view.widget_set_visible('expander', False)
             self.prev_connection_name = None
--- ./bauble/db.py	(original)
+++ ./bauble/db.py	(refactored)
@@ -356,12 +356,12 @@
         meta_table = meta.BaubleMeta.__table__
         meta_table.insert(bind=connection).\
             execute(name=meta.VERSION_KEY,
-                    value=unicode(bauble.version)).close()
+                    value=str(bauble.version)).close()
         from dateutil.tz import tzlocal
         meta_table.insert(bind=connection).\
             execute(name=meta.CREATED_KEY,
-                    value=unicode(datetime.datetime.now(tz=tzlocal()))).close()
-    except GeneratorExit, e:
+                    value=str(datetime.datetime.now(tz=tzlocal()))).close()
+    except GeneratorExit as e:
         # this is here in case the main windows is closed in the middle
         # of a task
         # UPDATE 2009.06.18: i'm not sure if this is still relevant since we
@@ -370,7 +370,7 @@
         logger.warning('bauble.db.create(): %s' % utils.utf8(e))
         transaction.rollback()
         raise
-    except Exception, e:
+    except Exception as e:
         logger.warning('bauble.db.create(): %s' % utils.utf8(e))
         transaction.rollback()
         raise
@@ -383,7 +383,7 @@
     transaction = connection.begin()
     try:
         pluginmgr.install('all', import_defaults, force=True)
-    except GeneratorExit, e:
+    except GeneratorExit as e:
         # this is here in case the main windows is closed in the middle
         # of a task
         # UPDATE 2009.06.18: i'm not sure if this is still relevant since we
@@ -392,7 +392,7 @@
         logger.warning('bauble.db.create(): %s' % utils.utf8(e))
         transaction.rollback()
         raise
-    except Exception, e:
+    except Exception as e:
         logger.warning('bauble.db.create(): %s' % utils.utf8(e))
         transaction.rollback()
         raise
@@ -438,7 +438,7 @@
                     'created with Ghini.')
             utils.message_dialog(msg, Gtk.MessageType.ERROR)
             raise
-        except error.VersionError, e:
+        except error.VersionError as e:
             msg = (_('You are using Ghini version %(version)s while the '
                      'database you have connected to was created with '
                      'version %(db_version)s\n\nSome things might not work as '
@@ -513,7 +513,7 @@
                         category == '<picture>')):
             # dirty trick: making sure it's not going to be found!
             import uuid
-            keys['category'] = unicode(uuid.uuid4())
+            keys['category'] = str(uuid.uuid4())
         result = super(globals()[class_name], cls).retrieve_or_create(session, keys, create, update)
         keys['category'] = category
         if result:
@@ -588,11 +588,11 @@
                 try:
                     return json.loads(re.sub(r'(\w+)[ ]*(?=:)', r'"\g<1>"',
                                              '{' + n.note.replace(';', ',') + '}'))
-                except Exception, e:
+                except Exception as e:
                     pass
                 try:
                     return json.loads(re.sub(r'(\w+)[ ]*(?=:)', r'"\g<1>"', n.note))
-                except Exception, e:
+                except Exception as e:
                     logger.debug('not parsed %s(%s), returning literal text »%s«', type(e), e, n.note)
                     return n.note
         if result == []:
@@ -627,7 +627,7 @@
 
     def as_dict(self):
         result = dict((col, getattr(self, col))
-                      for col in self.__table__.columns.keys()
+                      for col in list(self.__table__.columns.keys())
                       if col not in ['id']
                       and col[0] != '_'
                       and getattr(self, col) is not None
@@ -683,7 +683,7 @@
                 return None
             else:
                 extradict = {}
-        except Exception, e:
+        except Exception as e:
             logger.debug("this was unexpected")
             raise
 
@@ -702,7 +702,7 @@
 
         logger.debug("link_values : %s" % str(link_values))
 
-        for k in keys.keys():
+        for k in list(keys.keys()):
             if k not in class_mapper(cls).mapped_table.c:
                 del keys[k]
         if 'id' in keys:
@@ -715,7 +715,7 @@
         # early construct object before building links
         if not is_in_session and create:
             ## completing the task of building the links
-            logger.debug("links? %s, %s" % (cls.link_keys, keys.keys()))
+            logger.debug("links? %s, %s" % (cls.link_keys, list(keys.keys())))
             for key in cls.link_keys:
                 d = link_values.get(key)
                 if d is None:
@@ -732,7 +732,7 @@
             result = is_in_session
 
             ## completing the task of building the links
-            logger.debug("links? %s, %s" % (cls.link_keys, keys.keys()))
+            logger.debug("links? %s, %s" % (cls.link_keys, list(keys.keys())))
             for key in cls.link_keys:
                 d = link_values.get(key)
                 if d is None:
@@ -744,7 +744,7 @@
         logger.debug("going to update %s with %s" % (result, keys))
         if 'id' in keys:
             del keys['id']
-        for k, v in keys.items():
+        for k, v in list(keys.items()):
             if isinstance(v, dict):
                 if v.get('__class__') == 'datetime':
                     m = v.get('millis', 0)
--- ./bauble/editor.py	(original)
+++ ./bauble/editor.py	(refactored)
@@ -89,7 +89,7 @@
                                      yearfirst=yearfirst, default=default)
             if date.year == default_year:
                 raise ValueError
-        except Exception, e:
+        except Exception as e:
             raise ValidatorError(str(e))
         return value
 
@@ -105,7 +105,7 @@
     """
 
     def to_python(self, value):
-        if value in (u'', '', None):
+        if value in ('', '', None):
             return None
         return str(value)
 
@@ -120,7 +120,7 @@
         self.encoding = encoding
 
     def to_python(self, value):
-        if value in (u'', '', None):
+        if value in ('', '', None):
             return None
         return utils.to_unicode(value, self.encoding)
 
@@ -149,7 +149,7 @@
     def to_python(self, value):
         if value is None or (isinstance(value, str) and value == ''):
             return None
-        elif isinstance(value, (int, long)):
+        elif isinstance(value, int):
             return value
         try:
             return int(value)
@@ -167,7 +167,7 @@
     def to_python(self, value):
         if value is None or (isinstance(value, str) and value == ''):
             return None
-        elif isinstance(value, (int, long, float)):
+        elif isinstance(value, (int, float)):
             return value
         try:
             return float(value)
@@ -228,10 +228,10 @@
         self.boxes = set()
 
         # set the tooltips...use Gtk.Tooltip api introducted in GTK+ 2.12
-        for widget_name, markup in self._tooltips.iteritems():
+        for widget_name, markup in self._tooltips.items():
             try:
                 self.widgets[widget_name].set_tooltip_markup(markup)
-            except Exception, e:
+            except Exception as e:
                 values = dict(widget_name=widget_name, exception=e)
                 logger.debug(_('Couldn\'t set the tooltip on widget '
                                '%(widget_name)s\n\n%(exception)s') % values)
@@ -274,7 +274,7 @@
                 filename = chooser.get_filename()
                 if filename:
                     self.widget_set_value(target, filename)
-        except Exception, e:
+        except Exception as e:
             logger.warning("unhandled %s exception in editor.py: %s" %
                            (type(e), e))
         chooser.destroy()
@@ -371,7 +371,7 @@
         for s in self.signals:
             try:
                 handler = getattr(target, s.get('handler'))
-            except AttributeError, text:
+            except AttributeError as text:
                 logger.debug("AttributeError: %s" % text)
                 continue
             signaller = getattr(self.widgets, s.getparent().get('id'))
@@ -400,7 +400,7 @@
 
         :param args: extra args to pass the the callback
         """
-        if isinstance(obj, basestring):
+        if isinstance(obj, str):
             obj = self.widgets[obj]
         sid = obj.connect(signal, callback, *args)
         self.__attached_signals.append((obj, sid))
@@ -421,7 +421,7 @@
 
         :param args: extra args to pass the the callback
         """
-        if isinstance(obj, basestring):
+        if isinstance(obj, str):
             obj = self.widgets[obj]
         sid = obj.connect_after(signal, callback, *args)
         # if data:
@@ -690,7 +690,7 @@
         completion.set_minimum_key_length(minimum_key_length)
         completion.set_popup_completion(True)
         completion.props.popup_set_width = False
-        if isinstance(entry, basestring):
+        if isinstance(entry, str):
             self.widgets[entry].set_completion(completion)
         else:
             entry.set_completion(completion)
@@ -716,13 +716,13 @@
         :param translations: a list of pairs, or a dictionary,
             of values->translation.
         """
-        if isinstance(combo, basestring):
+        if isinstance(combo, str):
             combo = self.widgets[combo]
         combo.clear()
         # using 'object' avoids SA unicode warning
         model = Gtk.ListStore(object, str)
         if isinstance(translations, dict):
-            translations = sorted(translations.iteritems(), key=lambda x: x[1])
+            translations = sorted(iter(translations.items()), key=lambda x: x[1])
         if cmp is not None:
             translations = sorted(translations,
                                   cmp=lambda a, b: cmp(a[0], b[0]))
@@ -804,7 +804,7 @@
         self.reply_yes_no_dialog = []
         self.reply_file_chooser_dialog = []
         self.__window = MockDialog()
-        for name, value in kwargs.items():
+        for name, value in list(kwargs.items()):
             setattr(self, name, value)
         self.boxes = set()
 
@@ -1081,7 +1081,7 @@
         if session is None:
             try:
                 self.session = object_session(model)
-            except Exception, e:
+            except Exception as e:
                 logger.debug("GenericEditorPresenter::__init__ - %s, %s" % (type(e), e))
 
             if self.session is None:  # object_session gave None without error
@@ -1181,7 +1181,7 @@
         to the same model attribute.
 
          '''
-        for widget, attr in self.widget_to_field_map.items():
+        for widget, attr in list(self.widget_to_field_map.items()):
             value = getattr(self.model, attr)
             value = (value is not None) and value or ''
             self.view.widget_set_value(widget, value)
@@ -1210,9 +1210,9 @@
             self.session.commit()
             try:
                 bauble.gui.get_view().update()
-            except Exception, e:
+            except Exception as e:
                 pass
-        except Exception, e:
+        except Exception as e:
             self.session.rollback()
             self.session.add_all(objs)
             raise
@@ -1415,7 +1415,7 @@
         Clear all the problems from all widgets associated with the presenter
         """
         tmp = self.problems.copy()
-        map(lambda p: self.remove_problem(p[0], p[1]), tmp)
+        list(map(lambda p: self.remove_problem(p[0], p[1]), tmp))
         self.problems.clear()
 
     def remove_problem(self, problem_id, widget=None):
@@ -1471,7 +1471,7 @@
         logger.debug('add_problem(%s, %s, %s)' %
                      (self, problem_id, problem_widgets))
         if isinstance(problem_widgets, (tuple, list)):
-            map(lambda w: self.add_problem(problem_id, w), problem_widgets)
+            list(map(lambda w: self.add_problem(problem_id, w), problem_widgets))
             return
 
         ## here single widget.
@@ -1526,7 +1526,7 @@
             try:
                 value = validator.to_python(value)
                 self.remove_problem('BAD_VALUE_%s' % attr)
-            except ValidatorError, e:
+            except ValidatorError as e:
                 logger.debug("GenericEditorPresenter.set_model_attr %s" % e)
                 self.add_problem('BAD_VALUE_%s' % attr)
             else:
@@ -1561,7 +1561,7 @@
                     value = self.wrapped.to_python(value)
                     self.presenter.remove_problem('BAD_VALUE_%s'
                                                   % model_attr, widget)
-                except Exception, e:
+                except Exception as e:
                     logger.debug("GenericEditorPresenter.ProblemValidator"
                                  ".to_python %s" % e)
                     self.presenter.add_problem('BAD_VALUE_%s'
@@ -1821,9 +1821,9 @@
             self.session.commit()
             try:
                 bauble.gui.get_view().update()
-            except Exception, e:
+            except Exception as e:
                 pass
-        except Exception, e:
+        except Exception as e:
             logger.warning("can't commit changes: (%s) %s" % (type(e), e))
             self.session.rollback()
             self.session.add_all(objs)
@@ -1937,7 +1937,7 @@
         text = entry.props.text
         try:
             text = DateValidator().to_python(text)
-        except Exception, e:
+        except Exception as e:
             logger.debug("%s(%s)" % (type(e).__name__, e))
             self.presenter.add_problem(PROBLEM, entry)
         else:
@@ -2054,7 +2054,7 @@
     def __init__(self, presenter, model=None):
         super(PictureBox, self).__init__(presenter, model)
         utils.set_widget_value(self.widgets.category_comboentry,
-                               u'<picture>')
+                               '<picture>')
         self.presenter._dirty = False
 
         self.widgets.picture_button.connect(
@@ -2083,13 +2083,13 @@
                     pixbuf = fullbuf.scale_simple(
                         x, y, GdkPixbuf.InterpType.BILINEAR)
                 im.set_from_pixbuf(pixbuf)
-            except GLib.GError, e:
+            except GLib.GError as e:
                 logger.debug("picture %s caused GLib.GError %s" %
                              (basename, e))
                 label = _('picture file %s not found.') % basename
                 im = Gtk.Label()
                 im.set_text(label)
-            except Exception, e:
+            except Exception as e:
                 logger.warning("can't commit changes: (%s) %s" % (type(e), e))
                 im = Gtk.Label()
                 im.set_text(e)
@@ -2113,13 +2113,13 @@
             filename = fileChooserDialog.get_filename()
             if filename:
                 ## remember chosen location for next time
-                PictureBox.last_folder, basename = os.path.split(unicode(filename))
+                PictureBox.last_folder, basename = os.path.split(str(filename))
                 logger.debug('new current folder is: %s' % self.last_folder)
                 ## copy file to picture_root_dir (if not yet there),
                 ## also receiving thumbnail base64
                 thumb = utils.copy_picture_with_thumbnail(self.last_folder, basename)
                 ## make sure the category is <picture>
-                self.set_model_attr('category', u'<picture>')
+                self.set_model_attr('category', '<picture>')
                 ## append thumbnail base64 to content string
                 # this, from commit 59375047, not working in windows/sqlite at
                 # least, needs investigation, commenting out now here for
@@ -2128,7 +2128,7 @@
                 ## store basename in note field and fire callbacks.
                 self.set_model_attr('note', basename)
                 self.set_content(basename)
-        except Exception, e:
+        except Exception as e:
             logger.warning("unhandled exception in editor.py: "
                            "(%s)%s" % (type(e), e))
         fileChooserDialog.destroy()
@@ -2138,7 +2138,7 @@
 
     @classmethod
     def is_valid_note(cls, note):
-        return note.category == u'<picture>'
+        return note.category == '<picture>'
 
 
 # TODO: create a separate class for browsing notes in a treeview
--- ./bauble/gettext_windows.py	(original)
+++ ./bauble/gettext_windows.py	(refactored)
@@ -76,7 +76,7 @@
         lcids = [lcid_user, lcid_system]
     else:
         lcids = [lcid_user]
-    return filter(None, [locale.windows_locale.get(i) for i in lcids]) or None
+    return [_f for _f in [locale.windows_locale.get(i) for i in lcids] if _f] or None
 
 
 def setup_env_other(system_lang=True):
--- ./bauble/i18n.py	(original)
+++ ./bauble/i18n.py	(refactored)
@@ -91,5 +91,5 @@
 # associate this module's as well as the global `_` functions (we marked our
 # translatable strings with it) to lang.gettext(), which translates them.
 _ = lang.gettext
-import __builtin__
-__builtin__._ = lang.gettext
+import builtins
+builtins._ = lang.gettext
--- ./bauble/meta.py	(original)
+++ ./bauble/meta.py	(refactored)
@@ -23,9 +23,9 @@
 import bauble.db as db
 import bauble.utils as utils
 
-VERSION_KEY = u'version'
-CREATED_KEY = u'created'
-REGISTRY_KEY = u'registry'
+VERSION_KEY = 'version'
+CREATED_KEY = 'created'
+REGISTRY_KEY = 'registry'
 
 # date format strings:
 # yy - short year
@@ -34,7 +34,7 @@
 # d - number day, two digits when necessary
 # mm -number month, always two digits
 # m - number month, two digits when necessary
-DATE_FORMAT_KEY = u'date_format'
+DATE_FORMAT_KEY = 'date_format'
 
 
 def get_default(name, default=None, session=None):
--- ./bauble/pluginmgr.py	(original)
+++ ./bauble/pluginmgr.py	(refactored)
@@ -131,7 +131,7 @@
     # same...and if not then it doesn't really help anyways
     if errors:
         name = ', '.join(sorted(errors.keys()))
-        exc_info = errors.values()[0]
+        exc_info = list(errors.values())[0]
         exc_str = utils.xml_safe(exc_info[1])
         tb_str = ''.join(traceback.format_tb(exc_info[2]))
         utils.message_details_dialog('Could not load plugin: '
@@ -146,7 +146,7 @@
         # issue #27: should we include the module name of the plugin to
         # allow for plugin namespaces or just assume that the plugin class
         # name is unique?
-        if isinstance(plugin, (type, types.ClassType)):
+        if isinstance(plugin, type):
             plugins[plugin.__name__] = plugin
             logger.debug("registering plugin %s: %s"
                          % (plugin.__name__, plugin))
@@ -178,7 +178,7 @@
     # ******
 
     # search for plugins that are in the plugins dict but not in the registry
-    registered = plugins.values()
+    registered = list(plugins.values())
     logger.debug('registered plugins: %s' % plugins)
     try:
         # try to access the plugin registry, if the table does not exist
@@ -188,7 +188,7 @@
         # allows you to connect to a pre bauble 0.9 database and use it to
         # upgrade to a >=0.9 database
         registered_names = PluginRegistry.names()
-        not_installed = [p for n, p in plugins.iteritems()
+        not_installed = [p for n, p in plugins.items()
                          if n not in registered_names]
         if len(not_installed) > 0:
             msg = _('The following plugins were not found in the plugin '
@@ -203,7 +203,7 @@
         for name in PluginRegistry.names():
             try:
                 registered.append(plugins[name])
-            except KeyError, e:
+            except KeyError as e:
                 logger.debug("could not find '%s' plugin. "
                              "removing from database" % e)
                 not_registered.append(utils.utf8(name))
@@ -215,7 +215,7 @@
                 {'plugins': utils.utf8(', '.join(sorted(not_registered)))}
             utils.message_dialog(utils.xml_safe(msg), type=Gtk.MessageType.WARNING)
 
-    except Exception, e:
+    except Exception as e:
         logger.warning('unhandled exception %s' % e)
         raise
 
@@ -236,7 +236,7 @@
         try:
             plugin.init()
             logger.debug('plugin %s initialized' % plugin)
-        except KeyError, e:
+        except KeyError as e:
             # keep the plugin in the registry so if we find it again we do
             # not offer the user the option to reinstall it, something which
             # could overwrite data
@@ -245,7 +245,7 @@
                      "but isn't wasn't found in the plugin directory")
                    % dict(plugin_name=plugin.__class__.__name__))
             logger.warning(msg)
-        except Exception, e:
+        except Exception as e:
             logger.error("%s: %s" % (type(e), e))
             ordered.remove(plugin)
             logger.debug(traceback.print_exc())
@@ -265,7 +265,7 @@
         for cmd in plugin.commands:
             try:
                 register_command(cmd)
-            except Exception, e:
+            except Exception as e:
                 logger.debug("exception %s while registering command %s"
                              % (e, cmd))
                 msg = 'Error: Could not register command handler.\n\n%s' % \
@@ -295,7 +295,7 @@
 
     logger.debug('pluginmgr.install(%s)' % str(plugins_to_install))
     if plugins_to_install is 'all':
-        to_install = plugins.values()
+        to_install = list(plugins.values())
     else:
         to_install = plugins_to_install
 
@@ -304,7 +304,7 @@
         return
 
     # sort the plugins by their dependency
-    depends, unmet = _create_dependency_pairs(plugins.values())
+    depends, unmet = _create_dependency_pairs(list(plugins.values()))
     logger.debug("%s - the dependencies pairs" % str(depends))
     if unmet != {}:
         logger.debug('unmet dependecies: %s' % str(unmet))
@@ -326,7 +326,7 @@
             if not PluginRegistry.exists(p):
                 logger.debug('%s - adding to registry' % p)
                 PluginRegistry.add(p)
-    except Exception, e:
+    except Exception as e:
         logger.warning('bauble.pluginmgr.install(): %s' % utils.utf8(e))
         raise
 
@@ -398,7 +398,7 @@
         """
         Check if plugin exists in the plugin registry.
         """
-        if isinstance(plugin, basestring):
+        if isinstance(plugin, str):
             name = plugin
             version = None
         else:
@@ -410,7 +410,7 @@
             session.query(PluginRegistry).\
                 filter_by(name=utils.utf8(name)).one()
             return True
-        except orm_exc.NoResultFound, e:
+        except orm_exc.NoResultFound as e:
             logger.debug("%s(%s)" % (type(e).__name__, e))
             return False
         finally:
@@ -584,7 +584,7 @@
         else:
             try:
                 mod = __import__(name, globals(), locals(), [name], -1)
-            except Exception, e:
+            except Exception as e:
                 msg = _('Could not import the %(module)s module.\n\n'
                         '%(error)s') % {'module': name, 'error': e}
                 logger.debug(msg)
@@ -603,7 +603,7 @@
             logger.debug('module %s contains non callable plugin: %s'
                          % (mod, mod_plugin))
 
-        is_plugin_class = lambda p: (isinstance(p, (type, types.ClassType))
+        is_plugin_class = lambda p: (isinstance(p, type)
                                      and issubclass(p, Plugin))
         is_plugin_instance = lambda p: (isinstance(p, Plugin))
         if isinstance(mod_plugin, (list, tuple)):
--- ./bauble/prefs.py	(original)
+++ ./bauble/prefs.py	(refactored)
@@ -134,7 +134,7 @@
 """
 
 
-from ConfigParser import RawConfigParser
+from configparser import RawConfigParser
 
 
 class _prefs(dict):
@@ -296,7 +296,7 @@
     def update(self):
         self.widgets.prefs_prefs_ls.clear()
         global prefs
-        for key, value in sorted(prefs.iteritems()):
+        for key, value in sorted(prefs.items()):
             self.widgets.prefs_prefs_ls.append(
                 (key, value, prefs[key].__class__.__name__))
 
--- ./bauble/search.py	(original)
+++ ./bauble/search.py	(refactored)
@@ -40,12 +40,12 @@
 
 from bauble.editor import (
     GenericEditorView, GenericEditorPresenter)
-from querybuilderparser import BuiltQuery
+from .querybuilderparser import BuiltQuery
 
 
 def search(text, session=None):
     results = set()
-    for strategy in _search_strategies.values():
+    for strategy in list(_search_strategies.values()):
         logger.debug("applying search strategy %s from module %s" %
                      (type(strategy).__name__, type(strategy).__module__))
         results.update(strategy.search(text, session))
@@ -493,7 +493,7 @@
         from bauble.plugins.plants.species import Species
         result = search_strategy._session.query(Species).filter(
             or_(Species.sp.startswith(self.species_epithet),
-                and_(self.species_epithet == u'sp', Species.infrasp1 == u'sp'))).join(Genus).filter(
+                and_(self.species_epithet == 'sp', Species.infrasp1 == 'sp'))).join(Genus).filter(
             Genus.genus.startswith(self.genus_epithet)).all()
         result = set(result)
         if None in result:
@@ -558,7 +558,7 @@
                 lambda val: mapper.c[col].op(self.cond)(val)
 
         for col in properties:
-            ors = or_(*map(condition(col), self.values.express()))
+            ors = or_(*list(map(condition(col), self.values.express())))
             result.update(query.filter(ors).all())
 
         if None in result:
@@ -621,7 +621,7 @@
             utils.ilike(table.c[col], ('%%%s%%' % val))
 
         result = set()
-        for cls, columns in search_strategy._properties.iteritems():
+        for cls, columns in search_strategy._properties.items():
             column_cross_value = [(c, v) for c in columns
                                   for v in self.express()]
             # as of SQLAlchemy>=0.4.2 we convert the value to a unicode
@@ -631,7 +631,7 @@
             def unicol(col, v):
                 table = class_mapper(cls)
                 if isinstance(table.c[col].type, (Unicode, UnicodeText)):
-                    return unicode(v)
+                    return str(v)
                 else:
                     return v
 
@@ -845,7 +845,7 @@
     @classmethod
     def get_domain_classes(cls):
         d = {}
-        for domain, item in cls._domains.iteritems():
+        for domain, item in cls._domains.items():
             d.setdefault(domain, item[0])
         return d
 
@@ -922,17 +922,15 @@
         Insert the properties from mapper into the model at treeiter
         """
         column_properties = sorted(
-            filter(lambda x: isinstance(x, ColumnProperty)
-                   and not x.key.startswith('_'),
-                   mapper.iterate_properties),
+            [x for x in mapper.iterate_properties if isinstance(x, ColumnProperty)
+                   and not x.key.startswith('_')],
             key=lambda k: k.key)
         for prop in column_properties:
             model.append(treeiter, [prop.key, prop])
 
         relation_properties = sorted(
-            filter(lambda x: isinstance(x, RelationProperty)
-                   and not x.key.startswith('_'),
-                   mapper.iterate_properties),
+            [x for x in mapper.iterate_properties if isinstance(x, RelationProperty)
+                   and not x.key.startswith('_')],
             key=lambda k: k.key)
         for prop in relation_properties:
             it = model.append(treeiter, [prop.key, prop])
@@ -983,7 +981,7 @@
         super(SchemaMenu, self).__init__()
         self.activate_cb = activate_cb
         self.relation_filter = relation_filter
-        map(self.append, self._get_prop_menuitems(mapper))
+        list(map(self.append, self._get_prop_menuitems(mapper)))
         self.show_all()
 
     def on_activate(self, menuitem, prop):
@@ -1010,7 +1008,7 @@
 
         submenu = menuitem.get_submenu()
         if len(submenu.get_children()) == 0:
-            map(submenu.append, self._get_prop_menuitems(prop.mapper, prop))
+            list(map(submenu.append, self._get_prop_menuitems(prop.mapper, prop)))
         submenu.show_all()
 
     def _get_prop_menuitems(self, mapper, container=None):
@@ -1019,14 +1017,12 @@
         # properties in column_properties and relation_properties
 
         column_properties = sorted(
-            filter(lambda x: isinstance(x, ColumnProperty)
-                   and not x.key.startswith('_'),
-                   mapper.iterate_properties),
+            [x for x in mapper.iterate_properties if isinstance(x, ColumnProperty)
+                   and not x.key.startswith('_')],
             key=lambda k: (k.key!='id', not k.key.endswith('_id'), k.key))
         relation_properties = sorted(
-            filter(lambda x: isinstance(x, RelationProperty)
-                   and not x.key.startswith('_'),
-                   mapper.iterate_properties),
+            [x for x in mapper.iterate_properties if isinstance(x, RelationProperty)
+                   and not x.key.startswith('_')],
             key=lambda k: k.key)
 
         items = []
@@ -1100,7 +1096,7 @@
         self.table.attach(self.prop_button, 1, 2, row_number, row_number+1)
 
         self.cond_combo = Gtk.ComboBoxText()
-        map(self.cond_combo.append_text, self.conditions)
+        list(map(self.cond_combo.append_text, self.conditions))
         self.cond_combo.set_active(0)
         self.table.attach(self.cond_combo, 2, 3, row_number, row_number+1)
 
@@ -1237,7 +1233,7 @@
         self.view.widgets.domain_combo.set_active(-1)
 
         table = self.view.widgets.expressions_table
-        map(table.remove, table.get_children())
+        list(map(table.remove, table.get_children()))
 
         self.view.widgets.domain_liststore.clear()
         for key in sorted(self.domain_map.keys()):
@@ -1261,7 +1257,7 @@
 
         # remove all clauses, they became useless in new domain
         table = self.view.widgets.expressions_table
-        map(table.remove, table.get_children())
+        list(map(table.remove, table.get_children()))
         del self.expression_rows[:]
         # initialize view at 1 clause, however invalid
         self.table_row_count = 0
@@ -1341,7 +1337,7 @@
         # locate domain in list of valid domains
         try:
             index = sorted(self.domain_map.keys()).index(parsed.domain)
-        except ValueError, e:
+        except ValueError as e:
             logger.debug('cannot restore query, %s(%s)' % (type(e), e))
             return
         # and set the domain_combo correspondently
--- ./bauble/task.py	(original)
+++ ./bauble/task.py	(refactored)
@@ -130,7 +130,7 @@
     global _context_id
     try:
         _context_id
-    except NameError, e:
+    except NameError as e:
         # this is expected to happen, it's normal behaviour.
         logger.info(e)  # global name '_context_id' is not defined
         _context_id = bauble.gui.widgets.statusbar.get_context_id('__task')
--- ./bauble/test_querybuilderparser.py	(original)
+++ ./bauble/test_querybuilderparser.py	(refactored)
@@ -16,70 +16,70 @@
 # along with ghini.desktop. If not, see <http://www.gnu.org/licenses/>.
 
 
-from querybuilderparser import BuiltQuery
+from .querybuilderparser import BuiltQuery
 from bauble.test import BaubleTestCase
 from nose import SkipTest
 
 class QBP(BaubleTestCase):
     def test_and_clauses(self):
         query = BuiltQuery('plant WHERE accession.species.genus.family.epithet=Fabaceae AND location.description="Block 10" and quantity > 0 and quantity == 0')
-        self.assertEquals(len(query.parsed), 6)
-        self.assertEquals(query.parsed[0], 'plant')
-        self.assertEquals(query.parsed[1], 'where')
-        self.assertEquals(len(query.parsed[2]), 3)
+        self.assertEqual(len(query.parsed), 6)
+        self.assertEqual(query.parsed[0], 'plant')
+        self.assertEqual(query.parsed[1], 'where')
+        self.assertEqual(len(query.parsed[2]), 3)
         for i in (3, 4, 5):
-            self.assertEquals(query.parsed[i][0], 'and')
-            self.assertEquals(len(query.parsed[i]), 4)
+            self.assertEqual(query.parsed[i][0], 'and')
+            self.assertEqual(len(query.parsed[i]), 4)
 
     def test_or_clauses(self):
         query = BuiltQuery('plant WHERE accession.species.genus.family.epithet=Fabaceae OR location.description="Block 10" or quantity > 0 or quantity == 0')
-        self.assertEquals(len(query.parsed), 6)
-        self.assertEquals(query.parsed[0], 'plant')
-        self.assertEquals(query.parsed[1], 'where')
-        self.assertEquals(len(query.parsed[2]), 3)
+        self.assertEqual(len(query.parsed), 6)
+        self.assertEqual(query.parsed[0], 'plant')
+        self.assertEqual(query.parsed[1], 'where')
+        self.assertEqual(len(query.parsed[2]), 3)
         for i in (3, 4, 5):
-            self.assertEquals(query.parsed[i][0], 'or')
-            self.assertEquals(len(query.parsed[i]), 4)
+            self.assertEqual(query.parsed[i][0], 'or')
+            self.assertEqual(len(query.parsed[i]), 4)
 
     def test_has_clauses(self):
         query = BuiltQuery('genus WHERE epithet=Inga')
-        self.assertEquals(len(query.clauses), 1)
+        self.assertEqual(len(query.clauses), 1)
         query = BuiltQuery('genus WHERE epithet=Inga or epithet=Iris')
-        self.assertEquals(len(query.clauses), 2)
+        self.assertEqual(len(query.clauses), 2)
 
     def test_has_domain(self):
         query = BuiltQuery('plant WHERE accession.species.genus.epithet=Inga')
-        self.assertEquals(query.domain, 'plant')
+        self.assertEqual(query.domain, 'plant')
 
     def test_clauses_have_fields(self):
         query = BuiltQuery('genus WHERE epithet=Inga or family.epithet=Poaceae')
-        self.assertEquals(len(query.clauses), 2)
-        self.assertEquals(query.clauses[0].connector, None)
-        self.assertEquals(query.clauses[1].connector, 'or')
-        self.assertEquals(query.clauses[0].field, 'epithet')
-        self.assertEquals(query.clauses[1].field, 'family.epithet')
-        self.assertEquals(query.clauses[0].operator, '=')
-        self.assertEquals(query.clauses[1].operator, '=')
-        self.assertEquals(query.clauses[0].value, 'Inga')
-        self.assertEquals(query.clauses[1].value, 'Poaceae')
+        self.assertEqual(len(query.clauses), 2)
+        self.assertEqual(query.clauses[0].connector, None)
+        self.assertEqual(query.clauses[1].connector, 'or')
+        self.assertEqual(query.clauses[0].field, 'epithet')
+        self.assertEqual(query.clauses[1].field, 'family.epithet')
+        self.assertEqual(query.clauses[0].operator, '=')
+        self.assertEqual(query.clauses[1].operator, '=')
+        self.assertEqual(query.clauses[0].value, 'Inga')
+        self.assertEqual(query.clauses[1].value, 'Poaceae')
         query = BuiltQuery("species WHERE genus.epithet=Inga and accessions.code like '2010%'")
-        self.assertEquals(len(query.clauses), 2)
-        self.assertEquals(query.clauses[0].connector, None)
-        self.assertEquals(query.clauses[1].connector, 'and')
-        self.assertEquals(query.clauses[0].field, 'genus.epithet')
-        self.assertEquals(query.clauses[1].field, 'accessions.code')
-        self.assertEquals(query.clauses[0].operator, '=')
-        self.assertEquals(query.clauses[1].operator, 'like')
-        self.assertEquals(query.clauses[0].value, 'Inga')
-        self.assertEquals(query.clauses[1].value, '2010%')
+        self.assertEqual(len(query.clauses), 2)
+        self.assertEqual(query.clauses[0].connector, None)
+        self.assertEqual(query.clauses[1].connector, 'and')
+        self.assertEqual(query.clauses[0].field, 'genus.epithet')
+        self.assertEqual(query.clauses[1].field, 'accessions.code')
+        self.assertEqual(query.clauses[0].operator, '=')
+        self.assertEqual(query.clauses[1].operator, 'like')
+        self.assertEqual(query.clauses[0].value, 'Inga')
+        self.assertEqual(query.clauses[1].value, '2010%')
 
     def test_is_none_if_wrong(self):
         query = BuiltQuery("'species WHERE genus.epithet=Inga")
-        self.assertEquals(query.is_valid, False)
+        self.assertEqual(query.is_valid, False)
         query = BuiltQuery("species like %")
-        self.assertEquals(query.is_valid, False)
+        self.assertEqual(query.is_valid, False)
         query = BuiltQuery("Inga")
-        self.assertEquals(query.is_valid, False)
+        self.assertEqual(query.is_valid, False)
 
     def test_is_case_insensitive(self):
         for s in ["species Where genus.epithet=Inga and accessions.code like '2010%'",
@@ -88,31 +88,31 @@
                   "species Where genus.epithet=Inga AND accessions.code like '2010%'",
                   "species WHERE genus.epithet=Inga AND accessions.code LIKE '2010%'", ]:
             query = BuiltQuery(s)
-            self.assertEquals(len(query.clauses), 2)
-            self.assertEquals(query.clauses[0].connector, None)
-            self.assertEquals(query.clauses[1].connector, 'and')
-            self.assertEquals(query.clauses[0].field, 'genus.epithet')
-            self.assertEquals(query.clauses[1].field, 'accessions.code')
-            self.assertEquals(query.clauses[0].operator, '=')
-            self.assertEquals(query.clauses[1].operator, 'like')
-            self.assertEquals(query.clauses[0].value, 'Inga')
-            self.assertEquals(query.clauses[1].value, '2010%')
+            self.assertEqual(len(query.clauses), 2)
+            self.assertEqual(query.clauses[0].connector, None)
+            self.assertEqual(query.clauses[1].connector, 'and')
+            self.assertEqual(query.clauses[0].field, 'genus.epithet')
+            self.assertEqual(query.clauses[1].field, 'accessions.code')
+            self.assertEqual(query.clauses[0].operator, '=')
+            self.assertEqual(query.clauses[1].operator, 'like')
+            self.assertEqual(query.clauses[0].value, 'Inga')
+            self.assertEqual(query.clauses[1].value, '2010%')
 
     def test_is_only_usable_clauses(self):
         # valid query, but not for the query builder
         query = BuiltQuery("species WHERE genus.epithet=Inga or count(accessions.id)>4")
-        print query.parsed
-        self.assertEquals(query.is_valid, True)
-        self.assertEquals(len(query.clauses), 1)
+        print(query.parsed)
+        self.assertEqual(query.is_valid, True)
+        self.assertEqual(len(query.clauses), 1)
         query = BuiltQuery("species WHERE a=1 or count(accessions.id)>4 or genus.epithet=Inga")
-        print query, query.clauses
-        self.assertEquals(query.is_valid, True)
-        self.assertEquals(len(query.clauses), 2)
+        print(query, query.clauses)
+        self.assertEqual(query.is_valid, True)
+        self.assertEqual(len(query.clauses), 2)
 
     def test_be_able_to_skip_first_query_if_invalid(self):
         # valid query, but not for the query builder
         raise SkipTest("we can't do that without rewriting the grammar")
         query = BuiltQuery("species WHERE count(accessions.id)>4 or genus.epithet=Inga")
-        print query, query.clauses
-        self.assertEquals(query.is_valid, True)
-        self.assertEquals(len(query.clauses), 1)
+        print(query, query.clauses)
+        self.assertEqual(query.is_valid, True)
+        self.assertEqual(len(query.clauses), 1)
--- ./bauble/ui.py	(original)
+++ ./bauble/ui.py	(refactored)
@@ -286,12 +286,12 @@
         arg = None
         try:
             cmd = tokens['cmd']
-        except KeyError, e:
+        except KeyError as e:
             pass
 
         try:
             arg = tokens['arg']
-        except KeyError, e:
+        except KeyError as e:
             logger.debug("%s(%s)" % (type(e).__name__, e))
             pass
 
@@ -552,7 +552,7 @@
         menu.show()
         tools = {'__root': []}
         # categorize the tools into a dict
-        for p in pluginmgr.plugins.values():
+        for p in list(pluginmgr.plugins.values()):
             for tool in p.tools:
                 if tool.category is not None:
                     try:
@@ -597,7 +597,7 @@
         """
         try:
             tool.start()
-        except Exception, e:
+        except Exception as e:
             utils.message_details_dialog(utils.xml_safe(str(e)),
                                          traceback.format_exc(),
                                          Gtk.MessageType.ERROR)
@@ -620,7 +620,7 @@
             if committed is not None and isinstance(view, SearchView):
                 view.results_view.collapse_all()
                 view.expand_to_all_refs(expanded_rows)
-        except Exception, e:
+        except Exception as e:
             utils.message_details_dialog(utils.xml_safe(str(e)),
                                          traceback.format_exc(),
                                          Gtk.MessageType.ERROR)
@@ -677,7 +677,7 @@
         try:
             db.create()
             pluginmgr.init()
-        except Exception, e:
+        except Exception as e:
             msg = _('Could not create a new database.\n\n%s') % \
                 utils.xml_safe(e)
             tb = utils.xml_safe(traceback.format_exc())
@@ -689,7 +689,7 @@
         """
         Open the connection manager.
         """
-        from connmgr import start_connection_manager
+        from .connmgr import start_connection_manager
         default_conn = prefs[bauble.conn_default_pref]
         name, uri = start_connection_manager(default_conn)
         if name is None:
@@ -698,7 +698,7 @@
         engine = None
         try:
             engine = db.open(uri, True, True)
-        except Exception, e:
+        except Exception as e:
             # we don't do anything to handle the exception since db.open()
             # should have shown an error dialog if there was a problem
             # opening the database as long as the show_error_dialogs
@@ -799,7 +799,7 @@
             f = os.path.join(paths.lib_dir(), 'images', 'icon.svg')
         pixbuf = GdkPixbuf.Pixbuf.new_from_file(f)
         about.set_logo(pixbuf)
-        about.set_copyright(_(u'Copyright © by its contributors.'))
+        about.set_copyright(_('Copyright © by its contributors.'))
 
         import codecs
         with codecs.open(os.path.join(paths.installation_dir(), 'share', 'ghini',
--- ./bauble/view.py	(original)
+++ ./bauble/view.py	(refactored)
@@ -266,7 +266,7 @@
         :param row: the mapper instance to use to update this infobox,
           this is passed to each of the infoexpanders in turn
         """
-        for expander in self.expanders.values():
+        for expander in list(self.expanders.values()):
             expander.update(row)
 
 
@@ -343,7 +343,7 @@
                 klass = type(link['name'], (BaubleLinkButton, ),
                              link)
                 self.buttons.append(klass())
-            except Exception, e:
+            except Exception as e:
                 logger.debug('wrong link definition %s, %s(%s)' %
                              (link, type(e), e))
         for b in self.buttons:
@@ -352,7 +352,7 @@
 
     def update(self, row):
         from gi.repository import Pango
-        map(self.dynamic_box.remove, self.dynamic_box.get_children())
+        list(map(self.dynamic_box.remove, self.dynamic_box.get_children()))
         for b in self.buttons:
             b.set_string(row)
         if self.notes:
@@ -416,7 +416,7 @@
             item = session.query(klass).filter(klass.id == ndx).one()
             if self.__cancel:  # check whether caller asks to cancel
                 break
-            for k, v in item.top_level_count().items():
+            for k, v in list(item.top_level_count().items()):
                 if isinstance(v, set):
                     d[k] = v.union(d.get(k, set()))
                 else:
@@ -489,8 +489,7 @@
                 self.context_menu = context_menu
                 self.actions = []
                 if self.context_menu:
-                    self.actions = filter(lambda x: isinstance(x, Action),
-                                          self.context_menu)
+                    self.actions = [x for x in self.context_menu if isinstance(x, Action)]
 
             def get_children(self, obj):
                 '''
@@ -526,7 +525,7 @@
 
         self.create_gui()
 
-        import pictures_view
+        from . import pictures_view
         pictures_view.floating_window = pictures_view.PicturesView(
             parent=self.widgets.search_h2pane)
 
@@ -580,8 +579,8 @@
             # fire it
             bauble.gui.widgets.main_comboentry.get_child().set_text(query)
             bauble.gui.widgets.go_button.emit("clicked")
-        except Exception, e:
-            print type(e), e
+        except Exception as e:
+            print(type(e), e)
         pass
 
     def add_page_to_bottom_notebook(self, bottom_info):
@@ -624,7 +623,7 @@
         row = values[0]  # the selected row
 
         ## loop over bottom_info plugin classes (eg: Tag)
-        for klass, bottom_info in self.bottom_info.items():
+        for klass, bottom_info in list(self.bottom_info.items()):
             if 'label' not in bottom_info:  # late initialization
                 self.add_page_to_bottom_notebook(bottom_info)
             label = bottom_info['label']
@@ -665,7 +664,7 @@
             selected_type = type(row)
 
             # if we have already created an infobox of this type:
-            if selected_type in self.infobox_cache.keys():
+            if selected_type in list(self.infobox_cache.keys()):
                 new_infobox = self.infobox_cache[selected_type]
             # if selected_type defines an infobox class:
             elif selected_type in self.row_meta and \
@@ -674,7 +673,7 @@
                              % (selected_type,
                                 self.row_meta[selected_type].infobox))
                 # it might be in cache under different name
-                for ib in self.infobox_cache.values():
+                for ib in list(self.infobox_cache.values()):
                     if isinstance(ib, self.row_meta[selected_type].infobox):
                         logger.debug('found same infobox under different name')
                         new_infobox = ib
@@ -712,7 +711,7 @@
 
         try:
             set_infobox_from_row(values[0])
-        except Exception, e:
+        except Exception as e:
             # if an error occurrs, log it and empty infobox.
             logger.debug('SearchView.update_infobox: %s' % e)
             logger.debug(traceback.format_exc())
@@ -805,9 +804,9 @@
         results = []
         try:
             results = search.search(text, self.session)
-        except ParseException, err:
+        except ParseException as err:
             error_msg = _('Error in search string at column %s') % err.column
-        except (BaubleError, AttributeError, Exception, SyntaxError), e:
+        except (BaubleError, AttributeError, Exception, SyntaxError) as e:
             logger.debug(traceback.format_exc())
             error_msg = _('** Error: %s') % utils.xml_safe(e)
             error_details_msg = utils.xml_safe(traceback.format_exc())
@@ -849,7 +848,7 @@
                     task = self._populate_worker(results)
                     while True:
                         try:
-                            task.next()
+                            next(task)
                         except StopIteration:
                             break
                 logger.debug(time.time() - start)
@@ -895,13 +894,13 @@
             kids = self.row_meta[type(row)].get_children(row)
             if len(kids) == 0:
                 return True
-        except saexc.InvalidRequestError, e:
+        except saexc.InvalidRequestError as e:
             logger.debug(utils.utf8(e))
             model = self.results_view.get_model()
             for found in utils.search_tree_model(model, row):
                 model.remove(found)
             return True
-        except Exception, e:
+        except Exception as e:
             logger.debug(utils.utf8(e))
             logger.debug(traceback.format_exc())
             return True
@@ -1004,7 +1003,7 @@
         value = model[treeiter][0]
         #logger.debug('TBR: far too detailed, please do not keep us here')
         #logger.debug('TBR: %s' % value)
-        if isinstance(value, basestring):
+        if isinstance(value, str):
             cell.set_property('markup', value)
         else:
             # if the value isn't part of a session then add it to the
@@ -1032,7 +1031,7 @@
                     (_mainstr_tmpl % utils.utf8(main),
                      _substr_tmpl % utils.utf8(substr)))
 
-            except (saexc.InvalidRequestError, TypeError), e:
+            except (saexc.InvalidRequestError, TypeError) as e:
                 logger.warning(
                     'bauble.view.SearchView.cell_data_func(): \n(%s)%s' %
                     (type(e), e))
@@ -1045,7 +1044,7 @@
                     self.results_view.set_model(model)
                 GObject.idle_add(remove)
 
-            except Exception, e:
+            except Exception as e:
                 logger.error(
                     'bauble.view.SearchView.cell_data_func(): \n(%s)%s' %
                     (type(e), e))
@@ -1123,7 +1122,7 @@
                         # in an session...maybe it's a thread thing
                         values = self.get_selected_values()
                         result = cb(values)
-                    except Exception, e:
+                    except Exception as e:
                         msg = utils.xml_safe(str(e))
                         tb = utils.xml_safe(traceback.format_exc())
                         utils.message_details_dialog(
@@ -1369,14 +1368,14 @@
             eval(v)
             return v
         except:
-            return u"»%s«" % v
+            return "»%s«" % v
 
     def add_row(self, item):
         d = eval(item.values)
         del d['_created']
         del d['_last_updated']
-        friendly = ', '.join(u"%s: %s" % (k, self.show_typed_value(v))
-                             for k, v in sorted(d.items(), self.cmp_items)
+        friendly = ', '.join("%s: %s" % (k, self.show_typed_value(v))
+                             for k, v in sorted(list(d.items()), self.cmp_items)
                              )
         self.liststore.append([
             ("%s" % item.timestamp)[:19], item.operation, item.user,
--- ./bauble/plugins/abcd/__init__.py	(original)
+++ ./bauble/plugins/abcd/__init__.py	(refactored)
@@ -317,11 +317,11 @@
         # add anything that comes past Notes, e.g. RecordURI,
         # EAnnotations, UnitExtension
         notes_list = obj.get_Notes(unit)
-        print notes_list
+        print(notes_list)
         notes_str = ''
         if notes_list:
             for note in notes_list:
-                for key, value in note.iteritems():
+                for key, value in note.items():
                     note[key] = value.replace('|', '_')
                 # make a string of notes using | as seperator
                 notes_str += '%s = %s (%s : %s)|' % (
--- ./bauble/plugins/abcd/test.py	(original)
+++ ./bauble/plugins/abcd/test.py	(refactored)
@@ -87,18 +87,18 @@
         """
         Test the ABCDExporter
         """
-        self.assert_(self.session.query(Plant).count() > 0)
+        self.assertTrue(self.session.query(Plant).count() > 0)
         accession = self.session.query(Accession).first()
         source = Source()
         accession.source = source
-        source.sources_code = u'1'
-        collection = Collection(collector=u'Bob', collectors_code=u'1',
-                                geography_id=1, locale=u'locale',
+        source.sources_code = '1'
+        collection = Collection(collector='Bob', collectors_code='1',
+                                geography_id=1, locale='locale',
                                 date=datetime.date.today(),
-                                latitude=u'1.1', longitude=u'1.1',
-                                habitat=u'habitat description',
+                                latitude='1.1', longitude='1.1',
+                                habitat='habitat description',
                                 elevation=1, elevation_accy=1,
-                                notes=u'some notes')
+                                notes='some notes')
         source.collection = collection
         from bauble.plugins.garden import Institution
         inst = Institution()
--- ./bauble/plugins/garden/__init__.py	(original)
+++ ./bauble/plugins/garden/__init__.py	(refactored)
@@ -177,7 +177,7 @@
     model = Gtk.ListStore(object)
     locations = [''] + sorted(presenter.session.query(Location).all(),
                        key=lambda loc: utils.natsort_key(loc.code))
-    map(lambda loc: model.append([loc]), locations)
+    list(map(lambda loc: model.append([loc]), locations))
     combo.set_model(model)
     completion.set_model(model)
 
--- ./bauble/plugins/garden/accession.py	(original)
+++ ./bauble/plugins/garden/accession.py	(refactored)
@@ -30,6 +30,7 @@
 import weakref
 
 import logging
+from functools import reduce
 logger = logging.getLogger(__name__)
 
 from bauble.prefs import prefs, debug_logging_prefs, testing
@@ -186,7 +187,7 @@
         return
     else:
         msg = _("Are you sure you want to remove accession <b>%s</b>?") % \
-            utils.xml_safe(unicode(acc))
+            utils.xml_safe(str(acc))
     if not utils.yes_no_dialog(msg):
         return
     try:
@@ -194,8 +195,8 @@
         obj = session.query(Accession).get(acc.id)
         session.delete(obj)
         session.commit()
-    except Exception, e:
-        msg = _('Could not delete.\n\n%s') % utils.xml_safe(unicode(e))
+    except Exception as e:
+        msg = _('Could not delete.\n\n%s') % utils.xml_safe(str(e))
         utils.message_details_dialog(msg, traceback.format_exc(),
                                      type=Gtk.MessageType.ERROR)
     finally:
@@ -367,10 +368,10 @@
 
 # ITF2 - E.1; Provenance Type Flag; Transfer code: prot
 prov_type_values = [
-    (u'Wild', _('Accession of wild source')),  # W
-    (u'Cultivated', _('Propagule(s) from a wild source plant')),  # Z
-    (u'NotWild', _("Accession not of wild source")),  # G
-    (u'InsufficientData', _("Insufficient Data")),  # U
+    ('Wild', _('Accession of wild source')),  # W
+    ('Cultivated', _('Propagule(s) from a wild source plant')),  # Z
+    ('NotWild', _("Accession not of wild source")),  # G
+    ('InsufficientData', _("Insufficient Data")),  # U
     (None, ''),  # do not transfer this field
     ]
 
@@ -387,73 +388,73 @@
 # user not familiar with ITF2 standard.
 wild_prov_status_values = [
     # Endemic found within indigenous range
-    (u'WildNative', _("Wild native")),
+    ('WildNative', _("Wild native")),
     # found outside indigenous range
-    (u'WildNonNative', _("Wild non-native")),
+    ('WildNonNative', _("Wild non-native")),
     # Endemic, cultivated, reintroduced or translocated within its
     # indigenous range
-    (u'CultivatedNative', _("Cultivated native")),
+    ('CultivatedNative', _("Cultivated native")),
     # cultivated, found outside its indigenous range
-    (u'CultivatedNonNative', _("Cultivated non-native")),
+    ('CultivatedNonNative', _("Cultivated non-native")),
     # Not transferred
     (None, '')]
 
 # not ITF2
 # - further specifies the Z prov type flag value
 cultivated_prov_status_values = [
-    (u'InVitro', _("In vitro")),
-    (u'Division', _("Division")),
-    (u'Seed', _("Seed")),
-    (u'Unknown', _("Unknown")),
+    ('InVitro', _("In vitro")),
+    ('Division', _("Division")),
+    ('Seed', _("Seed")),
+    ('Unknown', _("Unknown")),
     (None, '')]
 
 # not ITF2
 # - further specifies the G prov type flag value
 purchase_prov_status_values = [
-    (u'National', _("National")),
-    (u'Imported', _("Imported")),
-    (u'Unknown', _("Unknown")),
+    ('National', _("National")),
+    ('Imported', _("Imported")),
+    ('Unknown', _("Unknown")),
     (None, '')]
 
 # not ITF2
 recvd_type_values = {
-    u'ALAY': _('Air layer'),
-    U'BBPL': _('Balled & burlapped plant'),
-    u'BRPL': _('Bare root plant'),
-    u'BUDC': _('Bud cutting'),
-    u'BUDD': _('Budded'),
-    u'BULB': _('Bulb'),
-    u'CLUM': _('Clump'),
-    u'CORM': _('Corm'),
-    u'DIVI': _('Division'),
-    u'GRAF': _('Graft'),
-    u'GRFS': _('Grafted standard'),
-    u'LAYE': _('Layer'),
-    u'FLAS': _('Flask seed or spore'),
-    u'FLAT': _('Flask tissue culture'),
-    u'SEED': _('Seed'),
-    u'SEDL': _('Seedling'),
-    u'PLTP': _('Plant punnett or plug'),
-    u'PLNT': _('Plant tubestock'),
-    u'PLTS': _('Plant potted (sml)'),
-    u'PLTM': _('Plant potted (med)'),
-    u'PLTL': _('Plant potted (lrg)'),
-    u'PLTX': _('Plant ex-ground'),
-    u'PLXA': _('Plant advanced ex-Ground'),
-    u'PSBU': _('Pseudobulb'),
-    u'RCUT': _('Rooted cutting'),
-    u'RHIZ': _('Rhizome'),
-    u'ROOC': _('Root cutting'),
-    u'ROOT': _('Root'),
-    u'SCIO': _('Scion'),
-    u'SPOR': _('Spore'),
-    u'SPRL': _('Sporeling'),
-    u'TUBE': _('Tuber'),
-    u'UNKN': _('Unknown'),
-    u'URCU': _('Unrooted cutting'),
-    u'BBIL': _('Bulbil'),
-    u'VEGS': _('Vegetative spreading'),
-    u'SCKR': _('Root sucker'),
+    'ALAY': _('Air layer'),
+    'BBPL': _('Balled & burlapped plant'),
+    'BRPL': _('Bare root plant'),
+    'BUDC': _('Bud cutting'),
+    'BUDD': _('Budded'),
+    'BULB': _('Bulb'),
+    'CLUM': _('Clump'),
+    'CORM': _('Corm'),
+    'DIVI': _('Division'),
+    'GRAF': _('Graft'),
+    'GRFS': _('Grafted standard'),
+    'LAYE': _('Layer'),
+    'FLAS': _('Flask seed or spore'),
+    'FLAT': _('Flask tissue culture'),
+    'SEED': _('Seed'),
+    'SEDL': _('Seedling'),
+    'PLTP': _('Plant punnett or plug'),
+    'PLNT': _('Plant tubestock'),
+    'PLTS': _('Plant potted (sml)'),
+    'PLTM': _('Plant potted (med)'),
+    'PLTL': _('Plant potted (lrg)'),
+    'PLTX': _('Plant ex-ground'),
+    'PLXA': _('Plant advanced ex-Ground'),
+    'PSBU': _('Pseudobulb'),
+    'RCUT': _('Rooted cutting'),
+    'RHIZ': _('Rhizome'),
+    'ROOC': _('Root cutting'),
+    'ROOT': _('Root'),
+    'SCIO': _('Scion'),
+    'SPOR': _('Spore'),
+    'SPRL': _('Sporeling'),
+    'TUBE': _('Tuber'),
+    'UNKN': _('Unknown'),
+    'URCU': _('Unrooted cutting'),
+    'BBIL': _('Bulbil'),
+    'VEGS': _('Vegetative spreading'),
+    'SCKR': _('Root sucker'),
     None: ''
     }
 
@@ -466,43 +467,43 @@
 # no matter how they are recieved they are all are likely to become plants at
 # some point
 accession_type_to_plant_material = {
-    u'ALAY': u'Plant',
-    U'BBPL': u'Plant',
-    u'BRPL': u'Plant',
-    u'BUDC': u'Plant',
-    u'BUDD': u'Plant',
-    u'BULB': u'Vegetative',
-    u'CLUM': u'Plant',
-    u'CORM': u'Vegetative',
-    u'DIVI': u'Plant',
-    u'GRAF': u'Plant',
-    u'GRFS': u'Plant',
-    u'LAYE': u'Plant',
-    u'FLAS': u'Tissue',
-    u'FLAT': u'Tissue',
-    u'SEED': u'Seed',
-    u'SEDL': u'Plant',
-    u'PLTP': u'Plant',
-    u'PLNT': u'Plant',
-    u'PLTS': u'Plant',
-    u'PLTM': u'Plant',
-    u'PLTL': u'Plant',
-    u'PLTX': u'Plant',
-    u'PLXA': u'Plant',
-    u'PSBU': u'Plant',
-    u'RCUT': u'Plant',
-    u'RHIZ': u'Vegetative',
-    u'ROOC': u'Plant',
-    u'ROOT': u'Vegetative',
-    u'SCIO': u'Vegetative',
-    u'SPOR': u'Seed',
-    u'SPRL': u'Plant',
-    u'TUBE': u'Vegetative',
-    u'UNKN': u'Other',
-    u'URCU': u'Vegetative',
-    u'BBIL': u'Vegetative',
-    u'VEGS': u'Plant',
-    u'SCKR': u'Plant',
+    'ALAY': 'Plant',
+    'BBPL': 'Plant',
+    'BRPL': 'Plant',
+    'BUDC': 'Plant',
+    'BUDD': 'Plant',
+    'BULB': 'Vegetative',
+    'CLUM': 'Plant',
+    'CORM': 'Vegetative',
+    'DIVI': 'Plant',
+    'GRAF': 'Plant',
+    'GRFS': 'Plant',
+    'LAYE': 'Plant',
+    'FLAS': 'Tissue',
+    'FLAT': 'Tissue',
+    'SEED': 'Seed',
+    'SEDL': 'Plant',
+    'PLTP': 'Plant',
+    'PLNT': 'Plant',
+    'PLTS': 'Plant',
+    'PLTM': 'Plant',
+    'PLTL': 'Plant',
+    'PLTX': 'Plant',
+    'PLXA': 'Plant',
+    'PSBU': 'Plant',
+    'RCUT': 'Plant',
+    'RHIZ': 'Vegetative',
+    'ROOC': 'Plant',
+    'ROOT': 'Vegetative',
+    'SCIO': 'Vegetative',
+    'SPOR': 'Seed',
+    'SPRL': 'Plant',
+    'TUBE': 'Vegetative',
+    'UNKN': 'Other',
+    'URCU': 'Vegetative',
+    'BBIL': 'Vegetative',
+    'VEGS': 'Plant',
+    'SCKR': 'Plant',
     None: None
     }
 
@@ -595,7 +596,7 @@
     # columns
     #: the accession code
     code = Column(Unicode(20), nullable=False, unique=True)
-    code_format = u'%Y%PD####'
+    code_format = '%Y%PD####'
 
     @validates('code')
     def validate_stripping(self, key, value):
@@ -615,7 +616,7 @@
     date_accd = Column(types.Date)
     date_recvd = Column(types.Date)
     quantity_recvd = Column(Integer, autoincrement=False)
-    recvd_type = Column(types.Enum(values=recvd_type_values.keys(),
+    recvd_type = Column(types.Enum(values=list(recvd_type_values.keys()),
                                    translations=recvd_type_values),
                         default=None)
 
@@ -680,7 +681,7 @@
         if format.find('%{Y-1}') >= 0:
             format = format.replace('%{Y-1}', str(today.year - 1))
         format = today.strftime(format)
-        start = unicode(format.rstrip('#'))
+        start = str(format.rstrip('#'))
         if start == format:
             # fixed value
             return start
@@ -695,18 +696,18 @@
                 next = format % (max(codes)+1)
             else:
                 next = format % 1
-        except Exception, e:
+        except Exception as e:
             logger.debug("%s(%s)" % (type(e).__name, e))
             pass
         finally:
             session.close()
-        return unicode(next)
+        return str(next)
 
     def search_view_markup_pair(self):
         """provide the two lines describing object for SearchView row.
 
         """
-        first, second = (utils.xml_safe(unicode(self)),
+        first, second = (utils.xml_safe(str(self)),
                          self.species_str(markup=True))
         suffix = _("%(1)s plant groups in %(2)s location(s)") % {
             '1': len(set(self.plants)),
@@ -847,7 +848,7 @@
                     'infrasp4_rank'
                 }
                 sp_parts = {key: keys[key] for key in
-                            _parts.intersection(keys.keys())}
+                            _parts.intersection(list(keys.keys()))}
                 sp_dict.update(sp_parts)
                 # if have details for the species parts updating with epithet
                 # is likely to just breaks things
@@ -863,7 +864,7 @@
             elif keys['rank'] == 'genus':
                 result['species'] = Species.retrieve_or_create(
                     session, {'ht-epithet': keys['taxon'],
-                              'epithet': u'sp'})
+                              'epithet': 'sp'})
             elif keys['rank'] == 'familia':
                 unknown_genus = 'Zzz-' + keys['taxon'][:-1]
                 Genus.retrieve_or_create(
@@ -871,7 +872,7 @@
                               'epithet': unknown_genus})
                 result['species'] = Species.retrieve_or_create(
                     session, {'ht-epithet': unknown_genus,
-                              'epithet': u'sp'})
+                              'epithet': 'sp'})
             logger.debug('compute_serializable_fields results = %s' % result)
         return result
 
@@ -1009,14 +1010,14 @@
         '''
         save the current state of the gui to the preferences
         '''
-        for expander, pref in self.expanders_pref_map.iteritems():
+        for expander, pref in self.expanders_pref_map.items():
             prefs.prefs[pref] = self.widgets[expander].get_expanded()
 
     def restore_state(self):
         '''
         restore the state of the gui from the preferences
         '''
-        for expander, pref in self.expanders_pref_map.iteritems():
+        for expander, pref in self.expanders_pref_map.items():
             expanded = prefs.prefs.get(pref, True)
             self.widgets[expander].set_expanded(expanded)
 
@@ -1173,7 +1174,7 @@
         # remove any verification boxes that would have been added to
         # the widget in a previous run
         box = self.view.widgets.verifications_parent_box
-        map(box.remove, box.get_children())
+        list(map(box.remove, box.get_children()))
 
         # order by date of the existing verifications
         for ver in model.verifications:
@@ -1325,7 +1326,7 @@
                                   % (level, descr))
             combo.set_cell_data_func(renderer, cell_data_func)
             model = Gtk.ListStore(int, str)
-            for level, descr in ver_level_descriptions.iteritems():
+            for level, descr in ver_level_descriptions.items():
                 model.append([level, descr])
             combo.set_model(model)
             if self.model.level:
@@ -1361,7 +1362,7 @@
             PROBLEM = 'INVALID_DATE'
             try:
                 value = editor.DateValidator().to_python(entry.props.text)
-            except ValidatorError, e:
+            except ValidatorError as e:
                 logger.debug("%s(%s)" % (type(e).__name__, e))
                 self.presenter().add_problem(PROBLEM, entry)
             else:
@@ -1673,7 +1674,7 @@
         model = Gtk.ListStore(object)
         none_iter = model.append([''])
         model.append([self.garden_prop_str])
-        map(lambda x: model.append([x]), self.session.query(Contact))
+        list(map(lambda x: model.append([x]), self.session.query(Contact)))
         combo.set_model(model)
         combo.get_child().get_completion().set_model(model)
 
@@ -1738,7 +1739,7 @@
             else:
                 #self.model.source.source_detail = value
                 widget_visibility['source_sw'] = True
-            for widget, value in widget_visibility.iteritems():
+            for widget, value in widget_visibility.items():
                 self.view.widgets[widget].props.visible = value
             self.view.widgets.source_alignment.props.sensitive = True
 
@@ -2033,7 +2034,7 @@
         if values is None:
             query = self.session.\
                 query(meta.BaubleMeta).\
-                filter(meta.BaubleMeta.name.like(u'acidf_%')).\
+                filter(meta.BaubleMeta.name.like('acidf_%')).\
                 order_by(meta.BaubleMeta.name)
             if query.count():
                 Accession.code_format = query.first().value
@@ -2055,7 +2056,7 @@
         ls.clear()
         query = self.session.\
             query(meta.BaubleMeta).\
-            filter(meta.BaubleMeta.name.like(u'acidf_%')).\
+            filter(meta.BaubleMeta.name.like('acidf_%')).\
             order_by(meta.BaubleMeta.name)
         for i, row in enumerate(query):
             ls.append([i+1, row.value])
@@ -2078,7 +2079,7 @@
         if presenter.start() > 0:
             presenter.session.\
                 query(meta.BaubleMeta).\
-                filter(meta.BaubleMeta.name.like(u'acidf_%')).\
+                filter(meta.BaubleMeta.name.like('acidf_%')).\
                 delete(synchronize_session=False)
             i = 1
             iter = ls.get_iter_first()
@@ -2089,7 +2090,7 @@
                 i += 1
                 if not value:
                     continue
-                obj = meta.BaubleMeta(name=u'acidf_%02d' % i,
+                obj = meta.BaubleMeta(name='acidf_%02d' % i,
                                       value=value)
                 values.append(value)
                 presenter.session.add(obj)
@@ -2111,8 +2112,8 @@
         active = None
         if self.model.id_qual_rank == 'genus':
             active = it
-        it = model.append([str(species.sp), u'sp'])
-        if self.model.id_qual_rank == u'sp':
+        it = model.append([str(species.sp), 'sp'])
+        if self.model.id_qual_rank == 'sp':
             active = it
 
         infrasp_parts = []
@@ -2197,7 +2198,7 @@
         text = entry.get_text()
         query = self.session.query(Accession)
         if text != self._original_code \
-                and query.filter_by(code=unicode(text)).count() > 0:
+                and query.filter_by(code=str(text)).count() > 0:
             self.add_problem(self.PROBLEM_DUPLICATE_ACCESSION,
                              self.view.widgets.acc_code_entry)
             self.set_model_attr('code', None)
@@ -2222,7 +2223,7 @@
         PROBLEM = 'INVALID_DATE'
         try:
             value = editor.DateValidator().to_python(entry.props.text)
-        except ValidatorError, e:
+        except ValidatorError as e:
             logger.debug("%s(%s)" % (type(e).__name, e))
             self.add_problem(PROBLEM, entry)
         else:
@@ -2293,7 +2294,7 @@
             prop = self.model.source.propagation
             prop_ignore = ['id', 'propagation_id']
             prop_model = None
-            if prop and prop.prop_type == u'Seed':
+            if prop and prop.prop_type == 'Seed':
                 prop_model = prop._seed
             elif prop and prop.prop_type == 'UnrootedCutting':
                 prop_model = prop._cutting
@@ -2329,7 +2330,7 @@
         '''
         self.initializing = initializing
         date_format = prefs.prefs[prefs.date_format_pref]
-        for widget, field in self.widget_to_field_map.iteritems():
+        for widget, field in self.widget_to_field_map.items():
             if field == 'species_id':
                 value = self.model.species
             else:
@@ -2415,12 +2416,12 @@
                 if self.presenter.is_dirty():
                     self.commit_changes()
                     self._committed.append(self.model)
-            except DBAPIError, e:
+            except DBAPIError as e:
                 msg = _('Error committing changes.\n\n%s') % \
-                    utils.xml_safe(unicode(e.orig))
+                    utils.xml_safe(str(e.orig))
                 utils.message_details_dialog(msg, str(e), Gtk.MessageType.ERROR)
                 return False
-            except Exception, e:
+            except Exception as e:
                 msg = _('Unknown error when committing changes. See the '
                         'details for more information.\n\n%s') \
                     % utils.xml_safe(e)
@@ -2524,7 +2525,7 @@
             logger.debug('creating plant for new accession')
             accession = self.model
             location = accession.intended_location
-            plant = Plant(accession=accession, code=u'1', quantity=accession.quantity_recvd, location=location,
+            plant = Plant(accession=accession, code='1', quantity=accession.quantity_recvd, location=location,
                           acc_type=accession_type_to_plant_material.get(self.model.recvd_type))
             self.session.add(plant)
             
@@ -2578,7 +2579,7 @@
         '''
         self.current_obj = row
         self.widget_set_value('acc_code_data', '<big>%s</big>' %
-                              utils.xml_safe(unicode(row.code)),
+                              utils.xml_safe(str(row.code)),
                               markup=True)
 
         # TODO: i don't know why we can't just set the visible
@@ -2602,7 +2603,7 @@
             plant_locations[plant.location] = q + plant.quantity
         if plant_locations:
             strs = []
-            for location, quantity in plant_locations.iteritems():
+            for location, quantity in plant_locations.items():
                 strs.append(_('%(quantity)s in %(location)s')
                             % dict(location=str(location), quantity=quantity))
             s = '\n'.join(strs)
@@ -2625,7 +2626,7 @@
         self.widget_set_value('quantity_recvd_data', quantity_str)
 
         prov_str = dict(prov_type_values)[row.prov_type]
-        if row.prov_type == u'Wild' and row.wild_prov_status:
+        if row.prov_type == 'Wild' and row.wild_prov_status:
             prov_str = '%s (%s)' % \
                 (prov_str, dict(wild_prov_status_values)[row.wild_prov_status])
         self.widget_set_value('prov_data', prov_str, False)
@@ -2786,7 +2787,7 @@
         self.set_expanded(True)
         self.set_sensitive(True)
 
-        parents = filter(lambda v: v.parent_material, row.vouchers)
+        parents = [v for v in row.vouchers if v.parent_material]
         for voucher in parents:
             s = '%s %s (parent)' % (voucher.herbarium, voucher.code)
             label = Gtk.Label(label=s)
@@ -2794,7 +2795,7 @@
             self.vbox.pack_start(label, True, True, 0)
             label.show()
 
-        not_parents = filter(lambda v: not v.parent_material, row.vouchers)
+        not_parents = [v for v in row.vouchers if not v.parent_material]
         for voucher in not_parents:
             s = '%s %s' % (voucher.herbarium, voucher.code)
             label = Gtk.Label(label=s)
@@ -2845,8 +2846,7 @@
 
         # self.vouchers.update(row)
 
-        urls = filter(lambda x: x != [],
-                      [utils.get_urls(note.note) for note in row.notes])
+        urls = [x for x in [utils.get_urls(note.note) for note in row.notes] if x != []]
         if not urls:
             self.links.props.visible = False
             self.links._sep.props.visible = False
--- ./bauble/plugins/garden/aggregateclient.py	(original)
+++ ./bauble/plugins/garden/aggregateclient.py	(refactored)
@@ -46,7 +46,7 @@
                                                  'host': host} +
                                   submission_format % {'group_name': 'plant_form',
                                                        'uuid': uuid}), auth=auth)
-        except requests.exceptions.ConnectionError, e:
+        except requests.exceptions.ConnectionError as e:
             continue
         root = ET.fromstring(reply.text)
         data = root[0]  # media may follow
@@ -54,7 +54,7 @@
         item = dict([(re.sub(r'{.*}(.*)', r'\1', i.tag), i.text) for i in form])
         item['meta:uuid'] = uuid
         result.append(item)
-        for key in item.keys():
+        for key in list(item.keys()):
             if not key.endswith('_repeat'):
                 continue
             del item[key]
--- ./bauble/plugins/garden/exporttopocket.py	(original)
+++ ./bauble/plugins/garden/exporttopocket.py	(refactored)
@@ -126,7 +126,7 @@
                        (i.id, i.genus.family.epithet, i.genus.epithet, i.epithet,
                         i.infraspecific_rank, i.infraspecific_epithet,
                         i.infraspecific_author or i.sp_author or ''))
-            except Exception, e:
+            except Exception as e:
                 logger.info("error exporting species %s: %s %s" % (i.id, type(e), e))
             if self.progressbar:
                 GObject.idle_add(self.progressbar.set_fraction, 0.05 * count / len(species))
@@ -144,7 +144,7 @@
                            '(_id, code, species_id, source, start_date) '
                            'VALUES (?, ?, ?, ?, ?);',
                            (i.id, i.code, i.species_id, source_name, i.date_accd))
-            except Exception, e:
+            except Exception as e:
                 logger.info("error exporting accession %s: %s %s" % (i.id, type(e), e))
             if self.progressbar:
                 GObject.idle_add(self.progressbar.set_fraction, 0.05 + 0.4 * count / len(accessions))
@@ -158,7 +158,7 @@
                            '(_id, accession_id, code, location, end_date, n_of_pics, quantity) '
                            'VALUES (?, ?, ?, ?, ?, ?, ?);',
                            (i.id, i.accession_id, "." + i.code, i.location.code, i.date_of_death, len(i.pictures), i.quantity))
-            except Exception, e:
+            except Exception as e:
                 logger.info("error exporting plant %s: %s %s" % (i.id, type(e), e))
             if self.progressbar:
                 GObject.idle_add(self.progressbar.set_fraction, 0.45 + 0.55 * count / len(plants))
--- ./bauble/plugins/garden/import_pocket_log.py	(original)
+++ ./bauble/plugins/garden/import_pocket_log.py	(refactored)
@@ -22,7 +22,7 @@
 #
 # Data from the ghini.pocket log is written to the session, inconditionally.
 #
-from __future__ import unicode_literals
+
 
 import logging
 logger = logging.getLogger(__name__)
--- ./bauble/plugins/garden/institution.py	(original)
+++ ./bauble/plugins/garden/institution.py	(refactored)
@@ -55,7 +55,7 @@
 
     def __init__(self):
         # initialize properties to None
-        map(lambda p: setattr(self, p, None), self.__properties)
+        list(map(lambda p: setattr(self, p, None), self.__properties))
 
         for prop in self.__properties:
             db_prop = utils.utf8('inst_' + prop)
@@ -113,7 +113,7 @@
         self.on_email_text_entry_changed('inst_email')
         if not model.uuid:
             import uuid
-            model.uuid = unicode(uuid.uuid4())
+            model.uuid = str(uuid.uuid4())
 
     def cleanup(self):
         super(InstitutionPresenter, self).cleanup()
@@ -172,7 +172,7 @@
 
         # produce the log record
         registrations.info([(key, getattr(self.model, key))
-                            for key in self.widget_to_field_map.values()])
+                            for key in list(self.widget_to_field_map.values())])
 
         # remove the handler after usage
         registrations.removeHandler(handler)
--- ./bauble/plugins/garden/location.py	(original)
+++ ./bauble/plugins/garden/location.py	(refactored)
@@ -74,7 +74,7 @@
         obj = session.query(Location).get(loc.id)
         session.delete(obj)
         session.commit()
-    except Exception, e:
+    except Exception as e:
         msg = _('Could not delete.\n\n%s') % utils.xml_safe(e)
         utils.message_details_dialog(msg, traceback.format_exc(),
                                      type=Gtk.MessageType.ERROR)
@@ -343,7 +343,7 @@
         return self._dirty
 
     def refresh_view(self):
-        for widget, field in self.widget_to_field_map.iteritems():
+        for widget, field in self.widget_to_field_map.items():
             value = getattr(self.model, field)
             self.view.widget_set_value(widget, value)
 
@@ -388,13 +388,13 @@
                 if self.presenter.is_dirty():
                     self.commit_changes()
                 self._committed.append(self.model)
-            except DBAPIError, e:
+            except DBAPIError as e:
                 msg = _('Error committing changes.\n\n%s') % \
                     utils.xml_safe(e.orig)
                 utils.message_details_dialog(msg, str(e), Gtk.MessageType.ERROR)
                 self.session.rollback()
                 return False
-            except Exception, e:
+            except Exception as e:
                 msg = _('Unknown error when committing changes. See the '
                         'details for more information.\n\n%s') % \
                     utils.xml_safe(e)
--- ./bauble/plugins/garden/picture_importer.py	(original)
+++ ./bauble/plugins/garden/picture_importer.py	(refactored)
@@ -113,7 +113,7 @@
         found = False
         if type(i) == cls:
             found = True
-            for k, v in kwargs.items():
+            for k, v in list(kwargs.items()):
                 if getattr(i, k) != v:
                     found = False
         if found:
@@ -195,10 +195,10 @@
                 def set_thumbnail(store, path, col, value):
                     store[path][col] = value
                 GObject.idle_add(set_thumbnail, self.review_liststore, path, thumbnail_col, pixbuf)
-            except GLib.GError, e:
+            except GLib.GError as e:
                 logger.debug("picture %s caused GLib.GError %s" %
                              (fname, e))
-            except Exception, e:
+            except Exception as e:
                 logger.warning("picture %s caused Exception %s:%s" %
                                (fname, type(e), e))
 
@@ -241,7 +241,7 @@
         from bauble.plugins.garden import (Location, Accession, Plant, PlantNote)
         # make sure selected location exists
         if self.model.location is None:
-            self.model.location = u'imported'
+            self.model.location = 'imported'
         location = session.query(Location).filter_by(code=self.model.location).first()
         if location is not None:
             logger.log(11, 'location %s already in database' % (location, ))
@@ -257,9 +257,9 @@
             if not row[use_me_col]:
                 continue
             # get unicode strings from row
-            epgn, epsp = unicode(row[binomial_col] + ' sp').split(' ')[:2]
-            filename = unicode(row[filename_col])
-            complete_plant_code = unicode(row[accno_col])
+            epgn, epsp = str(row[binomial_col] + ' sp').split(' ')[:2]
+            filename = str(row[filename_col])
+            complete_plant_code = str(row[accno_col])
             accession_code, plant_code = complete_plant_code.rsplit(Plant.get_delimiter(), 1)
 
             # create or retrieve genus and species
@@ -306,13 +306,13 @@
             utils.copy_picture_with_thumbnail(self.model.filepath, filename)
 
             # add picture note
-            note = session.query(PlantNote).filter_by(plant=plant, note=filename, category=u'<picture>').first()
+            note = session.query(PlantNote).filter_by(plant=plant, note=filename, category='<picture>').first()
             if note is not None:
                 logger.log(11, 'picture %s already in plant %s' % (filename, complete_plant_code))
             else:
-                note = query_session_new(session, PlantNote, plant=plant, note=filename, category=u'<picture>')
+                note = query_session_new(session, PlantNote, plant=plant, note=filename, category='<picture>')
                 if note is None:
-                    note = PlantNote(plant=plant, note=filename, category=u'<picture>', user=u'initial-import')
+                    note = PlantNote(plant=plant, note=filename, category='<picture>', user='initial-import')
                     session.add(note)
                     logger.log(13, 'picture %s added to plant %s' % (filename, complete_plant_code))
                 else:
@@ -412,6 +412,6 @@
         try:
             from bauble import gui
             gui.get_view().update()
-        except Exception, e:
+        except Exception as e:
             pass
         return True
--- ./bauble/plugins/garden/picture_importer_test.py	(original)
+++ ./bauble/plugins/garden/picture_importer_test.py	(refactored)
@@ -31,89 +31,89 @@
 
     def test_decode_parts_complete(self):
         result = decode_parts("2018.0020.1 (4) Epidendrum.jpg")
-        self.assertEquals(result, {'accession': '2018.0020',
+        self.assertEqual(result, {'accession': '2018.0020',
                                    'plant': '1',
                                    'seq': '4',
                                    'species': 'Epidendrum'})
         result = decode_parts("Masdevallia-2018.0020-2.jpg")
-        self.assertEquals(result, {'accession': '2018.0020',
+        self.assertEqual(result, {'accession': '2018.0020',
                                    'plant': '1',
                                    'seq': '2',
                                    'species': 'Masdevallia'})
         result = decode_parts("2007.0001 Annona muricata.jpg")
-        self.assertEquals(result, {'accession': '2007.0001',
+        self.assertEqual(result, {'accession': '2007.0001',
                                    'plant': '1',
                                    'seq': '1',
                                    'species': 'Annona muricata'})
 
     def test_decode_parts_none(self):
         result = decode_parts("20x18.0020.1 (4).jpg")
-        self.assertEquals(result, None)
+        self.assertEqual(result, None)
 
     def test_decode_parts_optional(self):
         result = decode_parts("2018.0020 (4) Dracula.jpg")
-        self.assertEquals(result, {'accession': '2018.0020',
+        self.assertEqual(result, {'accession': '2018.0020',
                                    'plant': '1',
                                    'seq': '4',
                                    'species': 'Dracula'})
         result = decode_parts("2018.0020.2 (4).jpg")
-        self.assertEquals(result, {'accession': '2018.0020',
+        self.assertEqual(result, {'accession': '2018.0020',
                                    'plant': '2',
                                    'seq': '4',
                                    'species': 'Zzz'})
         result = decode_parts("2018.0020 (4).jpg")
-        self.assertEquals(result, {'accession': '2018.0020',
+        self.assertEqual(result, {'accession': '2018.0020',
                                    'plant': '1',
                                    'seq': '4',
                                    'species': 'Zzz'})
 
     def test_decode_parts_seq_from_original(self):
         result = decode_parts("DSCN0123-2018.0020.JPG")
-        self.assertEquals(result, {'accession': '2018.0020',
+        self.assertEqual(result, {'accession': '2018.0020',
                                    'plant': '1',
                                    'seq': '123',
                                    'species': 'Zzz'})
         result = decode_parts("P1220810-2018.0020.JPG")
-        self.assertEquals(result, {'accession': '2018.0020',
+        self.assertEqual(result, {'accession': '2018.0020',
                                    'plant': '1',
                                    'seq': '1220810',
                                    'species': 'Zzz'})
         result = decode_parts("2018.0020 Vanda-P1220810.JPG")
-        self.assertEquals(result, {'accession': '2018.0020',
+        self.assertEqual(result, {'accession': '2018.0020',
                                    'plant': '1',
                                    'seq': '1220810',
                                    'species': 'Vanda'})
 
     def test_decode_parts_seq_from_original(self):
         result = decode_parts("DSCN0123-2018.0020.JPG")
-        self.assertEquals(result, {'accession': '2018.0020',
+        self.assertEqual(result, {'accession': '2018.0020',
                                    'plant': '1',
                                    'seq': '123',
                                    'species': 'Zzz'})
         result = decode_parts("P1220810-2018.0020.JPG")
-        self.assertEquals(result, {'accession': '2018.0020',
+        self.assertEqual(result, {'accession': '2018.0020',
                                    'plant': '1',
                                    'seq': '1220810',
                                    'species': 'Zzz'})
         result = decode_parts("2018.0020 Vanda-P1220810.JPG")
-        self.assertEquals(result, {'accession': '2018.0020',
+        self.assertEqual(result, {'accession': '2018.0020',
                                    'plant': '1',
                                    'seq': '1220810',
                                    'species': 'Vanda'})
 
     def test_decode_parts_custom_accession_format(self):
         result = decode_parts("2007.01.321 Annona muricata.jpg", '####.##.###')
-        self.assertEquals(result, {'accession': '2007.01.321',
+        self.assertEqual(result, {'accession': '2007.01.321',
                                    'plant': '1',
                                    'seq': '1',
                                    'species': 'Annona muricata'})
         result = decode_parts("2007.01.321.2 Annona sp.jpg", '####.##.###')
-        self.assertEquals(result, {'accession': '2007.01.321',
+        self.assertEqual(result, {'accession': '2007.01.321',
                                    'plant': '2',
                                    'seq': '1',
                                    'species': 'Annona sp'})
         result = decode_parts("2009.01.21.2 Opuntia ficus-indica.jpg", '####.##.##')
-        self.assertEquals(result, {'accession': '2009.01.21',
+        self.assertEqual(result, {'accession': '2009.01.21',
                                    'plant': '2',
                                    'seq': '1',
                                    'species': 'Opuntia ficus-indica'})
@@ -121,12 +121,12 @@
 
     def test_decode_parts_only_scan_name(self):
         result = decode_parts("Location/2018.0020.1 (4) Epidendrum.jpg")
-        self.assertEquals(result, {'accession': '2018.0020',
+        self.assertEqual(result, {'accession': '2018.0020',
                                    'plant': '1',
                                    'seq': '4',
                                    'species': 'Epidendrum'})
         result = decode_parts("Pictures/Masdevallia-2018.0020-2.jpg")
-        self.assertEquals(result, {'accession': '2018.0020',
+        self.assertEqual(result, {'accession': '2018.0020',
                                    'plant': '1',
                                    'seq': '2',
                                    'species': 'Masdevallia'})
--- ./bauble/plugins/garden/plant.py	(original)
+++ ./bauble/plugins/garden/plant.py	(refactored)
@@ -61,8 +61,8 @@
 # location combo that shows the description of the currently selected
 # location
 
-plant_delimiter_key = u'plant_delimiter'
-default_plant_delimiter = u'.'
+plant_delimiter_key = 'plant_delimiter'
+default_plant_delimiter = '.'
 
 
 def edit_callback(plants):
@@ -94,7 +94,7 @@
         session.delete(obj)
     try:
         session.commit()
-    except Exception, e:
+    except Exception as e:
         msg = _('Could not delete.\n\n%s') % utils.xml_safe(e)
 
         utils.message_details_dialog(msg, traceback.format_exc(),
@@ -137,7 +137,7 @@
     if codes:
         try:
             next = max([int(code[0]) for code in codes])+1
-        except Exception, e:
+        except Exception as e:
             logger.debug("%s(%s)" % (type(e).__name__, e))
             return None
     return utils.utf8(next)
@@ -153,7 +153,7 @@
     # if the range builder only creates one number then we assume the
     # code is not a range and so we test against the string version of
     # code
-    codes = map(utils.utf8, utils.range_builder(code))  # test if a range
+    codes = list(map(utils.utf8, utils.range_builder(code)))  # test if a range
     if len(codes) == 1:
         codes = [utils.utf8(code)]
 
@@ -196,10 +196,10 @@
         try:
             from bauble.plugins.garden import Accession
             query = session.query(Plant).filter(
-                Plant.code == unicode(plant_code)).join(Accession).filter(
-                utils.ilike(Accession.code, u'%%%s' % unicode(acc_code)))
+                Plant.code == str(plant_code)).join(Accession).filter(
+                utils.ilike(Accession.code, '%%%s' % str(acc_code)))
             return query.all()
-        except Exception, e:
+        except Exception as e:
             logger.debug("%s %s" % (e.__class__.name, e))
             return []
 
@@ -216,8 +216,8 @@
         acc_code, plant_code = keys['plant'].rsplit(
             Plant.get_delimiter(), 1)
         q = q.join(
-            Plant).filter(Plant.code == unicode(plant_code)).join(
-            Accession).filter(Accession.code == unicode(acc_code))
+            Plant).filter(Plant.code == str(plant_code)).join(
+            Accession).filter(Accession.code == str(acc_code))
     if 'date' in keys:
         q = q.filter(cls.date == keys['date'])
     if 'category' in keys:
@@ -235,8 +235,8 @@
         Plant.get_delimiter(), 1)
     logger.debug("acc-plant: %s-%s" % (acc_code, plant_code))
     q = session.query(Plant).filter(
-        Plant.code == unicode(plant_code)).join(
-        Accession).filter(Accession.code == unicode(acc_code))
+        Plant.code == str(plant_code)).join(
+        Accession).filter(Accession.code == str(acc_code))
     plant = q.one()
 
     result['plant'] = plant
@@ -247,26 +247,26 @@
 
 
 change_reasons = {
-    u'DEAD': _('Dead'),
-    u'DELE': _('Deleted, yr. dead. unknown'),
-    u'DNGM': _('Did not germinate'),
-    u'DISC': _('Discarded'),
-    u'DISW': _('Discarded, weedy'),
-    u'DISN': _('Discarded, seedling in nursery'),
-    u'DIST': _('Distributed elsewhere'),
-    u'ERRO': _('Error correction'),
-    u'GIVE': _('Given away (specify person)'),
-    u'HOSP': _('Hospitalised'),
-    u'LOST': _('Lost, whereabouts unknown'),
-    u'QUAR': _('Quarantined'),
-    u'STOL': _('Stolen'),
-    U'SUMK': _('Summer Kill'),
-    u'ASS#': _('Transferred to another acc.no.'),
-    u'TRAN': _('Transplanted to another area'),
-    u'VAND': _('Vandalised'),
-    u'WINK': _('Winter kill'),
-    u'WETH': _('Weather or natural event'),
-    u'OTHR': _('Other'),
+    'DEAD': _('Dead'),
+    'DELE': _('Deleted, yr. dead. unknown'),
+    'DNGM': _('Did not germinate'),
+    'DISC': _('Discarded'),
+    'DISW': _('Discarded, weedy'),
+    'DISN': _('Discarded, seedling in nursery'),
+    'DIST': _('Distributed elsewhere'),
+    'ERRO': _('Error correction'),
+    'GIVE': _('Given away (specify person)'),
+    'HOSP': _('Hospitalised'),
+    'LOST': _('Lost, whereabouts unknown'),
+    'QUAR': _('Quarantined'),
+    'STOL': _('Stolen'),
+    'SUMK': _('Summer Kill'),
+    'ASS#': _('Transferred to another acc.no.'),
+    'TRAN': _('Transplanted to another area'),
+    'VAND': _('Vandalised'),
+    'WINK': _('Winter kill'),
+    'WETH': _('Weather or natural event'),
+    'OTHR': _('Other'),
     None: ''
     }
 
@@ -292,7 +292,7 @@
     quantity = Column(Integer, autoincrement=False, nullable=False)
     note_id = Column(Integer, ForeignKey('plant_note.id'))
 
-    reason = Column(types.Enum(values=change_reasons.keys(),
+    reason = Column(types.Enum(values=list(change_reasons.keys()),
                                translations=change_reasons))
 
     # date of change
@@ -314,34 +314,34 @@
 
 
 condition_values = {
-    u'Excellent': _('Excellent'),
-    u'Good': _('Good'),
-    u'Fair': _('Fair'),
-    u'Poor': _('Poor'),
-    u'Questionable': _('Questionable'),
-    u'Indistinguishable': _('Indistinguishable Mass'),
-    u'UnableToLocate': _('Unable to Locate'),
-    u'Dead': _('Dead'),
+    'Excellent': _('Excellent'),
+    'Good': _('Good'),
+    'Fair': _('Fair'),
+    'Poor': _('Poor'),
+    'Questionable': _('Questionable'),
+    'Indistinguishable': _('Indistinguishable Mass'),
+    'UnableToLocate': _('Unable to Locate'),
+    'Dead': _('Dead'),
     None: ''}
 
 flowering_values = {
-    u'Immature': _('Immature'),
-    u'Flowering': _('Flowering'),
-    u'Old': _('Old Flowers'),
+    'Immature': _('Immature'),
+    'Flowering': _('Flowering'),
+    'Old': _('Old Flowers'),
     None: ''}
 
 fruiting_values = {
-    u'Unripe': _('Unripe'),
-    u'Ripe': _('Ripe'),
+    'Unripe': _('Unripe'),
+    'Ripe': _('Ripe'),
     None: '',
 }
 
 # TODO: should sex be recorded at the species, accession or plant
 # level or just as part of a check since sex can change in some species
 sex_values = {
-    u'Female': _('Female'),
-    u'Male': _('Male'),
-    u'Both': ''}
+    'Female': _('Female'),
+    'Male': _('Male'),
+    'Both': ''}
 
 # class Container(db.Base):
 #     __tablename__ = 'container'
@@ -359,32 +359,32 @@
     """
     __tablename__ = 'plant_status'
     date = Column(types.Date, default=func.now())
-    condition = Column(types.Enum(values=condition_values.keys(),
+    condition = Column(types.Enum(values=list(condition_values.keys()),
                                   translations=condition_values))
     comment = Column(UnicodeText)
     checked_by = Column(Unicode(64))
 
-    flowering_status = Column(types.Enum(values=flowering_values.keys(),
+    flowering_status = Column(types.Enum(values=list(flowering_values.keys()),
                                          translations=flowering_values))
-    fruiting_status = Column(types.Enum(values=fruiting_values.keys(),
+    fruiting_status = Column(types.Enum(values=list(fruiting_values.keys()),
                                         translations=fruiting_values))
 
     autumn_color_pct = Column(Integer, autoincrement=False)
     leaf_drop_pct = Column(Integer, autoincrement=False)
     leaf_emergence_pct = Column(Integer, autoincrement=False)
 
-    sex = Column(types.Enum(values=sex_values.keys(),
+    sex = Column(types.Enum(values=list(sex_values.keys()),
                             translations=sex_values))
 
     # TODO: needs container table
     #container_id = Column(Integer)
 
 
-acc_type_values = {u'Plant': _('Plant'),
-                   u'Seed': _('Seed/Spore'),
-                   u'Vegetative': _('Vegetative Part'),
-                   u'Tissue': _('Tissue Culture'),
-                   u'Other': _('Other'),
+acc_type_values = {'Plant': _('Plant'),
+                   'Seed': _('Seed/Spore'),
+                   'Vegetative': _('Vegetative Part'),
+                   'Tissue': _('Tissue Culture'),
+                   'Other': _('Other'),
                    None: ''}
 
 
@@ -442,7 +442,7 @@
             return None
         return value.strip()
 
-    acc_type = Column(types.Enum(values=acc_type_values.keys(),
+    acc_type = Column(types.Enum(values=list(acc_type_values.keys()),
                                  translations=acc_type_values),
                       default=None)
     memorial = Column(Boolean, default=False)
@@ -518,8 +518,7 @@
                 session.add(plant)
 
         ignore = ('id', 'code', 'changes', 'notes', 'propagations', '_created')
-        properties = filter(lambda p: p.key not in ignore,
-                            object_mapper(self).iterate_properties)
+        properties = [p for p in object_mapper(self).iterate_properties if p.key not in ignore]
         for prop in properties:
             setattr(plant, prop.key, getattr(self, prop.key))
         plant.code = code
@@ -601,7 +600,7 @@
             'The location of the planting in your collection.'),
         'plant_acc_type_combo': _('The type of the plant material.\n\n'
                                   'Possible values: %s') % (
-            ', '.join(acc_type_values.values())),
+            ', '.join(list(acc_type_values.values()))),
         'plant_loc_add_button': _('Create a new location.'),
         'plant_loc_edit_button': _('Edit the selected location.'),
         'prop_add_button': _(
@@ -679,7 +678,7 @@
 
         # set default values for acc_type
         if self.model.id is None and self.model.acc_type is None:
-            self.model.acc_type = u'Plant'
+            self.model.acc_type = 'Plant'
 
         notes_parent = self.view.widgets.notes_parent_box
         notes_parent.foreach(notes_parent.remove)
@@ -740,7 +739,7 @@
         # been filled in
         def acc_get_completions(text):
             query = self.session.query(Accession)
-            return query.filter(Accession.code.like(unicode('%s%%' % text))).\
+            return query.filter(Accession.code.like(str('%s%%' % text))).\
                 order_by(Accession.code)
 
         def on_select(value):
@@ -802,7 +801,7 @@
         value = entry.props.text
         try:
             value = int(value)
-        except ValueError, e:
+        except ValueError as e:
             logger.debug("%s(%s)" % (type(e).__name__, e))
             value = None
         self.set_model_attr('quantity', value)
@@ -825,7 +824,7 @@
         Validates the accession number and the plant code from the editors.
         """
         text = utils.utf8(entry.get_text())
-        if text == u'':
+        if text == '':
             self.set_model_attr('code', None)
         else:
             self.set_model_attr('code', utils.utf8(text))
@@ -862,7 +861,7 @@
                           self.model.quantity is not None,
                           self.is_dirty(),
                           len(self.problems) == 0))
-        except OperationalError, e:
+        except OperationalError as e:
             logger.debug('(%s)%s' % (type(e), e))
             return
         logger.debug(self.problems)
@@ -914,7 +913,7 @@
         self.initializing = initializing
         if prefs.testing:
             return
-        for widget, field in self.widget_to_field_map.iteritems():
+        for widget, field in self.widget_to_field_map.items():
             value = getattr(self.model, field)
             self.view.widget_set_value(widget, value)
             logger.debug('%s: %s = %s' % (widget, field, value))
@@ -931,7 +930,7 @@
     def cleanup(self):
         super(PlantEditorPresenter, self).cleanup()
         msg_box_parent = self.view.widgets.message_box_parent
-        map(msg_box_parent.remove, msg_box_parent.get_children())
+        list(map(msg_box_parent.remove, msg_box_parent.get_children()))
         # the entry is made not editable for branch mode
         self.view.widgets.plant_acc_entry.props.editable = True
         self.view.get_window().props.title = _('Plant Editor')
@@ -1081,7 +1080,7 @@
                     setattr(new_note, prop.key, getattr(note, prop.key))
                 new_note.plant = new_plant
         try:
-            map(self.session.expunge, self.model.notes)
+            list(map(self.session.expunge, self.model.notes))
             self.session.expunge(self.model)
             super(PlantEditor, self).commit_changes()
         except:
@@ -1097,14 +1096,14 @@
                     # commit_changes() will append the commited plants
                     # to self._committed
                     self.commit_changes()
-            except DBAPIError, e:
+            except DBAPIError as e:
                 exc = traceback.format_exc()
                 logger.debug(exc)
                 msg = _('Error committing changes.\n\n%s') % e.orig
                 utils.message_details_dialog(msg, str(e), Gtk.MessageType.ERROR)
                 self.session.rollback()
                 return False
-            except Exception, e:
+            except Exception as e:
                 msg = _('Unknown error when committing changes. See the '
                         'details for more information.\n\n%s') \
                     % utils.xml_safe(e)
@@ -1165,7 +1164,7 @@
             self.presenter.view.get_window().props.title += \
                 utils.utf8(' - %s' % _('Split Mode'))
             message_box_parent = self.presenter.view.widgets.message_box_parent
-            map(message_box_parent.remove, message_box_parent.get_children())
+            list(map(message_box_parent.remove, message_box_parent.get_children()))
             msg = _('Splitting from %(plant_code)s.  The quantity will '
                     'be subtracted from %(plant_code)s') \
                 % {'plant_code': str(self.branched_plant)}
@@ -1228,10 +1227,10 @@
         head, tail = plant_code[:len(acc_code)], plant_code[len(acc_code):]
 
         self.widget_set_value('acc_code_data', '<big>%s</big>' %
-                              utils.xml_safe(unicode(head)),
+                              utils.xml_safe(str(head)),
                               markup=True)
         self.widget_set_value('plant_code_data', '<big>%s</big>' %
-                              utils.xml_safe(unicode(tail)), markup=True)
+                              utils.xml_safe(str(tail)), markup=True)
         self.widget_set_value('name_data',
                               row.accession.species_str(markup=True),
                               markup=True)
@@ -1471,8 +1470,7 @@
         self.transfers.update(row)
         self.propagations.update(row)
 
-        urls = filter(lambda x: x != [],
-                      [utils.get_urls(note.note) for note in row.notes])
+        urls = [x for x in [utils.get_urls(note.note) for note in row.notes] if x != []]
         if not urls:
             self.links.props.visible = False
             self.links._sep.props.visible = False
--- ./bauble/plugins/garden/pocket_server.py	(original)
+++ ./bauble/plugins/garden/pocket_server.py	(refactored)
@@ -19,8 +19,8 @@
 # implements the xmlrcp server for the p2d and d2p streams
 #
 
-from __future__ import print_function
-from __future__ import unicode_literals
+
+
 
 import logging
 logger = logging.getLogger(__name__)
@@ -67,8 +67,8 @@
 
 
 from threading import Thread
-from SimpleXMLRPCServer import SimpleXMLRPCServer
-from SimpleXMLRPCServer import SimpleXMLRPCRequestHandler
+from xmlrpc.server import SimpleXMLRPCServer
+from xmlrpc.server import SimpleXMLRPCRequestHandler
 
 
 class RequestHandler(SimpleXMLRPCRequestHandler):
@@ -254,7 +254,7 @@
         if row is None:
             row = meta.BaubleMeta(name='pocket-clients')
             self.session.add(row)
-        row.value = unicode(dict((i[1], i[2]) for i in self.clients_ls))
+        row.value = str(dict((i[1], i[2]) for i in self.clients_ls))
         self.session.commit()
 
     def treeview_changed(self, widget, event, data=None):
--- ./bauble/plugins/garden/propagation.py	(original)
+++ ./bauble/plugins/garden/propagation.py	(refactored)
@@ -44,14 +44,14 @@
 import bauble.btypes as types
 
 
-prop_type_values = {u'Seed': _("Seed"),
-                    u'UnrootedCutting': _('Unrooted cutting'),
-                    u'Other': _('Other')}
+prop_type_values = {'Seed': _("Seed"),
+                    'UnrootedCutting': _('Unrooted cutting'),
+                    'Other': _('Other')}
 
 prop_type_results = {
-    u'Seed': u'SEDL',
-    u'UnrootedCutting': u'RCUT',
-    u'Other': u'UNKN',
+    'Seed': 'SEDL',
+    'UnrootedCutting': 'RCUT',
+    'Other': 'UNKN',
 }
 
 
@@ -74,7 +74,7 @@
     Propagation
     """
     __tablename__ = 'propagation'
-    prop_type = Column(types.Enum(values=prop_type_values.keys(),
+    prop_type = Column(types.Enum(values=list(prop_type_values.keys()),
                                   translations=prop_type_values),
                        nullable=False)
     notes = Column(UnicodeText)
@@ -111,11 +111,11 @@
         """
         quantity = None
         incomplete = True
-        if self.prop_type == u'UnrootedCutting':
+        if self.prop_type == 'UnrootedCutting':
             incomplete = self._cutting is None  # cutting without fields
             if not incomplete:
                 quantity = self._cutting.rooted_pct
-        elif self.prop_type == u'Seed':
+        elif self.prop_type == 'Seed':
             incomplete = self._seed is None  # seed without fields
             if not incomplete:
                 quantity = self._seed.nseedlings
@@ -156,7 +156,7 @@
         if partial == 1:
             return ';'.join(accession_codes)
 
-        if self.prop_type == u'UnrootedCutting':
+        if self.prop_type == 'UnrootedCutting':
             c = self._cutting
             values.append(_('Cutting'))
             if c.cutting_type is not None:
@@ -170,7 +170,7 @@
                 values.append(_('Tip') + ': %s' % tip_values[c.tip])
             if c.leaves:
                 s = _('Leaves') + ': %s' % leaves_values[c.leaves]
-                if c.leaves == u'Removed' and c.leaves_reduced_pct:
+                if c.leaves == 'Removed' and c.leaves_reduced_pct:
                     s.append('(%s%%)' % c.leaves_reduced_pct)
                 values.append(s)
             if c.flower_buds:
@@ -198,7 +198,7 @@
 
             if c.rooted_pct:
                 values.append(_('Rooted: %s%%') % c.rooted_pct)
-        elif self.prop_type == u'Seed':
+        elif self.prop_type == 'Seed':
             seed = self._seed
             values.append(_('Seed'))
             if seed.pretreatment:
@@ -237,14 +237,14 @@
         return s
 
     def clean(self):
-        if self.prop_type == u'UnrootedCutting':
+        if self.prop_type == 'UnrootedCutting':
             utils.delete_or_expunge(self._seed)
             self._seed = None
             if not self._cutting.bottom_heat_temp:
                 self._cutting.bottom_heat_unit = None
             if not self._cutting.length:
                 self._cutting.length_unit = None
-        elif self.prop_type == u'Seed':
+        elif self.prop_type == 'Seed':
             utils.delete_or_expunge(self._cutting)
             self._cutting = None
         else:
@@ -266,41 +266,41 @@
     cutting_id = Column(Integer, ForeignKey('prop_cutting.id'), nullable=False)
 
 
-cutting_type_values = {u'Nodal': _('Nodal'),
-                       u'InterNodal': _('Internodal'),
-                       u'Other': _('Other')}
-
-tip_values = {u'Intact': _('Intact'),
-              u'Removed': _('Removed'),
-              u'None': _('None'),
+cutting_type_values = {'Nodal': _('Nodal'),
+                       'InterNodal': _('Internodal'),
+                       'Other': _('Other')}
+
+tip_values = {'Intact': _('Intact'),
+              'Removed': _('Removed'),
+              'None': _('None'),
               None: ''}
 
-leaves_values = {u'Intact': _('Intact'),
-                 u'Removed': _('Removed'),
-                 u'None': _('None'),
+leaves_values = {'Intact': _('Intact'),
+                 'Removed': _('Removed'),
+                 'None': _('None'),
                  None: ''}
 
-flower_buds_values = {u'Removed': _('Removed'),
-                      u'None': _('None'),
+flower_buds_values = {'Removed': _('Removed'),
+                      'None': _('None'),
                       None: ''}
 
-wound_values = {u'No': _('No'),
-                u'Single': _('Singled'),
-                u'Double': _('Double'),
-                u'Slice': _('Slice'),
+wound_values = {'No': _('No'),
+                'Single': _('Singled'),
+                'Double': _('Double'),
+                'Slice': _('Slice'),
                 None: ''}
 
-hormone_values = {u'Liquid': _('Liquid'),
-                  u'Powder': _('Powder'),
-                  u'No': _('No')}
-
-bottom_heat_unit_values = {u'F': _('\302\260F'),
-                           u'C': _('\302\260C'),
+hormone_values = {'Liquid': _('Liquid'),
+                  'Powder': _('Powder'),
+                  'No': _('No')}
+
+bottom_heat_unit_values = {'F': _('\302\260F'),
+                           'C': _('\302\260C'),
                            None: ''}
 
-length_unit_values = {u'mm': _('mm'),
-                      u'cm': _('cm'),
-                      u'in': _('in'),
+length_unit_values = {'mm': _('mm'),
+                      'cm': _('cm'),
+                      'in': _('in'),
                       None: ''}
 
 
@@ -309,24 +309,24 @@
     A cutting
     """
     __tablename__ = 'prop_cutting'
-    cutting_type = Column(types.Enum(values=cutting_type_values.keys(),
+    cutting_type = Column(types.Enum(values=list(cutting_type_values.keys()),
                                      translations=cutting_type_values),
-                          default=u'Other')
-    tip = Column(types.Enum(values=tip_values.keys(),
+                          default='Other')
+    tip = Column(types.Enum(values=list(tip_values.keys()),
                             translations=tip_values))
-    leaves = Column(types.Enum(values=leaves_values.keys(),
+    leaves = Column(types.Enum(values=list(leaves_values.keys()),
                                translations=leaves_values))
     leaves_reduced_pct = Column(Integer, autoincrement=False)
     length = Column(Integer, autoincrement=False)
-    length_unit = Column(types.Enum(values=length_unit_values.keys(),
+    length_unit = Column(types.Enum(values=list(length_unit_values.keys()),
                                     translations=length_unit_values))
 
     # single/double/slice
-    wound = Column(types.Enum(values=wound_values.keys(),
+    wound = Column(types.Enum(values=list(wound_values.keys()),
                               translations=wound_values))
 
     # removed/None
-    flower_buds = Column(types.Enum(values=flower_buds_values.keys(),
+    flower_buds = Column(types.Enum(values=list(flower_buds_values.keys()),
                                     translations=flower_buds_values))
 
     fungicide = Column(UnicodeText)  # fungal soak
@@ -344,7 +344,7 @@
     # not null
 
     # F/C
-    bottom_heat_unit = Column(types.Enum(values=bottom_heat_unit_values.keys(),
+    bottom_heat_unit = Column(types.Enum(values=list(bottom_heat_unit_values.keys()),
                                          translations=bottom_heat_unit_values),
                               nullable=True)
     rooted_pct = Column(Integer, autoincrement=False)
@@ -628,12 +628,12 @@
 
         # set default units
         units = prefs.prefs[prefs.units_pref]
-        if units == u'imperial':
-            self.model.length_unit = u'in'
-            self.model.bottom_heat_unit = u'F'
+        if units == 'imperial':
+            self.model.length_unit = 'in'
+            self.model.bottom_heat_unit = 'F'
         else:
-            self.model.length_unit = u'mm'
-            self.model.bottom_heat_unit = u'C'
+            self.model.length_unit = 'mm'
+            self.model.bottom_heat_unit = 'C'
 
         # the liststore for rooted cuttings contains PropCuttingRooted
         # objects, not just their fields, so we cannot define it in the
@@ -739,7 +739,7 @@
 
     def refresh_view(self):
         # TODO: not so sure. is this a 'refresh', or a 'init' view?
-        for widget, attr in self.widget_to_field_map.iteritems():
+        for widget, attr in self.widget_to_field_map.items():
             value = getattr(self.model, attr)
             self.view.widget_set_value(widget, value)
         rooted_liststore = self.view.widgets.rooted_treeview.get_model()
@@ -835,7 +835,7 @@
 
     def refresh_view(self):
         date_format = prefs.prefs[prefs.date_format_pref]
-        for widget, attr in self.widget_to_field_map.iteritems():
+        for widget, attr in self.widget_to_field_map.items():
             value = getattr(self.model, attr)
             if isinstance(value, datetime.date):
                 value = value.strftime(date_format)
@@ -893,7 +893,7 @@
                                    editor.UnicodeOrNoneValidator())
 
         def on_expanded(*args):
-            if self.model.prop_type == u'Other':
+            if self.model.prop_type == 'Other':
                 # i don't really understand why setting the expanded
                 # property to false here cause the notes_expander to
                 # always stay expanded but it works
@@ -907,14 +907,14 @@
             # only call set_model_attr() if the value is changed to
             # avoid prematuraly calling dirty() and refresh_sensitivity()
             self.set_model_attr('prop_type', prop_type)
-        prop_box_map = {u'Seed': self.view.widgets.seed_box,
-                        u'UnrootedCutting': self.view.widgets.cutting_box,
+        prop_box_map = {'Seed': self.view.widgets.seed_box,
+                        'UnrootedCutting': self.view.widgets.cutting_box,
                         }
-        for type_, box in prop_box_map.iteritems():
+        for type_, box in prop_box_map.items():
             box.props.visible = (prop_type == type_)
 
         self.view.widgets.notes_box.props.visible = True
-        if prop_type == u'Other' or self.model.notes:
+        if prop_type == 'Other' or self.model.notes:
             self.view.widgets.notes_expander.props.expanded = True
 
         self.view.widgets.prop_details_box.props.visible = True
@@ -923,9 +923,9 @@
             self.view.widgets.prop_date_entry.emit('changed')
 
     def is_dirty(self):
-        if self.model.prop_type == u'UnrootedCutting':
+        if self.model.prop_type == 'UnrootedCutting':
             return self._cutting_presenter.is_dirty() or self._dirty
-        elif self.model.prop_type == u'Seed':
+        elif self.model.prop_type == 'Seed':
             return self._seed_presenter.is_dirty() or self._dirty
         else:
             return self._dirty
@@ -1050,9 +1050,9 @@
 
         model = None
         if object_session(self.model):
-            if self.model.prop_type == u'UnrootedCutting':
+            if self.model.prop_type == 'UnrootedCutting':
                 model = self.model._cutting
-            elif self.model.prop_type == u'Seed':
+            elif self.model.prop_type == 'Seed':
                 model = self.model._seed
 
         if model:
@@ -1115,13 +1115,13 @@
                 self._return = self.model
                 if self.presenter.is_dirty() and commit:
                     self.commit_changes()
-            except DBAPIError, e:
+            except DBAPIError as e:
                 msg = _('Error committing changes.\n\n%s') % \
-                    utils.xml_safe(unicode(e.orig))
+                    utils.xml_safe(str(e.orig))
                 utils.message_details_dialog(msg, str(e), Gtk.MessageType.ERROR)
                 self.session.rollback()
                 return False
-            except Exception, e:
+            except Exception as e:
                 msg = _('Unknown error when committing changes. See the '
                         'details for more information.\n\n%s') %\
                     utils.xml_safe(e)
--- ./bauble/plugins/garden/source.py	(original)
+++ ./bauble/plugins/garden/source.py	(refactored)
@@ -121,18 +121,18 @@
         backref=backref('used_source', uselist=True))
 
 
-source_type_values = [(u'Expedition', _('Expedition')),
-                      (u'GeneBank', _('Gene Bank')),
-                      (u'BG', _('Botanic Garden or Arboretum')),
-                      (u'Research/FieldStation', _('Research/Field Station')),
-                      (u'Staff', _('Staff member')),
-                      (u'UniversityDepartment', _('University Department')),
-                      (u'Club', _('Horticultural Association/Garden Club')),
-                      (u'MunicipalDepartment', _('Municipal department')),
-                      (u'Commercial', _('Nursery/Commercial')),
-                      (u'Individual', _('Individual')),
-                      (u'Other', _('Other')),
-                      (u'Unknown', _('Unknown')),
+source_type_values = [('Expedition', _('Expedition')),
+                      ('GeneBank', _('Gene Bank')),
+                      ('BG', _('Botanic Garden or Arboretum')),
+                      ('Research/FieldStation', _('Research/Field Station')),
+                      ('Staff', _('Staff member')),
+                      ('UniversityDepartment', _('University Department')),
+                      ('Club', _('Horticultural Association/Garden Club')),
+                      ('MunicipalDepartment', _('Municipal department')),
+                      ('Commercial', _('Nursery/Commercial')),
+                      ('Individual', _('Individual')),
+                      ('Other', _('Other')),
+                      ('Unknown', _('Unknown')),
                       (None, '')]
 
 
@@ -355,7 +355,7 @@
         super(CollectionPresenter, self).set_model_attr(
             field, value, validator)
         self._dirty = True
-        if self.model.locale is None or self.model.locale in ('', u''):
+        if self.model.locale is None or self.model.locale in ('', ''):
             self.add_problem(self.PROBLEM_INVALID_LOCALE)
         else:
             self.remove_problem(self.PROBLEM_INVALID_LOCALE)
@@ -381,7 +381,7 @@
     def refresh_view(self):
         from bauble.plugins.garden.accession import latitude_to_dms, \
             longitude_to_dms
-        for widget, field in self.widget_to_field_map.iteritems():
+        for widget, field in self.widget_to_field_map.items():
             value = getattr(self.model, field)
             logger.debug('%s, %s, %s' % (widget, field, value))
             if value is not None and field == 'date':
@@ -391,7 +391,7 @@
 
         latitude = self.model.latitude
         if latitude is not None:
-            dms_string = u'%s %s\u00B0%s\'%s"' % latitude_to_dms(latitude)
+            dms_string = '%s %s\u00B0%s\'%s"' % latitude_to_dms(latitude)
             self.view.widgets.lat_dms_label.set_text(dms_string)
             if float(latitude) < 0:
                 self.view.widgets.south_radio.set_active(True)
@@ -403,7 +403,7 @@
 
         longitude = self.model.longitude
         if longitude is not None:
-            dms_string = u'%s %s\u00B0%s\'%s"' % longitude_to_dms(longitude)
+            dms_string = '%s %s\u00B0%s\'%s"' % longitude_to_dms(longitude)
             self.view.widgets.lon_dms_label.set_text(dms_string)
             if float(longitude) < 0:
                 self.view.widgets.west_radio.set_active(True)
@@ -426,7 +426,7 @@
         PROBLEM = 'INVALID_DATE'
         try:
             value = editor.DateValidator().to_python(entry.props.text)
-        except ValidatorError, e:
+        except ValidatorError as e:
             logger.debug("%s(%s)" % (type(e).__name__, e))
             self.parent_ref().add_problem(PROBLEM, entry)
         else:
@@ -444,7 +444,7 @@
             # make sure that the first part of the string is an
             # integer before toggling
             int(lon_text.split(' ')[0])
-        except Exception, e:
+        except Exception as e:
             logger.warn("east-west %s(%s)" % (type(e), e))
             return
 
@@ -464,7 +464,7 @@
             # make sure that the first part of the string is an
             # integer before toggling
             int(lat_text.split(' ')[0])
-        except Exception, e:
+        except Exception as e:
             logger.debug("%s(%s)" % (type(e).__name__, e))
             return
 
@@ -489,10 +489,10 @@
             if dec > 0 and direction in ('W', 'S'):
                 dec = -dec
         elif len(parts) == 2:
-            deg, min = map(Decimal, parts)
+            deg, min = list(map(Decimal, parts))
             dec = dms_to_decimal(direction, deg, min, 0)
         elif len(parts) == 3:
-            dec = dms_to_decimal(direction, *map(Decimal, parts))
+            dec = dms_to_decimal(direction, *list(map(Decimal, parts)))
         else:
             raise ValueError(_('_parse_lat_lon() -- incorrect format: %s') %
                              text)
@@ -538,7 +538,7 @@
                 direction = self._get_lat_direction()
                 latitude = CollectionPresenter._parse_lat_lon(direction, text)
                 #u"\N{DEGREE SIGN}"
-                dms_string = u'%s %s\u00B0%s\'%s"' % latitude_to_dms(latitude)
+                dms_string = '%s %s\u00B0%s\'%s"' % latitude_to_dms(latitude)
         except Exception:
             logger.debug(traceback.format_exc())
             #bg_color = Gdk.color_parse("red")
@@ -570,7 +570,7 @@
                 east_radio.handler_unblock(self.east_toggle_signal_id)
                 direction = self._get_lon_direction()
                 longitude = CollectionPresenter._parse_lat_lon(direction, text)
-                dms_string = u'%s %s\u00B0%s\'%s"' % longitude_to_dms(
+                dms_string = '%s %s\u00B0%s\'%s"' % longitude_to_dms(
                     longitude)
         except Exception:
             logger.debug(traceback.format_exc())
@@ -660,7 +660,7 @@
             query = self.session.query(Plant).\
                     filter(Plant.propagations.any()).\
                     join('accession').\
-                    filter(utils.ilike(Accession.code, u'%s%%' % text)).\
+                    filter(utils.ilike(Accession.code, '%s%%' % text)).\
                     filter(Accession.id != self.model.accession.id).\
                     order_by(Accession.code, Plant.code)
             result = []
@@ -772,7 +772,7 @@
         obj = session.query(Contact).get(detail.id)
         session.delete(obj)
         session.commit()
-    except Exception, e:
+    except Exception as e:
         msg = _('Could not delete.\n\n%s') % utils.xml_safe(e)
         utils.message_details_dialog(msg, traceback.format_exc(),
                                      type=Gtk.MessageType.ERROR)
--- ./bauble/plugins/garden/test.py	(original)
+++ ./bauble/plugins/garden/test.py	(refactored)
@@ -61,62 +61,62 @@
 prefs.testing = True
 
 
-accession_test_data = ({'id': 1, 'code': u'2001.1', 'species_id': 1},
-                       {'id': 2, 'code': u'2001.2', 'species_id': 2,
-                        'source_type': u'Collection'},
+accession_test_data = ({'id': 1, 'code': '2001.1', 'species_id': 1},
+                       {'id': 2, 'code': '2001.2', 'species_id': 2,
+                        'source_type': 'Collection'},
                        )
 
-plant_test_data = ({'id': 1, 'code': u'1', 'accession_id': 1,
+plant_test_data = ({'id': 1, 'code': '1', 'accession_id': 1,
                     'location_id': 1, 'quantity': 1},
-                   {'id': 2, 'code': u'1', 'accession_id': 2,
+                   {'id': 2, 'code': '1', 'accession_id': 2,
                     'location_id': 1, 'quantity': 1},
-                   {'id': 3, 'code': u'2', 'accession_id': 2,
+                   {'id': 3, 'code': '2', 'accession_id': 2,
                     'location_id': 1, 'quantity': 1},
                    )
 
-location_test_data = ({'id': 1, 'name': u'Somewhere Over The Rainbow',
-                       'code': u'RBW'},
+location_test_data = ({'id': 1, 'name': 'Somewhere Over The Rainbow',
+                       'code': 'RBW'},
                       )
 
-geography_test_data = [{'id': 1, 'name': u'Somewhere'}]
-
-collection_test_data = ({'id': 1, 'accession_id': 2, 'locale': u'Somewhere',
+geography_test_data = [{'id': 1, 'name': 'Somewhere'}]
+
+collection_test_data = ({'id': 1, 'accession_id': 2, 'locale': 'Somewhere',
                          'geography_id': 1},
                         )
 
 default_propagation_values = \
-    {'notes': u'test notes',
+    {'notes': 'test notes',
      'date': datetime.date(2011, 11, 25)}
 
 default_cutting_values = \
-    {'cutting_type': u'Nodal',
+    {'cutting_type': 'Nodal',
      'length': 2,
-     'length_unit': u'mm',
-     'tip': u'Intact',
-     'leaves': u'Intact',
+     'length_unit': 'mm',
+     'tip': 'Intact',
+     'leaves': 'Intact',
      'leaves_reduced_pct': 25,
-     'flower_buds': u'None',
-     'wound': u'Single',
-     'fungicide': u'Physan',
-     'media': u'standard mix',
-     'container': u'4" pot',
-     'hormone': u'Auxin powder',
-     'cover': u'Poly cover',
-     'location': u'Mist frame',
+     'flower_buds': 'None',
+     'wound': 'Single',
+     'fungicide': 'Physan',
+     'media': 'standard mix',
+     'container': '4" pot',
+     'hormone': 'Auxin powder',
+     'cover': 'Poly cover',
+     'location': 'Mist frame',
      'bottom_heat_temp': 65,
-     'bottom_heat_unit': u'F',
+     'bottom_heat_unit': 'F',
      'rooted_pct': 90}
 
 default_seed_values = {
-    'pretreatment': u'Soaked in peroxide solution',
+    'pretreatment': 'Soaked in peroxide solution',
     'nseeds': 24,
     'date_sown': datetime.date(2017, 1, 1),
-    'container': u"tray",
-    'media': u'standard seed compost',
-    'location': u'mist tent',
-    'moved_from': u'mist tent',
-    'moved_to': u'hardening table',
-    'media': u'standard mix',
+    'container': "tray",
+    'media': 'standard seed compost',
+    'location': 'mist tent',
+    'moved_from': 'mist tent',
+    'moved_to': 'hardening table',
+    'media': 'standard mix',
     'germ_date': datetime.date(2017, 2, 1),
     'germ_pct': 99,
     'nseedlings': 23,
@@ -144,11 +144,11 @@
         for col in table.c:
             utils.reset_sequence(col)
     i = Institution()
-    i.name = u'TestInstitution'
-    i.technical_contact = u'TestTechnicalContact Name'
-    i.email = u'contact@test.com'
-    i.contact = u'TestContact Name'
-    i.code = u'TestCode'
+    i.name = 'TestInstitution'
+    i.technical_contact = 'TestTechnicalContact Name'
+    i.email = 'contact@test.com'
+    i.contact = 'TestContact Name'
+    i.code = 'TestCode'
 
 
 # TODO: if we ever get a GUI tester then do the following
@@ -182,10 +182,10 @@
     def setUp(self):
         super(GardenTestCase, self).setUp()
         plants_test.setUp_data()
-        self.family = Family(family=u'Cactaceae')
-        self.genus = Genus(family=self.family, genus=u'Echinocactus')
-        self.species = Species(genus=self.genus, sp=u'grusonii')
-        self.sp2 = Species(genus=self.genus, sp=u'texelensis')
+        self.family = Family(family='Cactaceae')
+        self.genus = Genus(family=self.family, genus='Echinocactus')
+        self.species = Species(genus=self.genus, sp='grusonii')
+        self.sp2 = Species(genus=self.genus, sp='texelensis')
         self.session.add_all([self.family, self.genus, self.species, self.sp2])
         self.session.commit()
 
@@ -206,10 +206,10 @@
     def setUp(self):
         super(PlantTests, self).setUp()
         self.accession = self.create(Accession,
-                                     species=self.species, code=u'1')
-        self.location = self.create(Location, name=u'site', code=u'STE')
+                                     species=self.species, code='1')
+        self.location = self.create(Location, name='site', code='STE')
         self.plant = self.create(Plant, accession=self.accession,
-                                 location=self.location, code=u'1', quantity=1)
+                                 location=self.location, code='1', quantity=1)
         self.session.commit()
 
     def tearDown(self):
@@ -240,36 +240,36 @@
         """
         Test Plant.duplicate()
         """
-        p = Plant(accession=self.accession, location=self.location, code=u'2',
+        p = Plant(accession=self.accession, location=self.location, code='2',
                   quantity=52)
         self.session.add(p)
-        note = PlantNote(note=u'some note')
+        note = PlantNote(note='some note')
         note.plant = p
         note.date = datetime.date.today()
         change = PlantChange(from_location=self.location,
                              to_location=self.location, quantity=1)
         change.plant = p
         self.session.commit()
-        dup = p.duplicate(code=u'3')
+        dup = p.duplicate(code='3')
         assert dup.notes is not []
         assert dup.changes is not []
         self.session.commit()
 
     def test_search_view_markup_pair(self):
         # living plant
-        p = Plant(accession=self.accession, location=self.location, code=u'2',
+        p = Plant(accession=self.accession, location=self.location, code='2',
                   quantity=52)
         self.session.add(p)
-        self.assertEquals(p.search_view_markup_pair(),
-                          (u'1.2 <span foreground="#555555" size="small" weight="light">- 52 alive in (STE) site</span>',
-                           u'<i>Echinocactus</i> <i>grusonii</i>'))
+        self.assertEqual(p.search_view_markup_pair(),
+                          ('1.2 <span foreground="#555555" size="small" weight="light">- 52 alive in (STE) site</span>',
+                           '<i>Echinocactus</i> <i>grusonii</i>'))
         # dead plant
-        p = Plant(accession=self.accession, location=self.location, code=u'2',
+        p = Plant(accession=self.accession, location=self.location, code='2',
                   quantity=0)
         self.session.add(p)
-        self.assertEquals(p.search_view_markup_pair(),
-                          (u'<span foreground="#9900ff">1.2</span>',
-                           u'<i>Echinocactus</i> <i>grusonii</i>'))
+        self.assertEqual(p.search_view_markup_pair(),
+                          ('<span foreground="#9900ff">1.2</span>',
+                           '<i>Echinocactus</i> <i>grusonii</i>'))
 
     def test_bulk_plant_editor(self):
         """
@@ -279,7 +279,7 @@
 
         # use our own plant because PlantEditor.commit_changes() will
         # only work in bulk mode when the plant is in session.new
-        p = Plant(accession=self.accession, location=self.location, code=u'2',
+        p = Plant(accession=self.accession, location=self.location, code='2',
                   quantity=52)
         self.editor = PlantEditor(model=p)
         #editor.start()
@@ -290,17 +290,17 @@
             q = self.session.query(Plant).join('accession').\
                 filter(and_(Accession.id == self.plant.accession.id,
                             Plant.code == utils.utf8(code)))
-            self.assert_(not q.first(), 'code already exists')
+            self.assertTrue(not q.first(), 'code already exists')
 
         widgets = self.editor.presenter.view.widgets
         # make sure the entry gets a Problem added to it if an
         # existing plant code is used in bulk mode
         widgets.plant_code_entry.set_text('1,' + rng)
-        widgets.plant_quantity_entry.set_text(u'2')
+        widgets.plant_quantity_entry.set_text('2')
         update_gui()
         problem = (self.editor.presenter.PROBLEM_DUPLICATE_PLANT_CODE,
                    self.editor.presenter.view.widgets.plant_code_entry)
-        self.assert_(problem in self.editor.presenter.problems,
+        self.assertTrue(problem in self.editor.presenter.problems,
                      'no problem added for duplicate plant code')
 
         # create multiple plant codes
@@ -312,7 +312,7 @@
             q = self.session.query(Plant).join('accession').\
                 filter(and_(Accession.id == self.plant.accession.id,
                             Plant.code == utils.utf8(code)))
-            self.assert_(q.first(), 'plant %s.%s not created' %
+            self.assertTrue(q.first(), 'plant %s.%s not created' %
                          (self.accession, code))
 
     def test_editor(self):
@@ -327,9 +327,9 @@
         self.session.commit()
 
         #editor = PlantEditor(model=self.plant)
-        loc = Location(name=u'site1', code=u'1')
-        loc2 = Location(name=u'site2', code=u'2')
-        loc2a = Location(name=u'site2a', code=u'2a')
+        loc = Location(name='site1', code='1')
+        loc2 = Location(name='site2', code='2')
+        loc2a = Location(name='site2a', code='2a')
         self.session.add_all([loc, loc2, loc2a])
         self.session.commit()
         p = Plant(accession=self.accession, location=loc, quantity=1)
@@ -337,30 +337,30 @@
         editor.start()
 
     def test_double_change(self):
-        plant = Plant(accession=self.accession, code=u'11', location=self.location, quantity=10)
-        loc2a = Location(name=u'site2a', code=u'2a')
+        plant = Plant(accession=self.accession, code='11', location=self.location, quantity=10)
+        loc2a = Location(name='site2a', code='2a')
         self.session.add_all([plant, loc2a])
         self.session.flush()
         editor = PlantEditor(model=plant, branch_mode=True)
-        loc2a = object_session(editor.branched_plant).query(Location).filter(Location.code == u'2a').one()
+        loc2a = object_session(editor.branched_plant).query(Location).filter(Location.code == '2a').one()
         editor.branched_plant.location = loc2a
         update_gui()
         editor.model.quantity = 3
         editor.compute_plant_split_changes()
 
-        self.assertEquals(editor.branched_plant.quantity, 7)
+        self.assertEqual(editor.branched_plant.quantity, 7)
         change = editor.branched_plant.changes[0]
-        self.assertEquals(change.plant, editor.branched_plant)
-        self.assertEquals(change.quantity, editor.model.quantity)
-        self.assertEquals(change.to_location, editor.model.location)
-        self.assertEquals(change.from_location, editor.branched_plant.location)
-
-        self.assertEquals(editor.model.quantity, 3)
+        self.assertEqual(change.plant, editor.branched_plant)
+        self.assertEqual(change.quantity, editor.model.quantity)
+        self.assertEqual(change.to_location, editor.model.location)
+        self.assertEqual(change.from_location, editor.branched_plant.location)
+
+        self.assertEqual(editor.model.quantity, 3)
         change = editor.model.changes[0]
-        self.assertEquals(change.plant, editor.model)
-        self.assertEquals(change.quantity, editor.model.quantity)
-        self.assertEquals(change.to_location, editor.model.location)
-        self.assertEquals(change.from_location, editor.branched_plant.location)
+        self.assertEqual(change.plant, editor.model)
+        self.assertEqual(change.quantity, editor.model.quantity)
+        self.assertEqual(change.to_location, editor.model.location)
+        self.assertEqual(change.from_location, editor.branched_plant.location)
 
     def test_branch_editor(self):
         from gi.repository import Gtk
@@ -423,32 +423,32 @@
         self.session.commit()
 
         #editor = PlantEditor(model=self.plant)
-        loc = Location(name=u'site1', code=u'1')
-        loc2 = Location(name=u'site2', code=u'2')
+        loc = Location(name='site1', code='1')
+        loc2 = Location(name='site2', code='2')
         quantity = 5
-        plant = Plant(accession=self.accession, code=u'1', location=loc,
+        plant = Plant(accession=self.accession, code='1', location=loc,
                       quantity=quantity)
         self.session.add_all([loc, loc2, plant])
         self.session.commit()
 
         branch_callback([plant])
         new_plant = self.session.query(Plant).filter(
-            Plant.code != u'1').first()
+            Plant.code != '1').first()
         self.session.refresh(plant)
-        self.assertEquals(plant.quantity, quantity - new_plant.quantity)
-        self.assertEquals(new_plant.changes[0].quantity, new_plant.quantity)
+        self.assertEqual(plant.quantity, quantity - new_plant.quantity)
+        self.assertEqual(new_plant.changes[0].quantity, new_plant.quantity)
 
     def test_is_code_unique(self):
         """
         Test bauble.plugins.garden.plant.is_code_unique()
         """
-        self.assertFalse(is_code_unique(self.plant, u'1'))
-        self.assert_(is_code_unique(self.plant, '01'))
+        self.assertFalse(is_code_unique(self.plant, '1'))
+        self.assertTrue(is_code_unique(self.plant, '01'))
         self.assertFalse(is_code_unique(self.plant, '1-2'))
         self.assertFalse(is_code_unique(self.plant, '01-2'))
 
     def test_living_plant_has_no_date_of_death(self):
-        self.assertEquals(self.plant.date_of_death, None)
+        self.assertEqual(self.plant.date_of_death, None)
 
     def test_setting_quantity_to_zero_defines_date_of_death(self):
         self.change = PlantChange()
@@ -458,7 +458,7 @@
         self.change.quantity = self.plant.quantity
         self.plant.quantity = 0
         self.session.flush()
-        self.assertNotEquals(self.plant.date_of_death, None)
+        self.assertNotEqual(self.plant.date_of_death, None)
 
 
 class PropagationTests(GardenTestCase):
@@ -469,11 +469,11 @@
     def setUp(self):
         super(PropagationTests, self).setUp()
         self.accession = self.create(
-            Accession, species=self.species, code=u'1')
+            Accession, species=self.species, code='1')
         self.plants = []
 
     def add_plants(self, plant_codes=[]):
-        loc = self.create(Location, name=u'name', code=u'code')
+        loc = self.create(Location, name='name', code='code')
         for pc in plant_codes:
             self.plants.append(self.create(
                 Plant,
@@ -485,9 +485,9 @@
             prop = Propagation()
             prop.prop_type = pt
             prop.plant = self.plants[i]
-            if pt == u'Seed':
+            if pt == 'Seed':
                 specifically = PropSeed(**default_seed_values)
-            elif pt == u'UnrootedCutting':
+            elif pt == 'UnrootedCutting':
                 specifically = PropCutting(**default_cutting_values)
             else:
                 specifically = type('FooBar', (object,), {})()
@@ -502,99 +502,99 @@
         super(PropagationTests, self).tearDown()
 
     def test_propagation_cutting_quantity_new_zero(self):
-        self.add_plants([u'1'])
+        self.add_plants(['1'])
         prop = Propagation()
-        prop.prop_type = u'UnrootedCutting'
+        prop.prop_type = 'UnrootedCutting'
         prop.plant = self.plants[0]
-        spec = PropCutting(cutting_type=u'Nodal')
+        spec = PropCutting(cutting_type='Nodal')
         spec.propagation = prop
         self.session.commit()
-        self.assertEquals(prop.accessible_quantity, 0)
+        self.assertEqual(prop.accessible_quantity, 0)
         prop = Propagation()
-        prop.prop_type = u'UnrootedCutting'
+        prop.prop_type = 'UnrootedCutting'
         prop.plant = self.plants[0]
-        spec = PropCutting(cutting_type=u'Nodal', rooted_pct=0)
+        spec = PropCutting(cutting_type='Nodal', rooted_pct=0)
         spec.propagation = prop
         self.session.commit()
-        self.assertEquals(prop.accessible_quantity, 0)
+        self.assertEqual(prop.accessible_quantity, 0)
 
     def test_propagation_seed_quantity_new_zero(self):
-        self.add_plants([u'1'])
+        self.add_plants(['1'])
         prop = Propagation()
-        prop.prop_type = u'Seed'
+        prop.prop_type = 'Seed'
         prop.plant = self.plants[0]
         spec = PropSeed(nseeds=30, date_sown=datetime.date(2017, 1, 1))
         spec.propagation = prop
         self.session.commit()
-        self.assertEquals(prop.accessible_quantity, 0)
+        self.assertEqual(prop.accessible_quantity, 0)
         prop = Propagation()
-        prop.prop_type = u'Seed'
+        prop.prop_type = 'Seed'
         prop.plant = self.plants[0]
         spec = PropSeed(nseeds=30, date_sown=datetime.date(2017, 1, 1), nseedlings=0)
         spec.propagation = prop
         self.session.commit()
-        self.assertEquals(prop.accessible_quantity, 0)
+        self.assertEqual(prop.accessible_quantity, 0)
 
     def test_propagation_seed_unaccessed_quantity(self):
-        self.add_plants([u'1'])
+        self.add_plants(['1'])
         prop = Propagation()
-        prop.prop_type = u'Seed'
+        prop.prop_type = 'Seed'
         prop.plant = self.plants[0]
         seed = PropSeed(**default_seed_values)
         seed.propagation = prop
         self.session.commit()
         summary = prop.get_summary()
-        self.assertEquals(prop.accessible_quantity, 23)
+        self.assertEqual(prop.accessible_quantity, 23)
 
     def test_propagation_cutting_accessed_remaining_quantity(self):
-        self.add_plants([u'1'])
-        self.add_propagations([u'Seed'])
-        accession2 = self.create(Accession, species=self.species, code=u'2', quantity_recvd=10)
+        self.add_plants(['1'])
+        self.add_propagations(['Seed'])
+        accession2 = self.create(Accession, species=self.species, code='2', quantity_recvd=10)
         source2 = self.create(Source, plant_propagation=self.plants[0].propagations[0])
         accession2.source = source2
         self.session.commit()
         prop = self.plants[0].propagations[0]
-        self.assertEquals(prop.accessible_quantity, 13)
+        self.assertEqual(prop.accessible_quantity, 13)
 
     def test_propagation_other_unaccessed_remaining_quantity_1(self):
-        self.add_plants([u'1'])
-        self.add_propagations([u'Other'])
+        self.add_plants(['1'])
+        self.add_propagations(['Other'])
         prop = self.plants[0].propagations[0]
-        self.assertEquals(prop.accessible_quantity, 1)
+        self.assertEqual(prop.accessible_quantity, 1)
 
     def test_propagation_other_accessed_remaining_quantity_1(self):
-        self.add_plants([u'1'])
-        self.add_propagations([u'Other'])
-        accession2 = self.create(Accession, species=self.species, code=u'2', quantity_recvd=10)
+        self.add_plants(['1'])
+        self.add_propagations(['Other'])
+        accession2 = self.create(Accession, species=self.species, code='2', quantity_recvd=10)
         source2 = self.create(Source, plant_propagation=self.plants[0].propagations[0])
         accession2.source = source2
         self.session.commit()
         prop = self.plants[0].propagations[0]
-        self.assertEquals(prop.accessible_quantity, 1)
+        self.assertEqual(prop.accessible_quantity, 1)
 
     def test_accession_propagations_is_union_of_plant_propagations(self):
-        self.add_plants([u'1', u'2'])
-        self.add_propagations([u'UnrootedCutting', u'Seed'])
-        self.assertEquals(len(self.accession.plants), 2)
-        self.assertEquals(len(self.plants[0].propagations), 1)
-        self.assertEquals(len(self.plants[1].propagations), 1)
-        self.assertEquals(len(self.accession.propagations), 2)
+        self.add_plants(['1', '2'])
+        self.add_propagations(['UnrootedCutting', 'Seed'])
+        self.assertEqual(len(self.accession.plants), 2)
+        self.assertEqual(len(self.plants[0].propagations), 1)
+        self.assertEqual(len(self.plants[1].propagations), 1)
+        self.assertEqual(len(self.accession.propagations), 2)
         p1, p2 = self.plants[0].propagations[0], self.plants[1].propagations[0]
         self.assertTrue(p1 in self.accession.propagations)
         self.assertTrue(p2 in self.accession.propagations)
 
     def test_propagation_links_back_to_correct_plant(self):
-        self.add_plants([u'1', u'2', u'3'])
-        self.add_propagations([u'UnrootedCutting', u'Seed', u'Seed'])
+        self.add_plants(['1', '2', '3'])
+        self.add_propagations(['UnrootedCutting', 'Seed', 'Seed'])
         for plant in self.plants:
-            self.assertEquals(len(plant.propagations), 1)
+            self.assertEqual(len(plant.propagations), 1)
             prop = plant.propagations[0]
-            self.assertEquals(prop.plant, plant)
+            self.assertEqual(prop.plant, plant)
 
     def test_get_summary_cutting_complete(self):
-        self.add_plants([u'1'])
+        self.add_plants(['1'])
         prop = Propagation()
-        prop.prop_type = u'UnrootedCutting'
+        prop.prop_type = 'UnrootedCutting'
         prop.plant = self.plants[0]
         cutting = PropCutting(**default_cutting_values)
         cutting.propagation = prop
@@ -602,70 +602,70 @@
         rooted.cutting = cutting
         self.session.commit()
         summary = prop.get_summary()
-        self.assertEquals(summary, 'Cutting; Cutting type: Nodal; Length: 2mm; Tip: Intact; Leaves: Intact; Flower buds: None; Wounded: Singled; Fungal soak: Physan; Hormone treatment: Auxin powder; Bottom heat: 65°F; Container: 4" pot; Media: standard mix; Location: Mist frame; Cover: Poly cover; Rooted: 90%')
+        self.assertEqual(summary, 'Cutting; Cutting type: Nodal; Length: 2mm; Tip: Intact; Leaves: Intact; Flower buds: None; Wounded: Singled; Fungal soak: Physan; Hormone treatment: Auxin powder; Bottom heat: 65°F; Container: 4" pot; Media: standard mix; Location: Mist frame; Cover: Poly cover; Rooted: 90%')
 
     def test_get_summary_seed_complete(self):
-        self.add_plants([u'1'])
+        self.add_plants(['1'])
         prop = Propagation()
-        prop.prop_type = u'Seed'
+        prop.prop_type = 'Seed'
         prop.plant = self.plants[0]
         seed = PropSeed(**default_seed_values)
         seed.propagation = prop
         self.session.commit()
         summary = prop.get_summary()
-        self.assertEquals(summary, 'Seed; Pretreatment: Soaked in peroxide solution; # of seeds: 24; Date sown: 01-01-2017; Container: tray; Media: standard mix; Location: mist tent; Germination date: 01-02-2017; # of seedlings: 23; Germination rate: 99%; Date planted: 08-02-2017')
+        self.assertEqual(summary, 'Seed; Pretreatment: Soaked in peroxide solution; # of seeds: 24; Date sown: 01-01-2017; Container: tray; Media: standard mix; Location: mist tent; Germination date: 01-02-2017; # of seedlings: 23; Germination rate: 99%; Date planted: 08-02-2017')
 
     def test_get_summary_seed_partial_1_still_unused(self):
-        self.add_plants([u'1'])
-        self.add_propagations([u'Seed'])
+        self.add_plants(['1'])
+        self.add_propagations(['Seed'])
         prop = self.plants[0].propagations[0]
-        self.assertEquals(prop.get_summary(partial=1), '')
+        self.assertEqual(prop.get_summary(partial=1), '')
 
     def test_get_summary_seed_partial_2_still_unused(self):
-        self.add_plants([u'1'])
-        self.add_propagations([u'Seed'])
+        self.add_plants(['1'])
+        self.add_propagations(['Seed'])
         prop = self.plants[0].propagations[0]
-        self.assertEquals(prop.get_summary(partial=2),
+        self.assertEqual(prop.get_summary(partial=2),
                           prop.get_summary())
 
     def test_get_summary_seed_partial_1_used_once(self):
-        self.add_plants([u'1'])
-        self.add_propagations([u'Seed'])
-        accession2 = self.create(Accession, species=self.species, code=u'2')
+        self.add_plants(['1'])
+        self.add_propagations(['Seed'])
+        accession2 = self.create(Accession, species=self.species, code='2')
         source2 = self.create(Source, plant_propagation=self.plants[0].propagations[0])
         accession2.source = source2
         self.session.commit()
         prop = self.plants[0].propagations[0]
-        self.assertEquals(prop.get_summary(partial=1), accession2.code)
+        self.assertEqual(prop.get_summary(partial=1), accession2.code)
 
     def test_get_summary_seed_partial_1_used_twice(self):
-        self.add_plants([u'1'])
-        self.add_propagations([u'Seed'])
-        using = [u'2', u'3']
+        self.add_plants(['1'])
+        self.add_propagations(['Seed'])
+        using = ['2', '3']
         for c in using:
             a = self.create(Accession, species=self.species, code=c)
             s = self.create(Source, plant_propagation=self.plants[0].propagations[0])
             a.source = s
         self.session.commit()
         prop = self.plants[0].propagations[0]
-        self.assertEquals(prop.get_summary(partial=1),
+        self.assertEqual(prop.get_summary(partial=1),
                           ';'.join("%s" % a for a in prop.accessions))
 
     def test_propagation_accessions_used_once(self):
-        self.add_plants([u'1'])
-        self.add_propagations([u'Seed'])
-        accession2 = self.create(Accession, species=self.species, code=u'2')
+        self.add_plants(['1'])
+        self.add_propagations(['Seed'])
+        accession2 = self.create(Accession, species=self.species, code='2')
         source2 = self.create(Source, plant_propagation=self.plants[0].propagations[0])
         accession2.source = source2
         self.session.commit()
         prop = self.plants[0].propagations[0]
-        self.assertEquals(prop.accessions, [accession2])
+        self.assertEqual(prop.accessions, [accession2])
 
     def test_propagation_accessions_used_twice(self):
-        self.add_plants([u'1'])
-        self.add_propagations([u'Seed'])
+        self.add_plants(['1'])
+        self.add_propagations(['Seed'])
         prop = self.plants[0].propagations[0]
-        using = [u'2', u'3']
+        using = ['2', '3']
         accs = []
         for c in using:
             a = self.create(Accession, species=self.species, code=c)
@@ -673,31 +673,31 @@
             a.source = s
             accs.append(a)
         self.session.commit()
-        self.assertEquals(len(prop.accessions), 2)
-        self.assertEquals(sorted(accs), sorted(prop.accessions))
+        self.assertEqual(len(prop.accessions), 2)
+        self.assertEqual(sorted(accs), sorted(prop.accessions))
 
     def test_accession_source_plant_propagation_points_at_parent_plant(self):
-        self.add_plants([u'1'])
-        self.add_propagations([u'Seed'])
+        self.add_plants(['1'])
+        self.add_propagations(['Seed'])
         prop = self.plants[0].propagations[0]
-        using = [u'2', u'3']
+        using = ['2', '3']
         for c in using:
             a = self.create(Accession, species=self.species, code=c)
             s = self.create(Source, plant_propagation=prop)
             a.source = s
         self.session.commit()
         for a in prop.accessions:
-            self.assertEquals(a.source.plant_propagation.plant, self.plants[0])
-            self.assertEquals(a.parent_plant, self.plants[0])
+            self.assertEqual(a.source.plant_propagation.plant, self.plants[0])
+            self.assertEqual(a.parent_plant, self.plants[0])
 
     def test_accession_without_parent_plant(self):
-        self.assertEquals(self.accession.parent_plant, None)
+        self.assertEqual(self.accession.parent_plant, None)
 
     def test_cutting_property(self):
-        self.add_plants([u'1'])
+        self.add_plants(['1'])
         prop = Propagation()
         prop.plant = self.plants[0]
-        prop.prop_type = u'UnrootedCutting'
+        prop.prop_type = 'UnrootedCutting'
         prop.accession = self.accession
         cutting = PropCutting(**default_cutting_values)
         cutting.propagation = prop
@@ -706,49 +706,49 @@
         self.session.add(rooted)
         self.session.commit()
 
-        self.assert_(rooted in prop._cutting.rooted)
+        self.assertTrue(rooted in prop._cutting.rooted)
 
         rooted_id = rooted.id
         cutting_id = cutting.id
-        self.assert_(rooted_id, 'no prop_rooted.id')
+        self.assertTrue(rooted_id, 'no prop_rooted.id')
 
         # setting the _cutting property on Propagation should cause
         # the cutting and its rooted children to be deleted
         prop._cutting = None
         self.session.commit()
-        self.assert_(not self.session.query(PropCutting).get(cutting_id))
-        self.assert_(not self.session.query(PropCuttingRooted).get(rooted_id))
+        self.assertTrue(not self.session.query(PropCutting).get(cutting_id))
+        self.assertTrue(not self.session.query(PropCuttingRooted).get(rooted_id))
 
     def test_accession_links_to_parent_plant(self):
         '''we can reach the parent plant from an accession'''
 
-        self.add_plants([u'1'])
+        self.add_plants(['1'])
         pass
 
     def test_seed_property(self):
-        loc = Location(name=u'name', code=u'code')
-        plant = Plant(accession=self.accession, location=loc, code=u'1',
+        loc = Location(name='name', code='code')
+        plant = Plant(accession=self.accession, location=loc, code='1',
                       quantity=1)
         prop = Propagation()
         plant.propagations.append(prop)
-        prop.prop_type = u'Seed'
+        prop.prop_type = 'Seed'
         prop.accession = self.accession
         seed = PropSeed(**default_seed_values)
         self.session.add(seed)
         seed.propagation = prop
         self.session.commit()
 
-        self.assert_(seed == prop._seed)
+        self.assertTrue(seed == prop._seed)
         seed_id = seed.id
 
         # this should cause the cutting and its rooted children to be deleted
         prop._seed = None
         self.session.commit()
-        self.assert_(not self.session.query(PropSeed).get(seed_id))
+        self.assertTrue(not self.session.query(PropSeed).get(seed_id))
 
     def test_cutting_editor(self):
-        loc = Location(name=u'name', code=u'code')
-        plant = Plant(accession=self.accession, location=loc, code=u'1',
+        loc = Location(name='name', code='code')
+        plant = Plant(accession=self.accession, location=loc, code='1',
                       quantity=1)
         propagation = Propagation()
         plant.propagations.append(propagation)
@@ -756,10 +756,10 @@
         widgets = self.editor.presenter.view.widgets
         self.assertTrue(widgets is not None)
         view = self.editor.presenter.view
-        view.widget_set_value('prop_type_combo', u'UnrootedCutting')
+        view.widget_set_value('prop_type_combo', 'UnrootedCutting')
         view.widget_set_value('prop_date_entry', utils.today_str())
         cutting_presenter = self.editor.presenter._cutting_presenter
-        for widget, attr in cutting_presenter.widget_to_field_map.iteritems():
+        for widget, attr in cutting_presenter.widget_to_field_map.items():
             #debug('%s=%s' % (widget, default_cutting_values[attr]))
             view.widget_set_value(widget, default_cutting_values[attr])
         update_gui()
@@ -768,15 +768,15 @@
         model = self.editor.model
         s = object_session(model)
         s.expire(model)
-        self.assert_(model.prop_type == u'UnrootedCutting')
-        for attr, value in default_cutting_values.iteritems():
+        self.assertTrue(model.prop_type == 'UnrootedCutting')
+        for attr, value in default_cutting_values.items():
             v = getattr(model._cutting, attr)
-            self.assert_(v == value, '%s = %s(%s)' % (attr, value, v))
+            self.assertTrue(v == value, '%s = %s(%s)' % (attr, value, v))
         self.editor.session.close()
 
     def test_seed_editor_commit(self):
-        loc = Location(name=u'name', code=u'code')
-        plant = Plant(accession=self.accession, location=loc, code=u'1',
+        loc = Location(name='name', code='code')
+        plant = Plant(accession=self.accession, location=loc, code='1',
                       quantity=1)
         propagation = Propagation()
         plant.propagations.append(propagation)
@@ -786,12 +786,12 @@
         view = editor.presenter.view
 
         # set default values in editor widgets
-        view.widget_set_value('prop_type_combo', u'Seed')
+        view.widget_set_value('prop_type_combo', 'Seed')
         view.widget_set_value('prop_date_entry',
                               default_propagation_values['date'])
         view.widget_set_value('notes_textview',
                               default_propagation_values['notes'])
-        for widget, attr in seed_presenter.widget_to_field_map.iteritems():
+        for widget, attr in seed_presenter.widget_to_field_map.items():
             w = widgets[widget]
             if isinstance(w, Gtk.ComboBoxEntry) and not w.get_model():
                 widgets[widget].get_child().props.text = default_seed_values[attr]
@@ -808,29 +808,29 @@
         s = db.Session()
         propagation = s.query(Propagation).get(model_id)
 
-        self.assert_(propagation.prop_type == u'Seed')
+        self.assertTrue(propagation.prop_type == 'Seed')
         # make sure the each value in default_seed_values matches the model
-        for attr, expected in default_seed_values.iteritems():
+        for attr, expected in default_seed_values.items():
             v = getattr(propagation._seed, attr)
             if isinstance(v, datetime.date):
                 format = prefs.prefs[prefs.date_format_pref]
                 v = v.strftime(format)
                 if isinstance(expected, datetime.date):
                     expected = expected.strftime(format)
-            self.assert_(v == expected, '%s = %s(%s)' % (attr, expected, v))
-
-        for attr, expected in default_propagation_values.iteritems():
+            self.assertTrue(v == expected, '%s = %s(%s)' % (attr, expected, v))
+
+        for attr, expected in default_propagation_values.items():
             v = getattr(propagation, attr)
-            self.assert_(v == expected, '%s = %s(%s)' % (attr, expected, v))
+            self.assertTrue(v == expected, '%s = %s(%s)' % (attr, expected, v))
 
         s.close()
 
     def test_seed_editor_load(self):
-        loc = Location(name=u'name', code=u'code')
-        plant = Plant(accession=self.accession, location=loc, code=u'1',
+        loc = Location(name='name', code='code')
+        plant = Plant(accession=self.accession, location=loc, code='1',
                       quantity=1)
         propagation = Propagation(**default_propagation_values)
-        propagation.prop_type = u'Seed'
+        propagation.prop_type = 'Seed'
         propagation._seed = PropSeed(**default_seed_values)
         plant.propagations.append(propagation)
 
@@ -856,18 +856,18 @@
 
         # make sure the default values match the values in the widgets
         date_format = prefs.prefs[prefs.date_format_pref]
-        for widget, attr in editor.presenter.widget_to_field_map.iteritems():
+        for widget, attr in editor.presenter.widget_to_field_map.items():
             if not attr in default_propagation_values:
                 continue
             default = default_propagation_values[attr]
             if isinstance(default, datetime.date):
                 default = default.strftime(date_format)
             value = get_widget_text(widgets[widget])
-            self.assert_(value == default,
+            self.assertTrue(value == default,
                          '%s = %s (%s)' % (attr, value, default))
 
         # check the default for the PropSeed and SeedPresenter
-        for widget, attr in seed_presenter.widget_to_field_map.iteritems():
+        for widget, attr in seed_presenter.widget_to_field_map.items():
             if not attr in default_seed_values:
                 continue
             default = default_seed_values[attr]
@@ -876,7 +876,7 @@
             if isinstance(default, int):
                 default = str(default)
             value = get_widget_text(widgets[widget])
-            self.assert_(value == default,
+            self.assertTrue(value == default,
                          '%s = %s (%s)' % (attr, value, default))
 
     def test_editor(self):
@@ -891,14 +891,14 @@
         editor = PropagationEditor(model=propagation)
         propagation = editor.start()
         logger.debug(propagation)
-        self.assert_(propagation.accession)
+        self.assertTrue(propagation.accession)
 
 
 class AccessionEditorSpeciesMatchTests(GardenTestCase):
 
     def setUp(self):
         super(AccessionEditorSpeciesMatchTests, self).setUp()
-        self.sp3 = Species(genus=self.genus, sp=u'inexistente')
+        self.sp3 = Species(genus=self.genus, sp='inexistente')
         self.session.add_all([self.sp3])
         self.session.commit()
 
@@ -949,7 +949,7 @@
     def setUp(self):
         super(VoucherTests, self).setUp()
         self.accession = self.create(
-            Accession, species=self.species, code=u'1')
+            Accession, species=self.species, code='1')
         self.session.commit()
 
     def tearDown(self):
@@ -959,25 +959,25 @@
         """
         Test the Accession.voucher property
         """
-        voucher = Voucher(herbarium=u'ABC', code=u'1234567')
+        voucher = Voucher(herbarium='ABC', code='1234567')
         voucher.accession = self.accession
         self.session.commit()
         voucher_id = voucher.id
         self.accession.vouchers.remove(voucher)
         self.session.commit()
-        self.assert_(not self.session.query(Voucher).get(voucher_id))
+        self.assertTrue(not self.session.query(Voucher).get(voucher_id))
 
         # test that if we set voucher.accession to None then the
         # voucher is deleted but not the accession
-        voucher = Voucher(herbarium=u'ABC', code=u'1234567')
+        voucher = Voucher(herbarium='ABC', code='1234567')
         voucher.accession = self.accession
         self.session.commit()
         voucher_id = voucher.id
         acc_id = voucher.accession.id
         voucher.accession = None
         self.session.commit()
-        self.assert_(not self.session.query(Voucher).get(voucher_id))
-        self.assert_(self.session.query(Accession).get(acc_id))
+        self.assertTrue(not self.session.query(Voucher).get(voucher_id))
+        self.assertTrue(self.session.query(Accession).get(acc_id))
 
 
 class SourceTests(GardenTestCase):
@@ -988,7 +988,7 @@
     def setUp(self):
         super(SourceTests, self).setUp()
         self.accession = self.create(
-            Accession, species=self.species, code=u'1')
+            Accession, species=self.species, code='1')
 
     def tearDown(self):
         super(SourceTests, self).tearDown()
@@ -1001,7 +1001,7 @@
         code, we're just being lazy.
 
         '''
-        source.propagation = Propagation(prop_type=u'Seed')
+        source.propagation = Propagation(prop_type='Seed')
 
         seed = PropSeed(**default_seed_values)
         seed.propagation = source.propagation
@@ -1019,16 +1019,16 @@
         source = Source()
         self.accession.source = source
         prop_id, seed_id, cutting_id = self._make_prop(source)
-        self.assert_(seed_id)
-        self.assert_(cutting_id)
-        self.assert_(prop_id)
+        self.assertTrue(seed_id)
+        self.assertTrue(cutting_id)
+        self.assertTrue(prop_id)
         # make sure the propagation gets cleaned up when we set the
         # source.propagation attribute to None - and commit
         source.propagation = None
         self.session.commit()
-        self.assert_(not self.session.query(PropSeed).get(seed_id))
-        self.assert_(not self.session.query(PropCutting).get(cutting_id))
-        self.assert_(not self.session.query(Propagation).get(prop_id))
+        self.assertTrue(not self.session.query(PropSeed).get(seed_id))
+        self.assertTrue(not self.session.query(PropCutting).get(cutting_id))
+        self.assertTrue(not self.session.query(Propagation).get(prop_id))
 
     def test(self):
         """
@@ -1044,17 +1044,17 @@
         source = Source()
         #self.assert_(hasattr(source, 'plant_propagation'))
 
-        location = Location(code=u'1', name=u'site1')
-        plant = Plant(accession=self.accession, location=location, code=u'1',
+        location = Location(code='1', name='site1')
+        plant = Plant(accession=self.accession, location=location, code='1',
                       quantity=1)
-        plant.propagations.append(Propagation(prop_type=u'Seed'))
+        plant.propagations.append(Propagation(prop_type='Seed'))
         self.session.commit()
 
         source.source_detail = Contact()
-        source.source_detail.name = u'name'
-        source.sources_code = u'1'
-        source.collection = Collection(locale=u'locale')
-        source.propagation = Propagation(prop_type=u'Seed')
+        source.source_detail.name = 'name'
+        source.sources_code = '1'
+        source.collection = Collection(locale='locale')
+        source.propagation = Propagation(prop_type='Seed')
         source.plant_propagation = plant.propagations[0]
         source.accession = self.accession  # test source's accession property
         self.session.commit()
@@ -1069,13 +1069,13 @@
 
         # the Collection and Propagation should be
         # deleted since they are specific to the source
-        self.assert_(not self.session.query(Collection).get(coll_id))
-        self.assert_(not self.session.query(Propagation).get(prop_id))
+        self.assertTrue(not self.session.query(Collection).get(coll_id))
+        self.assertTrue(not self.session.query(Propagation).get(prop_id))
 
         # the Contact and plant Propagation shouldn't be deleted
         # since they are independent of the source
-        self.assert_(self.session.query(Propagation).get(plant_prop_id))
-        self.assert_(self.session.query(Contact).get(source_detail_id))
+        self.assertTrue(self.session.query(Propagation).get(plant_prop_id))
+        self.assertTrue(self.session.query(Contact).get(source_detail_id))
 
 
 class AccessionQualifiedTaxon(GardenTestCase):
@@ -1085,102 +1085,102 @@
 
     def setUp(self):
         super(AccessionQualifiedTaxon, self).setUp()
-        self.sp3 = Species(genus=self.genus, sp=u'grusonii',
-                           infrasp1_rank=u'var.', infrasp1=u'albispinus')
+        self.sp3 = Species(genus=self.genus, sp='grusonii',
+                           infrasp1_rank='var.', infrasp1='albispinus')
         self.session.add(self.sp3)
         self.session.commit()
-        self.ac1 = self.create(Accession, species=self.species, code=u'1')
-        self.ac2 = self.create(Accession, species=self.sp3, code=u'2')
+        self.ac1 = self.create(Accession, species=self.species, code='1')
+        self.ac2 = self.create(Accession, species=self.sp3, code='2')
 
     def tearDown(self):
         super(AccessionQualifiedTaxon, self).tearDown()
 
     def test_species_str_plain(self):
-        s = u'Echinocactus grusonii'
+        s = 'Echinocactus grusonii'
         sp_str = self.ac1.species_str()
-        self.assertEquals(remove_zws(sp_str), s)
-
-        s = u'<i>Echinocactus</i> <i>grusonii</i> var. <i>albispinus</i>'
+        self.assertEqual(remove_zws(sp_str), s)
+
+        s = '<i>Echinocactus</i> <i>grusonii</i> var. <i>albispinus</i>'
         sp_str = self.ac2.species_str(markup=True)
-        self.assertEquals(remove_zws(sp_str), s)
+        self.assertEqual(remove_zws(sp_str), s)
 
     def test_species_str_without_zws(self):
-        s = u'Echinocactus grusonii'
+        s = 'Echinocactus grusonii'
         sp_str = self.species.str(remove_zws=True)
-        self.assertEquals(sp_str, s)
-        s = u'Echinocactus grusonii var. albispinus'
+        self.assertEqual(sp_str, s)
+        s = 'Echinocactus grusonii var. albispinus'
         sp_str = self.sp3.str(remove_zws=True)
-        self.assertEquals(sp_str, s)
-        s = u'<i>Echinocactus</i> <i>grusonii</i> var. <i>albispinus</i>'
+        self.assertEqual(sp_str, s)
+        s = '<i>Echinocactus</i> <i>grusonii</i> var. <i>albispinus</i>'
         sp_str = self.sp3.str(remove_zws=True, markup=True)
-        self.assertEquals(sp_str, s)
+        self.assertEqual(sp_str, s)
 
     def test_species_str_with_qualification_too_deep(self):
-        self.ac1.id_qual = u'?'
-        self.ac1.id_qual_rank = u'infrasp'
-        s = u'<i>Echinocactus</i> <i>grusonii</i>'
+        self.ac1.id_qual = '?'
+        self.ac1.id_qual_rank = 'infrasp'
+        s = '<i>Echinocactus</i> <i>grusonii</i>'
         sp_str = self.ac1.species_str(markup=True)
-        self.assertEquals(remove_zws(sp_str), s)
-        s = u'Echinocactus grusonii'
+        self.assertEqual(remove_zws(sp_str), s)
+        s = 'Echinocactus grusonii'
         sp_str = self.ac1.species_str()
-        self.assertEquals(sp_str, s)
+        self.assertEqual(sp_str, s)
 
         self.ac1.id_qual = 'cf.'
         self.ac1.id_qual_rank = 'infrasp'
-        s = u'Echinocactus grusonii'
+        s = 'Echinocactus grusonii'
         sp_str = self.ac1.species_str()
-        self.assertEquals(remove_zws(sp_str), s)
+        self.assertEqual(remove_zws(sp_str), s)
 
     def test_species_str_with_qualification_correct(self):
-        self.ac1.id_qual = u'?'
-        self.ac1.id_qual_rank = u'sp'
-        s = u'<i>Echinocactus</i> ? <i>grusonii</i>'
+        self.ac1.id_qual = '?'
+        self.ac1.id_qual_rank = 'sp'
+        s = '<i>Echinocactus</i> ? <i>grusonii</i>'
         sp_str = self.ac1.species_str(markup=True)
-        self.assertEquals(remove_zws(sp_str), s)
+        self.assertEqual(remove_zws(sp_str), s)
 
         # aff. before qualified epithet
         self.ac1.id_qual = 'aff.'
-        self.ac1.id_qual_rank = u'genus'
-        s = u'aff. <i>Echinocactus</i> <i>grusonii</i>'
+        self.ac1.id_qual_rank = 'genus'
+        s = 'aff. <i>Echinocactus</i> <i>grusonii</i>'
         sp_str = self.ac1.species_str(markup=True)
-        self.assertEquals(remove_zws(sp_str), s)
-
-        self.ac1.id_qual_rank = u'sp'
-        s = u'<i>Echinocactus</i> aff. <i>grusonii</i>'
+        self.assertEqual(remove_zws(sp_str), s)
+
+        self.ac1.id_qual_rank = 'sp'
+        s = '<i>Echinocactus</i> aff. <i>grusonii</i>'
         sp_str = self.ac1.species_str(markup=True)
-        self.assertEquals(remove_zws(sp_str), s)
+        self.assertEqual(remove_zws(sp_str), s)
 
         self.ac2.id_qual = 'aff.'
-        self.ac2.id_qual_rank = u'infrasp'
-        s = u'<i>Echinocactus</i> <i>grusonii</i> aff. var. <i>albispinus</i>'
+        self.ac2.id_qual_rank = 'infrasp'
+        s = '<i>Echinocactus</i> <i>grusonii</i> aff. var. <i>albispinus</i>'
         sp_str = self.ac2.species_str(markup=True)
-        self.assertEquals(remove_zws(sp_str), s)
+        self.assertEqual(remove_zws(sp_str), s)
 
         self.ac1.id_qual = 'cf.'
-        self.ac1.id_qual_rank = u'sp'
-        s = u'<i>Echinocactus</i> cf. <i>grusonii</i>'
+        self.ac1.id_qual_rank = 'sp'
+        s = '<i>Echinocactus</i> cf. <i>grusonii</i>'
         sp_str = self.ac1.species_str(markup=True)
-        self.assertEquals(remove_zws(sp_str), s)
+        self.assertEqual(remove_zws(sp_str), s)
 
         self.ac1.id_qual = 'aff.'
-        self.ac1.id_qual_rank = u'sp'
-        s = u'Echinocactus aff. grusonii'
+        self.ac1.id_qual_rank = 'sp'
+        s = 'Echinocactus aff. grusonii'
         sp_str = self.ac1.species_str()
-        self.assertEquals(remove_zws(sp_str), s)
+        self.assertEqual(remove_zws(sp_str), s)
 
         self.ac1.id_qual = 'forsan'
-        self.ac1.id_qual_rank = u'sp'
-        s = u'Echinocactus forsan grusonii'
+        self.ac1.id_qual_rank = 'sp'
+        s = 'Echinocactus forsan grusonii'
         sp_str = self.ac1.species_str()
-        self.assertEquals(remove_zws(sp_str), s)
+        self.assertEqual(remove_zws(sp_str), s)
 
         ## add cultivar to species and refer to it as cf.
-        self.ac1.species.set_infrasp(1, u'cv.', u'Cultivar')
-        self.ac1.id_qual = u'cf.'
-        self.ac1.id_qual_rank = u'infrasp'
-        s = u"Echinocactus grusonii cf. 'Cultivar'"
+        self.ac1.species.set_infrasp(1, 'cv.', 'Cultivar')
+        self.ac1.id_qual = 'cf.'
+        self.ac1.id_qual_rank = 'infrasp'
+        s = "Echinocactus grusonii cf. 'Cultivar'"
         sp_str = self.ac1.species_str()
-        self.assertEquals(remove_zws(sp_str), s)
+        self.assertEqual(remove_zws(sp_str), s)
 
     def test_species_str_qualification_appended(self):
         # previously, if the id_qual is set but the id_qual_rank isn't then
@@ -1192,70 +1192,70 @@
 
         self.ac1.id_qual = None
         self.ac1.id_qual = '?'
-        s = u'Echinocactus grusonii (?)'
+        s = 'Echinocactus grusonii (?)'
         sp_str = self.ac1.species_str()
-        self.assertEquals(remove_zws(sp_str), s)
+        self.assertEqual(remove_zws(sp_str), s)
 
         # species.infrasp is still none but these just get pasted on
         # the end so it doesn't matter
         self.ac1.id_qual = 'incorrect'
         self.ac1.id_qual_rank = 'infrasp'
-        s = u'Echinocactus grusonii (incorrect)'
+        s = 'Echinocactus grusonii (incorrect)'
         sp_str = self.ac1.species_str()
-        self.assertEquals(remove_zws(sp_str), s)
+        self.assertEqual(remove_zws(sp_str), s)
 
         self.ac1.id_qual = 'incorrect'
         self.ac1.id_qual_rank = 'sp'
-        s = u'<i>Echinocactus</i> <i>grusonii</i> (incorrect)'
+        s = '<i>Echinocactus</i> <i>grusonii</i> (incorrect)'
         sp_str = self.ac1.species_str(markup=True)
-        self.assertEquals(remove_zws(sp_str), s)
+        self.assertEqual(remove_zws(sp_str), s)
 
     def test_species_str_is_cached(self):
-        self.ac1.species.set_infrasp(1, u'cv.', u'Cultivar')
-        self.ac1.id_qual = u'cf.'
-        self.ac1.id_qual_rank = u'infrasp'
-        s = u"Echinocactus grusonii cf. 'Cultivar'"
+        self.ac1.species.set_infrasp(1, 'cv.', 'Cultivar')
+        self.ac1.id_qual = 'cf.'
+        self.ac1.id_qual_rank = 'infrasp'
+        s = "Echinocactus grusonii cf. 'Cultivar'"
         sp_str = self.ac1.species_str()
-        self.assertEquals(remove_zws(sp_str), s)
+        self.assertEqual(remove_zws(sp_str), s)
 
         # have to commit because the cached string won't be returned
         # on dirty species
         self.session.commit()
         s2 = self.ac1.species_str()
-        self.assertEquals(id(sp_str), id(s2))
+        self.assertEqual(id(sp_str), id(s2))
 
     def test_species_str_be_specific_in_infraspecific(self):
         'be specific qualifying infraspecific identification - still unused'
         ## add  to species with variety and refer to it as cf.
-        self.sp3.set_infrasp(2, u'cv.', u'Cultivar')
-        self.ac2.id_qual = u'cf.'
-        self.ac2.id_qual_rank = u'cv.'
-        s = u"Echinocactus grusonii var. albispinus cf. 'Cultivar'"
+        self.sp3.set_infrasp(2, 'cv.', 'Cultivar')
+        self.ac2.id_qual = 'cf.'
+        self.ac2.id_qual_rank = 'cv.'
+        s = "Echinocactus grusonii var. albispinus cf. 'Cultivar'"
         sp_str = self.ac2.species_str()
-        self.assertEquals(remove_zws(sp_str), s)
-
-        self.ac2.id_qual = u'cf.'
-        self.ac2.id_qual_rank = u'var.'
-        s = u"Echinocactus grusonii var. cf. albispinus 'Cultivar'"
+        self.assertEqual(remove_zws(sp_str), s)
+
+        self.ac2.id_qual = 'cf.'
+        self.ac2.id_qual_rank = 'var.'
+        s = "Echinocactus grusonii var. cf. albispinus 'Cultivar'"
         sp_str = self.ac2.species_str()
-        self.assertEquals(remove_zws(sp_str), s)
+        self.assertEqual(remove_zws(sp_str), s)
 
     def test_species_str_unsorted_infraspecific(self):
         'be specific qualifying infraspecific identification - still unused'
         ## add  to species with variety and refer to it as cf.
-        self.sp3.set_infrasp(1, u'var.', u'aizoon')
-        self.sp3.set_infrasp(2, u'subvar.', u'brevifolia')
-        self.sp3.set_infrasp(3, u'f.', u'multicaulis')
-        self.ac2.id_qual = u'cf.'
-        self.ac2.id_qual_rank = u'f.'
+        self.sp3.set_infrasp(1, 'var.', 'aizoon')
+        self.sp3.set_infrasp(2, 'subvar.', 'brevifolia')
+        self.sp3.set_infrasp(3, 'f.', 'multicaulis')
+        self.ac2.id_qual = 'cf.'
+        self.ac2.id_qual_rank = 'f.'
         #s = u"Echinocactus grusonii f. cf. multicaulis"
         sp_str = self.ac2.species_str()
         #self.assertEquals(remove_zws(sp_str), s)
         self.assertTrue(sp_str.endswith("f. cf. multicaulis"))
 
-        self.sp3.set_infrasp(4, u'subf.', u'surculosa')
-        self.ac2.id_qual = u'cf.'
-        self.ac2.id_qual_rank = u'subf.'
+        self.sp3.set_infrasp(4, 'subf.', 'surculosa')
+        self.ac2.id_qual = 'cf.'
+        self.ac2.id_qual_rank = 'subf.'
         #s = u"Echinocactus grusonii subf. cf. surculosa"
         sp_str = self.ac2.species_str()
         #self.assertEquals(remove_zws(sp_str), s)
@@ -1278,47 +1278,47 @@
         Test that when an accession is deleted any orphaned rows are
         cleaned up.
         """
-        acc = self.create(Accession, species=self.species, code=u'1')
+        acc = self.create(Accession, species=self.species, code='1')
         plant = self.create(Plant, accession=acc, quantity=1,
-                            location=Location(name=u'site', code=u'STE'),
-                            code=u'1')
+                            location=Location(name='site', code='STE'),
+                            code='1')
         self.session.commit()
 
         # test that the plant is deleted after being orphaned
         plant_id = plant.id
         self.session.delete(acc)
         self.session.commit()
-        self.assert_(not self.session.query(Plant).get(plant_id))
+        self.assertTrue(not self.session.query(Plant).get(plant_id))
 
     def test_constraints(self):
         """
         Test the constraints on the accession table.
         """
-        acc = Accession(species=self.species, code=u'1')
+        acc = Accession(species=self.species, code='1')
         self.session.add(acc)
         self.session.commit()
 
         # test that accession.code is unique
-        acc = Accession(species=self.species, code=u'1')
+        acc = Accession(species=self.species, code='1')
         self.session.add(acc)
         self.assertRaises(IntegrityError, self.session.commit)
 
     def test_accession_source_editor(self, accession=None):
         ## create an accession, a location, a plant
-        parent = self.create(Accession, species=self.species, code=u'parent',
+        parent = self.create(Accession, species=self.species, code='parent',
                              quantity_recvd=1)
         plant = self.create(Plant, accession=parent, quantity=1,
-                            location=Location(name=u'site', code=u'STE'),
-                            code=u'1')
+                            location=Location(name='site', code='STE'),
+                            code='1')
         ## create a propagation without a related seed/cutting
-        prop = self.create(Propagation, prop_type=u'Seed')
+        prop = self.create(Propagation, prop_type='Seed')
         plant.propagations.append(prop)
         ## commit all the above to the database
         self.session.commit()
         self.assertTrue(prop.id > 0)  # we got a valid id after the commit
         plant_prop_id = prop.id
 
-        acc = Accession(code=u'code', species=self.species, quantity_recvd=2)
+        acc = Accession(code='code', species=self.species, quantity_recvd=2)
         self.editor = AccessionEditor(acc)
         # normally called by editor.presenter.start() but we don't call it here
         self.editor.presenter.source_presenter.start()
@@ -1358,20 +1358,20 @@
 
         # open a separate session and make sure everything committed
         session = db.Session()
-        acc = session.query(Accession).filter_by(code=u'code')[0]
+        acc = session.query(Accession).filter_by(code='code')[0]
         self.assertTrue(acc is not None)
         logger.debug(acc.id)
-        parent = session.query(Accession).filter_by(code=u'parent')[0]
+        parent = session.query(Accession).filter_by(code='parent')[0]
         self.assertTrue(parent is not None)
         logger.debug(parent.id)
         logger.debug("acc plants : %s" % [str(i) for i in acc.plants])
         logger.debug("parent plants : %s" % [str(i) for i in parent.plants])
         logger.debug(acc.source.__dict__)
-        self.assertEquals(acc.source.plant_propagation_id, plant_prop_id)
+        self.assertEqual(acc.source.plant_propagation_id, plant_prop_id)
 
     def test_accession_editor(self):
         raise SkipTest('Problem cannot be found in presenter')
-        acc = Accession(code=u'code', species=self.species)
+        acc = Accession(code='code', species=self.species)
         self.editor = AccessionEditor(acc)
         update_gui()
 
@@ -1393,7 +1393,7 @@
             self.editor.presenter.problems
 
         # commit the changes and cleanup
-        self.editor.model.name = u'asda'
+        self.editor.model.name = 'asda'
         from gi.repository import Gtk
         self.editor.handle_response(Gtk.ResponseType.OK)
         self.editor.session.close()
@@ -1404,7 +1404,7 @@
         """
         raise SkipTest('separate view from presenter, then test presenter')
         #donor = self.create(Donor, name=u'test')
-        sp2 = Species(genus=self.genus, sp=u'species')
+        sp2 = Species(genus=self.genus, sp='species')
         sp2.synonyms.append(self.species)
         self.session.add(sp2)
         self.session.commit()
@@ -1413,7 +1413,7 @@
         acc_code = '%s%s1' % (
             datetime.date.today().year, Plant.get_delimiter())
         acc = self.create(Accession, species=self.species, code=acc_code)
-        voucher = Voucher(herbarium=u'abcd', code=u'123')
+        voucher = Voucher(herbarium='abcd', code='123')
         acc.vouchers.append(voucher)
 
         def mem(size="rss"):
@@ -1424,23 +1424,23 @@
 
         # add verificaiton
         ver = Verification()
-        ver.verifier = u'me'
+        ver.verifier = 'me'
         ver.date = datetime.date.today()
         ver.prev_species = self.species
         ver.species = self.species
         ver.level = 1
         acc.verifications.append(ver)
 
-        location = Location(name=u'loc1', code=u'loc1')
-        plant = Plant(accession=acc, location=location, code=u'1', quantity=1)
-        prop = Propagation(prop_type=u'Seed')
+        location = Location(name='loc1', code='loc1')
+        plant = Plant(accession=acc, location=location, code='1', quantity=1)
+        prop = Propagation(prop_type='Seed')
         seed = PropSeed(**default_seed_values)
         seed.propagation = prop
         plant.propagations.append(prop)
 
-        source_detail = Contact(name=u'Test Source',
-                                     source_type=u'Expedition')
-        source = Source(sources_code=u'22')
+        source_detail = Contact(name='Test Source',
+                                     source_type='Expedition')
+        source = Source(sources_code='22')
         source.source_detail = source_detail
         acc.source = source
 
@@ -1449,7 +1449,7 @@
         self.editor = AccessionEditor(model=acc)
         try:
             self.editor.start()
-        except Exception, e:
+        except Exception as e:
             import traceback
             logger.debug(traceback.format_exc(0))
             logger.debug("%s(%s)" % (type(e).__name, e))
@@ -1457,10 +1457,10 @@
     def test_remove_callback_no_plants_no_confirm(self):
         # T_0
         added = []
-        added.append(Family(family=u'Caricaceae'))
-        added.append(Genus(epithet=u'Carica', family=added[-1]))
-        added.append(Species(epithet=u'papaya', genus=added[-1]))
-        added.append(Accession(code=u'010101', species=added[-1]))
+        added.append(Family(family='Caricaceae'))
+        added.append(Genus(epithet='Carica', family=added[-1]))
+        added.append(Species(epithet='papaya', genus=added[-1]))
+        added.append(Accession(code='010101', species=added[-1]))
         sp, acc = added[-2:]
         self.session.add_all(added)
         self.session.flush()
@@ -1475,21 +1475,21 @@
 
         # effect
         self.assertFalse('message_details_dialog' in [f for (f, m) in self.invoked])
-        print self.invoked
-        self.assertTrue(('yes_no_dialog', u'Are you sure you want to remove accession <b>010101</b>?')
+        print(self.invoked)
+        self.assertTrue(('yes_no_dialog', 'Are you sure you want to remove accession <b>010101</b>?')
                         in self.invoked)
-        self.assertEquals(result, None)
-        q = self.session.query(Accession).filter_by(code=u'010101', species=sp)
+        self.assertEqual(result, None)
+        q = self.session.query(Accession).filter_by(code='010101', species=sp)
         matching = q.all()
-        self.assertEquals(matching, [acc])
+        self.assertEqual(matching, [acc])
 
     def test_remove_callback_no_accessions_confirm(self):
         # T_0
         added = []
-        added.append(Family(family=u'Caricaceae'))
-        added.append(Genus(epithet=u'Carica', family=added[-1]))
-        added.append(Species(epithet=u'papaya', genus=added[-1]))
-        added.append(Accession(code=u'010101', species=added[-1]))
+        added.append(Family(family='Caricaceae'))
+        added.append(Genus(epithet='Carica', family=added[-1]))
+        added.append(Species(epithet='papaya', genus=added[-1]))
+        added.append(Accession(code='010101', species=added[-1]))
         sp, acc = added[-2:]
         self.session.add_all(added)
         self.session.flush()
@@ -1505,26 +1505,26 @@
         self.session.flush()
 
         # effect
-        print self.invoked
+        print(self.invoked)
         self.assertFalse('message_details_dialog' in
                          [f for (f, m) in self.invoked])
-        self.assertTrue(('yes_no_dialog', u'Are you sure you want to remove accession <b>010101</b>?')
+        self.assertTrue(('yes_no_dialog', 'Are you sure you want to remove accession <b>010101</b>?')
                         in self.invoked)
 
-        self.assertEquals(result, True)
-        q = self.session.query(Species).filter_by(sp=u"Carica")
+        self.assertEqual(result, True)
+        q = self.session.query(Species).filter_by(sp="Carica")
         matching = q.all()
-        self.assertEquals(matching, [])
+        self.assertEqual(matching, [])
 
     def test_remove_callback_with_accessions_cant_cascade(self):
         # T_0
         added = []
-        added.append(Location(code=u'INV99'))
-        added.append(Family(family=u'Caricaceae'))
-        added.append(Genus(epithet=u'Carica', family=added[-1]))
-        added.append(Species(epithet=u'papaya', genus=added[-1]))
-        added.append(Accession(code=u'010101', species=added[-1]))
-        added.append(Plant(code=u'1', accession=added[-1], quantity=1, location=added[0]))
+        added.append(Location(code='INV99'))
+        added.append(Family(family='Caricaceae'))
+        added.append(Genus(epithet='Carica', family=added[-1]))
+        added.append(Species(epithet='papaya', genus=added[-1]))
+        added.append(Accession(code='010101', species=added[-1]))
+        added.append(Plant(code='1', accession=added[-1], quantity=1, location=added[0]))
         sp, acc, plant = added[-3:]
         self.session.add_all(added)
         self.session.flush()
@@ -1539,18 +1539,18 @@
         self.session.flush()
 
         # effect
-        print self.invoked
+        print(self.invoked)
         self.assertFalse('message_details_dialog' in
                          [f for (f, m) in self.invoked])
-        self.assertTrue(('message_dialog', u'1 plants depend on this accession: <b>010101.1</b>\n\n'
+        self.assertTrue(('message_dialog', '1 plants depend on this accession: <b>010101.1</b>\n\n'
                          'You cannot remove an accession with plants.')
                         in self.invoked)
         q = self.session.query(Accession).filter_by(species=sp)
         matching = q.all()
-        self.assertEquals(matching, [acc])
+        self.assertEqual(matching, [acc])
         q = self.session.query(Plant).filter_by(accession=acc)
         matching = q.all()
-        self.assertEquals(matching, [plant])
+        self.assertEqual(matching, [plant])
 
 
 class VerificationTests(GardenTestCase):
@@ -1565,20 +1565,20 @@
         super(VerificationTests, self).tearDown()
 
     def test_verifications(self):
-        acc = self.create(Accession, species=self.species, code=u'1')
+        acc = self.create(Accession, species=self.species, code='1')
         self.session.add(acc)
         self.session.commit()
 
         ver = Verification()
-        ver.verifier = u'me'
+        ver.verifier = 'me'
         ver.date = datetime.date.today()
         ver.level = 1
         ver.species = acc.species
         ver.prev_species = acc.species
         acc.verifications.append(ver)
         self.session.commit()
-        self.assert_(ver in acc.verifications)
-        self.assert_(ver in self.session)
+        self.assertTrue(ver in acc.verifications)
+        self.assertTrue(ver in self.session)
 
 
 class LocationTests(GardenTestCase):
@@ -1593,7 +1593,7 @@
         super(LocationTests, self).tearDown()
 
     def test_location_editor(self):
-        loc = self.create(Location, name=u'some site', code=u'STE')
+        loc = self.create(Location, name='some site', code='STE')
         self.session.commit()
         editor = LocationEditor(model=loc)
         update_gui()
@@ -1601,8 +1601,8 @@
 
         # test that the accept buttons are NOT sensitive since nothing
         # has changed and that the text entries and model are the same
-        self.assertEquals(widgets.loc_name_entry.get_text(), loc.name)
-        self.assertEquals(widgets.loc_code_entry.get_text(), loc.code)
+        self.assertEqual(widgets.loc_name_entry.get_text(), loc.name)
+        self.assertEqual(widgets.loc_code_entry.get_text(), loc.code)
         self.assertFalse(widgets.loc_ok_button.props.sensitive)
         self.assertFalse(widgets.loc_next_button.props.sensitive)
 
@@ -1631,7 +1631,7 @@
         self.assertFalse(widgets.loc_next_button.props.sensitive)
 
         # commit the changes and cleanup
-        editor.model.name = editor.model.code = u'asda'
+        editor.model.name = editor.model.code = 'asda'
         editor.handle_response(Gtk.ResponseType.OK)
         editor.session.close()
         editor.presenter.cleanup()
@@ -1639,16 +1639,16 @@
 
     def test_deleting_editor(self):
         raise SkipTest('TODO: what is this garbage collection testing?')
-        loc = self.create(Location, name=u'some site', code=u'STE')
+        loc = self.create(Location, name='some site', code='STE')
         editor = LocationEditor(model=loc)
 
         del editor
-        self.assertEquals(utils.gc_objects_by_type('LocationEditor'), [],
+        self.assertEqual(utils.gc_objects_by_type('LocationEditor'), [],
                           'LocationEditor not deleted')
-        self.assertEquals(
+        self.assertEqual(
             utils.gc_objects_by_type('LocationEditorPresenter'), [],
             'LocationEditorPresenter not deleted')
-        self.assertEquals(utils.gc_objects_by_type('LocationEditorView'), [],
+        self.assertEqual(utils.gc_objects_by_type('LocationEditorView'), [],
                           'LocationEditorView not deleted')
 
 
@@ -1667,14 +1667,14 @@
         """Test Collection.accession property
 
         """
-        acc = Accession(code=u'2001.0002', species=self.species)
+        acc = Accession(code='2001.0002', species=self.species)
         acc.source = Source()
-        collection = Collection(locale=u'some location')
+        collection = Collection(locale='some location')
         acc.source.collection = collection
-        self.assertEquals(
+        self.assertEqual(
             collection.search_view_markup_pair(),
-            (u'2001.0002 - <small>Echinocactus grusonii</small>',
-             u'Collection at some location'))
+            ('2001.0002 - <small>Echinocactus grusonii</small>',
+             'Collection at some location'))
 
 
 class InstitutionTests(GardenTestCase):
@@ -1685,7 +1685,7 @@
         o.write()
         fields = self.session.query(BaubleMeta).filter(
             utils.ilike(BaubleMeta.name, 'inst_%')).all()
-        self.assertEquals(len(fields), 13)  # 13 props define the institution
+        self.assertEqual(len(fields), 13)  # 13 props define the institution
 
     def test_init__one_institution(self):
         o = Institution()
@@ -1695,18 +1695,18 @@
         o.write()
         fieldObjects = self.session.query(BaubleMeta).filter(
             utils.ilike(BaubleMeta.name, 'inst_%')).all()
-        self.assertEquals(len(fieldObjects), 13)
+        self.assertEqual(len(fieldObjects), 13)
 
     def test_init__always_initialized(self):
         o = Institution()
         o.name = 'Fictive'
         o.write()
         u = Institution()
-        self.assertEquals(u.name, u'Fictive')
+        self.assertEqual(u.name, 'Fictive')
         o.name = 'Ghini'
         o.write()
         u = Institution()
-        self.assertEquals(u.name, u'Ghini')
+        self.assertEqual(u.name, 'Ghini')
 
     def test_init__has_all_attributes(self):
         o = Institution()
@@ -1724,9 +1724,9 @@
         fields = dict((i.name[5:], i.value)
                       for i in fieldObjects
                       if i.value is not None)
-        self.assertEquals(fields['name'], u'Ghini')
-        self.assertEquals(fields['email'], u'bauble@anche.no')
-        self.assertEquals(len(fields), 2)
+        self.assertEqual(fields['name'], 'Ghini')
+        self.assertEqual(fields['email'], 'bauble@anche.no')
+        self.assertEqual(len(fields), 2)
 
 
 class InstitutionPresenterTests(GardenTestCase):
@@ -1736,7 +1736,7 @@
         view = MockView()
         o = Institution()
         presenter = InstitutionPresenter(o, view)
-        self.assertEquals(presenter.view, view)
+        self.assertEqual(presenter.view, view)
 
     def test_empty_name_is_a_problem(self):
         from bauble.editor import MockView
@@ -1745,7 +1745,7 @@
         o.name = ''
         InstitutionPresenter(o, view)
         self.assertTrue('add_box' in view.invoked)
-        self.assertEquals(len(view.boxes), 1)
+        self.assertEqual(len(view.boxes), 1)
 
     def test_initially_empty_name_then_specified_is_ok(self):
         from bauble.editor import MockView
@@ -1756,8 +1756,8 @@
         presenter.view.widget_set_value('inst_name', 'bauble')
         presenter.on_non_empty_text_entry_changed('inst_name')
         self.assertTrue('remove_box' in view.invoked)
-        self.assertEquals(o.name, 'bauble')
-        self.assertEquals(presenter.view.boxes, set())
+        self.assertEqual(o.name, 'bauble')
+        self.assertEqual(presenter.view.boxes, set())
 
     def test_no_email_means_no_registering(self):
         from bauble.editor import MockView
@@ -1801,7 +1801,7 @@
         o = Institution()
         p = InstitutionPresenter(o, view)
         p.on_inst_register_clicked()
-        print self.handler.messages['bauble.registrations']['info'][0]
+        print(self.handler.messages['bauble.registrations']['info'][0])
         target = [('fax', None), ('address', None), ('name', ''), 
                                   ('contact', None), ('technical_contact', None), ('geo_diameter', None), 
                                   ('abbreviation', None), ('code', None), ('geo_longitude', None), 
@@ -1898,7 +1898,7 @@
         parse = CollectionPresenter._parse_lat_lon
         for data, dec in parse_lat_lon_data:
             result = parse(*data)
-            self.assert_(result == dec, '%s: %s == %s' % (data, result, dec))
+            self.assertTrue(result == dec, '%s: %s == %s' % (data, result, dec))
 
 
 class FromAndToDictTest(GardenTestCase):
@@ -1907,51 +1907,51 @@
 
     def test_add_accession_at_species_rank(self):
         acc = Accession.retrieve_or_create(
-            self.session, {'code': u'010203',
+            self.session, {'code': '010203',
                            'rank': 'species',
-                           'taxon': u'Echinocactus grusonii'})
-        self.assertEquals(acc.species, self.species)
+                           'taxon': 'Echinocactus grusonii'})
+        self.assertEqual(acc.species, self.species)
 
     def test_add_accession_at_genus_rank(self):
         acc = Accession.retrieve_or_create(
-            self.session, {'code': u'010203',
+            self.session, {'code': '010203',
                            'rank': 'genus',
-                           'taxon': u'Echinocactus'})
-        self.assertEquals(acc.species.genus, self.genus)
+                           'taxon': 'Echinocactus'})
+        self.assertEqual(acc.species.genus, self.genus)
 
     def test_add_plant(self):
         acc = Accession.retrieve_or_create(
-            self.session, {'code': u'010203',
+            self.session, {'code': '010203',
                            'rank': 'species',
-                           'taxon': u'Echinocactus grusonii'})
+                           'taxon': 'Echinocactus grusonii'})
         plt = Plant.retrieve_or_create(
-            self.session, {'accession': u'010203',
-                           'code': u'1',
-                           'location': u'wrong one',
+            self.session, {'accession': '010203',
+                           'code': '1',
+                           'location': 'wrong one',
                            'quantity': 1})
-        self.assertEquals(plt.accession, acc)
+        self.assertEqual(plt.accession, acc)
 
     def test_set_create_timestamp_european(self):
         from datetime import datetime
         ## insert an object with a timestamp
         Location.retrieve_or_create(
-            self.session, {'code': u'1',
+            self.session, {'code': '1',
                            '_created': '10/12/2001'})
         ## retrieve same object from other session
         session = db.Session()
-        loc = Location.retrieve_or_create(session, {'code': u'1', })
-        self.assertEquals(loc._created, datetime(2001, 12, 10))
+        loc = Location.retrieve_or_create(session, {'code': '1', })
+        self.assertEqual(loc._created, datetime(2001, 12, 10))
 
     def test_set_create_timestamp_iso8601(self):
         from datetime import datetime
         ## insert an object with a timestamp
         Location.retrieve_or_create(
-            self.session, {'code': u'1',
+            self.session, {'code': '1',
                            '_created': '2001-12-10'})
         ## retrieve same object from other session
         session = db.Session()
-        loc = Location.retrieve_or_create(session, {'code': u'1', })
-        self.assertEquals(loc._created, datetime(2001, 12, 10))
+        loc = Location.retrieve_or_create(session, {'code': '1', })
+        self.assertEqual(loc._created, datetime(2001, 12, 10))
 
 
 class FromAndToDict_create_update_test(GardenTestCase):
@@ -1959,95 +1959,95 @@
 
     def setUp(self):
         GardenTestCase.setUp(self)
-        acc = Accession(species=self.species, code=u'010203')
-        loc = Location(code=u'123')
-        loc2 = Location(code=u'213')
-        plt = Plant(accession=acc, code=u'1', quantity=1, location=loc)
+        acc = Accession(species=self.species, code='010203')
+        loc = Location(code='123')
+        loc2 = Location(code='213')
+        plt = Plant(accession=acc, code='1', quantity=1, location=loc)
         self.session.add_all([acc, loc, loc2, plt])
         self.session.commit()
 
     def test_accession_nocreate_noupdate_noexisting(self):
         # do not create if not existing
         acc = Accession.retrieve_or_create(
-            self.session, {'code': u'030201',
+            self.session, {'code': '030201',
                            'rank': 'species',
-                           'taxon': u'Echinocactus texelensis'},
+                           'taxon': 'Echinocactus texelensis'},
             create=False)
-        self.assertEquals(acc, None)
+        self.assertEqual(acc, None)
 
     def test_accession_nocreate_noupdateeq_existing(self):
         ## retrieve same object, we only give the keys
         acc = Accession.retrieve_or_create(
-            self.session, {'code': u'010203'},
+            self.session, {'code': '010203'},
             create=False, update=False)
         self.assertTrue(acc is not None)
-        self.assertEquals(acc.species, self.species)
+        self.assertEqual(acc.species, self.species)
 
     def test_accession_nocreate_noupdatediff_existing(self):
         ## do not update object with new data
         acc = Accession.retrieve_or_create(
-            self.session, {'code': u'010203',
+            self.session, {'code': '010203',
                            'rank': 'species',
-                           'taxon': u'Echinocactus texelensis'},
+                           'taxon': 'Echinocactus texelensis'},
             create=False, update=False)
-        self.assertEquals(acc.species, self.species)
+        self.assertEqual(acc.species, self.species)
 
     def test_accession_nocreate_updatediff_existing(self):
         ## update object in self.session
         acc = Accession.retrieve_or_create(
-            self.session, {'code': u'010203',
+            self.session, {'code': '010203',
                            'rank': 'species',
-                           'taxon': u'Echinocactus texelensis'},
+                           'taxon': 'Echinocactus texelensis'},
             create=False, update=True)
-        self.assertEquals(acc.species, self.sp2)
+        self.assertEqual(acc.species, self.sp2)
 
     def test_plant_nocreate_noupdate_noexisting(self):
         # do not create if not existing
         plt = Plant.retrieve_or_create(
-            self.session, {'accession': u'010203',
-                           'code': u'2',
+            self.session, {'accession': '010203',
+                           'code': '2',
                            'quantity': 1,
-                           'location': u'123'},
+                           'location': '123'},
             create=False)
-        self.assertEquals(plt, None)
+        self.assertEqual(plt, None)
 
     def test_plant_nocreate_noupdateeq_existing(self):
         ## retrieve same object, we only give the keys
         plt = Plant.retrieve_or_create(
-            self.session, {'accession': u'010203',
-                           'code': u'1'},
+            self.session, {'accession': '010203',
+                           'code': '1'},
             create=False, update=False)
         self.assertTrue(plt is not None)
-        self.assertEquals(plt.quantity, 1)
+        self.assertEqual(plt.quantity, 1)
 
     def test_plant_nocreate_noupdatediff_existing(self):
         ## do not update object with new data
         plt = Plant.retrieve_or_create(
-            self.session, {'accession': u'010203',
-                           'code': u'1',
+            self.session, {'accession': '010203',
+                           'code': '1',
                            'quantity': 3},
             create=False, update=False)
         self.assertTrue(plt is not None)
-        self.assertEquals(plt.quantity, 1)
+        self.assertEqual(plt.quantity, 1)
 
     def test_plant_nocreate_updatediff_existing(self):
         ## update object in self.session
         plt = Plant.retrieve_or_create(
-            self.session, {'accession': u'010203',
-                           'code': u'1',
+            self.session, {'accession': '010203',
+                           'code': '1',
                            'quantity': 3},
             create=False, update=True)
         self.assertTrue(plt is not None)
-        self.assertEquals(plt.quantity, 3)
-        self.assertEquals(plt.location.code, '123')
+        self.assertEqual(plt.quantity, 3)
+        self.assertEqual(plt.location.code, '123')
         plt = Plant.retrieve_or_create(
-            self.session, {'accession': u'010203',
-                           'code': u'1',
-                           'location': u'213'},
+            self.session, {'accession': '010203',
+                           'code': '1',
+                           'location': '213'},
             create=False, update=True)
         self.assertTrue(plt is not None)
         self.assertTrue(plt.location is not None)
-        self.assertEquals(plt.location.code, u'213')
+        self.assertEqual(plt.location.code, '213')
 
 
 class AccessionNotesSerializeTest(GardenTestCase):
@@ -2056,13 +2056,13 @@
 
     def setUp(self):
         GardenTestCase.setUp(self)
-        acc = Accession(species=self.species, code=u'010203')
+        acc = Accession(species=self.species, code='010203')
         self.session.add(acc)
         self.session.flush()
-        note1 = AccessionNote(accession=acc, category=u'factura',
-                              date='2014-01-01', note=u'992288')
-        note2 = AccessionNote(accession=acc, category=u'foto',
-                              date='2014-01-01', note=u'file://')
+        note1 = AccessionNote(accession=acc, category='factura',
+                              date='2014-01-01', note='992288')
+        note2 = AccessionNote(accession=acc, category='foto',
+                              date='2014-01-01', note='file://')
         self.session.add_all([note1, note2])
         self.session.commit()
 
@@ -2070,8 +2070,8 @@
         # do not create if not existing
         obj = AccessionNote.retrieve_or_create(
             self.session, {'object': 'accession_note',
-                           'accession': u'010203',
-                           'category': u'newcat',
+                           'accession': '010203',
+                           'category': 'newcat',
                            'date': '2014-01-01',
                            },
             create=False)
@@ -2081,39 +2081,39 @@
         ## retrieve same object, we only give the keys
         obj = AccessionNote.retrieve_or_create(
             self.session, {'object': 'accession_note',
-                           'accession': u'010203',
-                           'category': u'foto',
+                           'accession': '010203',
+                           'category': 'foto',
                            'date': '2014-01-01',
                            },
             create=False)
         self.assertTrue(obj is not None)
-        self.assertEquals(obj.note, u"file://")
+        self.assertEqual(obj.note, "file://")
 
     def test_accession_note_nocreate_noupdatediff_existing(self):
         ## do not update object with new data
         obj = AccessionNote.retrieve_or_create(
             self.session, {'object': 'accession_note',
-                           'accession': u'010203',
-                           'category': u'foto',
+                           'accession': '010203',
+                           'category': 'foto',
                            'date': '2014-01-01',
-                           'note': u'url://'
+                           'note': 'url://'
                            },
             create=False, update=False)
         self.assertTrue(obj is not None)
-        self.assertEquals(obj.note, u"file://")
+        self.assertEqual(obj.note, "file://")
 
     def test_accession_note_nocreate_updatediff_existing(self):
         ## update object in self.session
         obj = AccessionNote.retrieve_or_create(
             self.session, {'object': 'accession_note',
-                           'accession': u'010203',
-                           'category': u'foto',
+                           'accession': '010203',
+                           'category': 'foto',
                            'date': '2014-01-01',
-                           'note': u'url://'
+                           'note': 'url://'
                            },
             create=False, update=True)
         self.assertTrue(obj is not None)
-        self.assertEquals(obj.note, u"url://")
+        self.assertEqual(obj.note, "url://")
 
 import bauble.search as search
 
@@ -2130,20 +2130,20 @@
         mapper_search = search.get_strategy('PlantSearch')
 
         results = mapper_search.search('1.1.1', self.session)
-        self.assertEquals(len(results), 1)
-        self.assertEquals(self.handler.messages['bauble.plugins.garden.plant']['debug'][0],
+        self.assertEqual(len(results), 1)
+        self.assertEqual(self.handler.messages['bauble.plugins.garden.plant']['debug'][0],
             'text is not quoted, should strategy apply?')
         p = results.pop()
         ex = self.session.query(Plant).filter(Plant.id == 1).first()
         self.assertEqual(p, ex)
         results = mapper_search.search('1.2.1', self.session)
         logger.debug(results)
-        self.assertEquals(len(results), 1)
+        self.assertEqual(len(results), 1)
         p = results.pop()
         ex = self.session.query(Plant).filter(Plant.id == 2).first()
         self.assertEqual(p, ex)
         results = mapper_search.search('1.2.2', self.session)
-        self.assertEquals(len(results), 1)
+        self.assertEqual(len(results), 1)
         p = results.pop()
         ex = self.session.query(Plant).filter(Plant.id == 3).first()
         self.assertEqual(p, ex)
@@ -2152,18 +2152,18 @@
         mapper_search = search.get_strategy('PlantSearch')
 
         results = mapper_search.search('"1.1.1"', self.session)
-        self.assertEquals(len(results), 1)
+        self.assertEqual(len(results), 1)
         p = results.pop()
         ex = self.session.query(Plant).filter(Plant.id == 1).first()
         self.assertEqual(p, ex)
         results = mapper_search.search("'1.2.1'", self.session)
         logger.debug(results)
-        self.assertEquals(len(results), 1)
+        self.assertEqual(len(results), 1)
         p = results.pop()
         ex = self.session.query(Plant).filter(Plant.id == 2).first()
         self.assertEqual(p, ex)
         results = mapper_search.search('\'1.2.2\'', self.session)
-        self.assertEquals(len(results), 1)
+        self.assertEqual(len(results), 1)
         p = results.pop()
         ex = self.session.query(Plant).filter(Plant.id == 3).first()
         self.assertEqual(p, ex)
@@ -2172,27 +2172,27 @@
         mapper_search = search.get_strategy('PlantSearch')
 
         results = mapper_search.search('1.11', self.session)
-        self.assertEquals(len(results), 0)
-        self.assertEquals(self.handler.messages['bauble.plugins.garden.plant']['debug'], [
+        self.assertEqual(len(results), 0)
+        self.assertEqual(self.handler.messages['bauble.plugins.garden.plant']['debug'], [
             'text is not quoted, should strategy apply?', 'ac: 1, pl: 11'])
         self.handler.reset()
         results = mapper_search.search("'121'", self.session)
-        self.assertEquals(len(results), 0)
-        self.assertEquals(self.handler.messages['bauble.plugins.garden.plant']['debug'], [
+        self.assertEqual(len(results), 0)
+        self.assertEqual(self.handler.messages['bauble.plugins.garden.plant']['debug'], [
             "delimiter not found, can't split the code"])
 
     def test_searchbyaccessioncode(self):
         mapper_search = search.get_strategy('MapperSearch')
 
         results = mapper_search.search('2001.1', self.session)
-        self.assertEquals(len(results), 1)
+        self.assertEqual(len(results), 1)
         a = results.pop()
         expect = self.session.query(Accession).filter(
             Accession.id == 1).first()
         logger.debug("%s, %s" % (a, expect))
         self.assertEqual(a, expect)
         results = mapper_search.search('2001.2', self.session)
-        self.assertEquals(len(results), 1)
+        self.assertEqual(len(results), 1)
         a = results.pop()
         expect = self.session.query(Accession).filter(
             Accession.id == 2).first()
@@ -2202,17 +2202,17 @@
     def test_plant_from_dict(self):
         p = Plant.retrieve_or_create(
             self.session, {'object': 'plant',
-                           'accession': u'2001.1',
-                           'code': u'1'},
+                           'accession': '2001.1',
+                           'code': '1'},
             create=False)
         self.assertFalse(p is None)
 
     def test_plant_note_from_dict(self):
         p = PlantNote.retrieve_or_create(
             self.session, {'object': 'plant_note',
-                           'plant': u'2001.1.1',
-                           'note': u'1',
-                           'category': u'RBW'},
+                           'plant': '2001.1.1',
+                           'note': '1',
+                           'category': 'RBW'},
             create=True)
         self.assertFalse(p is None)
 
@@ -2223,132 +2223,132 @@
 class AccessionGetNextCode(GardenTestCase):
     def test_get_next_code_first_this_year(self):
         this_year = str(datetime.date.today().year)
-        self.assertEquals(Accession.get_next_code(), this_year + '.0001')
+        self.assertEqual(Accession.get_next_code(), this_year + '.0001')
 
     def test_get_next_code_second_this_year(self):
         this_year = str(datetime.date.today().year)
         this_code = Accession.get_next_code()
-        acc = Accession(species=self.species, code=unicode(this_code))
+        acc = Accession(species=self.species, code=str(this_code))
         self.session.add(acc)
         self.session.flush()
-        self.assertEquals(Accession.get_next_code(), this_year + '.0002')
+        self.assertEqual(Accession.get_next_code(), this_year + '.0002')
 
     def test_get_next_code_absolute_beginning(self):
         this_year = str(datetime.date.today().year)
         self.session.query(Accession).delete()
         self.session.flush()
-        self.assertEquals(Accession.get_next_code(), this_year + '.0001')
+        self.assertEqual(Accession.get_next_code(), this_year + '.0001')
 
     def test_get_next_code_next_with_hole(self):
         this_year = str(datetime.date.today().year)
-        this_code = this_year + u'.0050'
+        this_code = this_year + '.0050'
         acc = Accession(species=self.species, code=this_code)
         self.session.add(acc)
         self.session.flush()
-        self.assertEquals(Accession.get_next_code(), this_year + '.0051')
+        self.assertEqual(Accession.get_next_code(), this_year + '.0051')
 
     def test_get_next_code_alter_format_first(self):
         this_year = str(datetime.date.today().year)
-        this_code = this_year + u'.0050'
+        this_code = this_year + '.0050'
         orig = Accession.code_format
         acc = Accession(species=self.species, code=this_code)
         self.session.add(acc)
         self.session.flush()
-        Accession.code_format = u'H.###'
-        self.assertEquals(Accession.get_next_code(), 'H.001')
-        Accession.code_format = u'SD.###'
-        self.assertEquals(Accession.get_next_code(), 'SD.001')
+        Accession.code_format = 'H.###'
+        self.assertEqual(Accession.get_next_code(), 'H.001')
+        Accession.code_format = 'SD.###'
+        self.assertEqual(Accession.get_next_code(), 'SD.001')
         Accession.code_format = orig
 
     def test_get_next_code_alter_format_next(self):
         orig = Accession.code_format
-        acc = Accession(species=self.species, code=u'H.012')
+        acc = Accession(species=self.species, code='H.012')
         self.session.add(acc)
-        acc = Accession(species=self.species, code=u'SD.002')
+        acc = Accession(species=self.species, code='SD.002')
         self.session.add(acc)
         self.session.flush()
-        Accession.code_format = u'H.###'
-        self.assertEquals(Accession.get_next_code(), 'H.013')
-        Accession.code_format = u'SD.###'
-        self.assertEquals(Accession.get_next_code(), 'SD.003')
+        Accession.code_format = 'H.###'
+        self.assertEqual(Accession.get_next_code(), 'H.013')
+        Accession.code_format = 'SD.###'
+        self.assertEqual(Accession.get_next_code(), 'SD.003')
         Accession.code_format = orig
 
     def test_get_next_code_alter_format_first_specified(self):
         this_year = str(datetime.date.today().year)
-        this_code = this_year + u'.0050'
+        this_code = this_year + '.0050'
         acc = Accession(species=self.species, code=this_code)
         self.session.add(acc)
         self.session.flush()
-        self.assertEquals(Accession.get_next_code(u'H.###'), 'H.001')
-        self.assertEquals(Accession.get_next_code(u'SD.###'), 'SD.001')
+        self.assertEqual(Accession.get_next_code('H.###'), 'H.001')
+        self.assertEqual(Accession.get_next_code('SD.###'), 'SD.001')
 
     def test_get_next_code_alter_format_next_specified(self):
-        acc = Accession(species=self.species, code=u'H.012')
+        acc = Accession(species=self.species, code='H.012')
         self.session.add(acc)
-        acc = Accession(species=self.species, code=u'SD.002')
+        acc = Accession(species=self.species, code='SD.002')
         self.session.add(acc)
         self.session.flush()
-        self.assertEquals(Accession.get_next_code(u'H.###'), 'H.013')
-        self.assertEquals(Accession.get_next_code(u'SD.###'), 'SD.003')
+        self.assertEqual(Accession.get_next_code('H.###'), 'H.013')
+        self.assertEqual(Accession.get_next_code('SD.###'), 'SD.003')
 
     def test_get_next_code_plain_numeric_zero(self):
-        self.assertEquals(Accession.get_next_code(u'#####'), '00001')
+        self.assertEqual(Accession.get_next_code('#####'), '00001')
 
     def test_get_next_code_plain_numeric_next(self):
-        acc = Accession(species=self.species, code=u'00012')
+        acc = Accession(species=self.species, code='00012')
         self.session.add(acc)
         self.session.flush()
-        self.assertEquals(Accession.get_next_code(u'#####'), '00013')
+        self.assertEqual(Accession.get_next_code('#####'), '00013')
 
     def test_get_next_code_plain_numeric_next_multiple(self):
-        acc = Accession(species=self.species, code=u'00012')
-        ac2 = Accession(species=self.species, code=u'H.0987')
-        ac3 = Accession(species=self.species, code=u'2112.0019')
+        acc = Accession(species=self.species, code='00012')
+        ac2 = Accession(species=self.species, code='H.0987')
+        ac3 = Accession(species=self.species, code='2112.0019')
         self.session.add_all([acc, ac2, ac3])
         self.session.flush()
-        self.assertEquals(Accession.get_next_code(u'#####'), '00013')
+        self.assertEqual(Accession.get_next_code('#####'), '00013')
 
     def test_get_next_code_fixed(self):
-        acc = Accession(species=self.species, code=u'00012')
-        ac2 = Accession(species=self.species, code=u'H.0987')
-        ac3 = Accession(species=self.species, code=u'2112.0019')
+        acc = Accession(species=self.species, code='00012')
+        ac2 = Accession(species=self.species, code='H.0987')
+        ac3 = Accession(species=self.species, code='2112.0019')
         self.session.add_all([acc, ac2, ac3])
         self.session.flush()
-        self.assertEquals(Accession.get_next_code(u'2112.003'), '2112.003')
-        self.assertEquals(Accession.get_next_code(u'2112.0003'), '2112.0003')
-        self.assertEquals(Accession.get_next_code(u'00003'), '00003')
-        self.assertEquals(Accession.get_next_code(u'H.0003'), 'H.0003')
+        self.assertEqual(Accession.get_next_code('2112.003'), '2112.003')
+        self.assertEqual(Accession.get_next_code('2112.0003'), '2112.0003')
+        self.assertEqual(Accession.get_next_code('00003'), '00003')
+        self.assertEqual(Accession.get_next_code('H.0003'), 'H.0003')
 
     def test_get_next_code_previous_year_subst(self):
         this_year = datetime.date.today().year
         last_year = this_year - 1
-        acc = Accession(species=self.species, code=u'%s.0012' % last_year)
-        ac2 = Accession(species=self.species, code=u'%s.0987' % this_year)
+        acc = Accession(species=self.species, code='%s.0012' % last_year)
+        ac2 = Accession(species=self.species, code='%s.0987' % this_year)
         self.session.add_all([acc, ac2])
         self.session.flush()
-        self.assertEquals(Accession.get_next_code(u'%{Y-1}.####')[5:], '0013')
-        self.assertEquals(Accession.get_next_code(u'%Y.####')[5:], '0988')
+        self.assertEqual(Accession.get_next_code('%{Y-1}.####')[5:], '0013')
+        self.assertEqual(Accession.get_next_code('%Y.####')[5:], '0988')
 
 
 class GlobalFunctionsTests(GardenTestCase):
 
     def test_mergevalues_equal(self):
         'if the values are equal, return it'
-        self.assertEquals(mergevalues('1', '1', '%s|%s'), '1')
+        self.assertEqual(mergevalues('1', '1', '%s|%s'), '1')
 
     def test_mergevalues_conflict(self):
         'if they conflict, return both'
-        self.assertEquals(mergevalues('2', '1', '%s|%s'), '2|1')
+        self.assertEqual(mergevalues('2', '1', '%s|%s'), '2|1')
 
     def test_mergevalues_one_empty(self):
         'if one is empty, return the non empty one'
-        self.assertEquals(mergevalues('2', None, '%s|%s'), '2')
-        self.assertEquals(mergevalues(None, '2', '%s|%s'), '2')
-        self.assertEquals(mergevalues('2', '', '%s|%s'), '2')
+        self.assertEqual(mergevalues('2', None, '%s|%s'), '2')
+        self.assertEqual(mergevalues(None, '2', '%s|%s'), '2')
+        self.assertEqual(mergevalues('2', '', '%s|%s'), '2')
 
     def test_mergevalues_both_empty(self):
         'if both are empty, return the empty string'
-        self.assertEquals(mergevalues(None, None, '%s|%s'), '')
+        self.assertEqual(mergevalues(None, None, '%s|%s'), '')
 
 
 class ContactTests(GardenTestCase):
@@ -2362,8 +2362,8 @@
         # being referred to as the source for an accession.  However, this
         # just works.  As long as the trouble is theoretic we accept it.
 
-        acc = self.create(Accession, species=self.species, code=u'2001.0001')
-        contact = Contact(name=u'name')
+        acc = self.create(Accession, species=self.species, code='2001.0001')
+        contact = Contact(name='name')
         source = Source()
         source.source_detail = contact
         acc.source = source
@@ -2372,19 +2372,19 @@
 
         # we can delete a contact even if used as source
         session = db.Session()
-        contact = session.query(Contact).filter_by(name=u'name').one()
+        contact = session.query(Contact).filter_by(name='name').one()
         session.delete(contact)
         session.commit()
 
         # the source field in the accession got removed
         session = db.Session()
-        acc = session.query(Accession).filter_by(code=u'2001.0001').one()
-        self.assertEquals(acc.source, None)
+        acc = session.query(Accession).filter_by(code='2001.0001').one()
+        self.assertEqual(acc.source, None)
 
     def test_representation_of_contact(self):
-        contact = Contact(name=u'name')
-        self.assertEquals("%s" % contact, u'name')
-        self.assertEquals(contact.search_view_markup_pair(), (u'name', u''))
+        contact = Contact(name='name')
+        self.assertEqual("%s" % contact, 'name')
+        self.assertEqual(contact.search_view_markup_pair(), ('name', ''))
 
 
 class ContactPresenterTests(BaubleTestCase):
@@ -2394,7 +2394,7 @@
         view = MockView()
         m = Contact()
         presenter = ContactPresenter(m, view)
-        self.assertEquals(presenter.view, view)
+        self.assertEqual(presenter.view, view)
         self.assertTrue(presenter.session is not None)
         # model might have been re-instantiated to fit presenter.session
 
@@ -2405,19 +2405,19 @@
         s = db.Session()
         s.add(m)
         presenter = ContactPresenter(m, view)
-        self.assertEquals(presenter.view, view)
+        self.assertEqual(presenter.view, view)
         self.assertTrue(presenter.session is not None)
         # m belongs to s; presenter.model is the same object
-        self.assertEquals(id(presenter.model), id(m))
+        self.assertEqual(id(presenter.model), id(m))
 
     def test_liststore_is_initialized(self):
         from bauble.editor import MockView
         view = MockView(combos={'source_type_combo': []})
         m = Contact(name='name', source_type='Expedition', description='desc')
         presenter = ContactPresenter(m, view)
-        self.assertEquals(presenter.view.widget_get_text('source_name_entry'), 'name')
-        self.assertEquals(presenter.view.widget_get_text('source_type_combo'), 'Expedition')
-        self.assertEquals(presenter.view.widget_get_text('source_desc_textview'), 'desc')
+        self.assertEqual(presenter.view.widget_get_text('source_name_entry'), 'name')
+        self.assertEqual(presenter.view.widget_get_text('source_type_combo'), 'Expedition')
+        self.assertEqual(presenter.view.widget_get_text('source_desc_textview'), 'desc')
 
 
 import bauble.search
@@ -2455,21 +2455,21 @@
         cr = cn.cursor()
         cr.execute('select * from "species"')
         content = cr.fetchall()
-        self.assertEquals(len(content), 0)
+        self.assertEqual(len(content), 0)
         cr.execute('select * from "accession"')
         content = cr.fetchall()
-        self.assertEquals(len(content), 0)
+        self.assertEqual(len(content), 0)
         cr.execute('select * from "plant"')
         content = cr.fetchall()
-        self.assertEquals(len(content), 0)
+        self.assertEqual(len(content), 0)
 
     def test_export_two_plants(self):
         GardenTestCase.setUp(self)
-        acc = Accession(species=self.species, code=u'010203')
-        loc = Location(code=u'123')
-        loc2 = Location(code=u'213')
-        plt1 = Plant(accession=acc, code=u'1', quantity=1, location=loc)
-        plt2 = Plant(accession=acc, code=u'2', quantity=1, location=loc)
+        acc = Accession(species=self.species, code='010203')
+        loc = Location(code='123')
+        loc2 = Location(code='213')
+        plt1 = Plant(accession=acc, code='1', quantity=1, location=loc)
+        plt2 = Plant(accession=acc, code='2', quantity=1, location=loc)
         self.session.add_all([acc, loc, loc2, plt1, plt2])
         self.session.commit()
         import tempfile
@@ -2485,10 +2485,10 @@
         cr = cn.cursor()
         cr.execute('select * from "species"')
         content = cr.fetchall()
-        self.assertEquals(len(content), 1)
+        self.assertEqual(len(content), 1)
         cr.execute('select * from "accession"')
         content = cr.fetchall()
-        self.assertEquals(len(content), 1)
+        self.assertEqual(len(content), 1)
         cr.execute('select * from "plant"')
         content = cr.fetchall()
-        self.assertEquals(len(content), 2)
+        self.assertEqual(len(content), 2)
--- ./bauble/plugins/garden/test_import_pocket_log.py	(original)
+++ ./bauble/plugins/garden/test_import_pocket_log.py	(refactored)
@@ -19,8 +19,8 @@
 # You should have received a copy of the GNU General Public License
 # along with ghini.desktop. If not, see <http://www.gnu.org/licenses/>.
 #
-from __future__ import print_function
-from __future__ import unicode_literals
+
+
 
 import os
 import datetime
@@ -47,16 +47,16 @@
     def test_importing_nothing(self):
         # prepare T0
         # test T0
-        self.assertEquals(self.session.query(Accession).first(), None)
-        self.assertEquals(self.session.query(Plant).first(), None)
+        self.assertEqual(self.session.query(Accession).first(), None)
+        self.assertEqual(self.session.query(Plant).first(), None)
 
         # action
         line = '20180905_170619 :PENDING_EDIT:  : Eugenia stipitata : 1 : (@;@)'
         process_line(self.session, line, 1536845535)
 
         # T1
-        self.assertEquals(self.session.query(Accession).first(), None)
-        self.assertEquals(self.session.query(Plant).first(), None)
+        self.assertEqual(self.session.query(Accession).first(), None)
+        self.assertEqual(self.session.query(Plant).first(), None)
 
     def test_completely_identified_existing_species(self):
         # prepare T0
@@ -67,22 +67,22 @@
         self.session.commit()
         # test T0
         a = self.session.query(Accession).filter_by(code='2018.0001').first()
-        self.assertEquals(a, None)
+        self.assertEqual(a, None)
         eugenia = self.session.query(Genus).filter_by(epithet='Eugenia').first()
-        self.assertNotEquals(eugenia, None)
+        self.assertNotEqual(eugenia, None)
         s = self.session.query(Species).filter_by(genus=eugenia, epithet='stipitata').first()
-        self.assertNotEquals(s, None)
+        self.assertNotEqual(s, None)
         # action
         line = '20180905_170619 :PENDING_EDIT: 2018.0001.1 : Eugenia stipitata : 1 : (@;@)'
         process_line(self.session, line, 1536845535)
         # T1
         a = self.session.query(Accession).filter_by(code='2018.0001').first()
-        self.assertNotEquals(a, None)
-        self.assertEquals(a.species.genus.epithet, 'Eugenia')
-        self.assertEquals(a.species.epithet, 'stipitata')
-        self.assertEquals(a.quantity_recvd, 1)
-        self.assertEquals(len(a.plants), 1)
-        self.assertEquals(a.plants[0].quantity, 1)
+        self.assertNotEqual(a, None)
+        self.assertEqual(a.species.genus.epithet, 'Eugenia')
+        self.assertEqual(a.species.epithet, 'stipitata')
+        self.assertEqual(a.quantity_recvd, 1)
+        self.assertEqual(len(a.plants), 1)
+        self.assertEqual(a.plants[0].quantity, 1)
 
     def test_completely_identified_new_species(self):
         # prepare T0
@@ -92,11 +92,11 @@
         self.session.commit()
         # test T0
         a = self.session.query(Accession).filter_by(code='2018.0001').first()
-        self.assertEquals(a, None)
+        self.assertEqual(a, None)
         eugenia = self.session.query(Genus).filter_by(epithet='Eugenia').first()
-        self.assertNotEquals(eugenia, None)
+        self.assertNotEqual(eugenia, None)
         s = self.session.query(Species).filter_by(genus=eugenia, epithet='stipitata').first()
-        self.assertEquals(s, None)
+        self.assertEqual(s, None)
 
         # action
         db.current_user.override('Pasquale')
@@ -106,14 +106,14 @@
 
         # T1
         a = self.session.query(Accession).filter_by(code='2018.0001').first()
-        self.assertNotEquals(a, None)
-        self.assertEquals(a.species.genus.epithet, 'Eugenia')
-        self.assertEquals(a.species.epithet, 'stipitata')
-        self.assertEquals(a.quantity_recvd, 1)
-        self.assertEquals(len(a.plants), 1)
-        self.assertEquals(a.plants[0].quantity, 1)
-        self.assertEquals(len(a.verifications), 1)
-        self.assertEquals(a.verifications[0].verifier, 'Pasquale')
+        self.assertNotEqual(a, None)
+        self.assertEqual(a.species.genus.epithet, 'Eugenia')
+        self.assertEqual(a.species.epithet, 'stipitata')
+        self.assertEqual(a.quantity_recvd, 1)
+        self.assertEqual(len(a.plants), 1)
+        self.assertEqual(a.plants[0].quantity, 1)
+        self.assertEqual(len(a.verifications), 1)
+        self.assertEqual(a.verifications[0].verifier, 'Pasquale')
 
     def test_genus_identified(self):
         # prepare T0
@@ -123,117 +123,117 @@
         self.session.commit()
         # test T0
         a = self.session.query(Accession).filter_by(code='2018.0001').first()
-        self.assertEquals(a, None)
+        self.assertEqual(a, None)
         eugenia = self.session.query(Genus).filter_by(epithet='Eugenia').first()
-        self.assertNotEquals(eugenia, None)
+        self.assertNotEqual(eugenia, None)
         s = self.session.query(Species).filter_by(genus=eugenia, infrasp1='sp', infrasp1_rank=None).first()
-        self.assertEquals(s, None)
+        self.assertEqual(s, None)
         # action
         line = '20180905_170619 :PENDING_EDIT: 2018.0001.1 : Eugenia : 1 : (@;@)'
         process_line(self.session, line, 1536845535)
         # T1
         eugenia_sp = self.session.query(Species).filter_by(genus=eugenia, infrasp1='sp', infrasp1_rank=None).first()
         a = self.session.query(Accession).filter_by(code='2018.0001').first()
-        self.assertNotEquals(a, None)
-        self.assertEquals(a.species.genus, eugenia)
-        self.assertEquals(a.species, eugenia_sp)
-        self.assertEquals(a.quantity_recvd, 1)
-        self.assertEquals(len(a.plants), 1)
-        self.assertEquals(a.plants[0].quantity, 1)
-        self.assertEquals(len(a.verifications), 0)
+        self.assertNotEqual(a, None)
+        self.assertEqual(a.species.genus, eugenia)
+        self.assertEqual(a.species, eugenia_sp)
+        self.assertEqual(a.quantity_recvd, 1)
+        self.assertEqual(len(a.plants), 1)
+        self.assertEqual(a.plants[0].quantity, 1)
+        self.assertEqual(len(a.verifications), 0)
 
     def test_not_identified(self):
         # prepare T0
         # test T0
         a = self.session.query(Accession).filter_by(code='2018.0001').first()
-        self.assertEquals(a, None)
+        self.assertEqual(a, None)
         s = self.session.query(Species).first()
-        self.assertEquals(s, None)
+        self.assertEqual(s, None)
         # action
         line = '20180905_170619 :PENDING_EDIT: 2018.0001.1 :  : 1 : (@;@)'
         process_line(self.session, line, 1536845535)
         self.session.commit()
         # T1
         a = self.session.query(Accession).filter_by(code='2018.0001').first()
-        self.assertNotEquals(a, None)
-        self.assertEquals(a.species.infrasp1, 'sp')
-        self.assertEquals(a.species.genus.epithet, 'Zzd-Plantae')
-        self.assertEquals(a.species.genus.family.epithet, 'Zz-Plantae')
-        self.assertEquals(a.quantity_recvd, 1)
-        self.assertEquals(len(a.plants), 1)
-        self.assertEquals(a.plants[0].quantity, 1)
+        self.assertNotEqual(a, None)
+        self.assertEqual(a.species.infrasp1, 'sp')
+        self.assertEqual(a.species.genus.epithet, 'Zzd-Plantae')
+        self.assertEqual(a.species.genus.family.epithet, 'Zz-Plantae')
+        self.assertEqual(a.quantity_recvd, 1)
+        self.assertEqual(len(a.plants), 1)
+        self.assertEqual(a.plants[0].quantity, 1)
 
     def test_not_identified_no_quantity_defaults_to_one(self):
         # prepare T0
         # test T0
         a = self.session.query(Accession).filter_by(code='2018.0001').first()
-        self.assertEquals(a, None)
+        self.assertEqual(a, None)
         s = self.session.query(Species).first()
-        self.assertEquals(s, None)
+        self.assertEqual(s, None)
         # action
         line = '20180905_170619 :PENDING_EDIT: 2018.0001.1 :  :  : (@;@)'
         process_line(self.session, line, 1536845535)
         self.session.commit()
         # T1
         a = self.session.query(Accession).filter_by(code='2018.0001').first()
-        self.assertNotEquals(a, None)
-        self.assertEquals(a.species.infrasp1, 'sp')
-        self.assertEquals(a.species.genus.epithet, 'Zzd-Plantae')
-        self.assertEquals(a.species.genus.family.epithet, 'Zz-Plantae')
-        self.assertEquals(a.quantity_recvd, 1)
-        self.assertEquals(len(a.plants), 1)
-        self.assertEquals(a.plants[0].quantity, 1)
+        self.assertNotEqual(a, None)
+        self.assertEqual(a.species.infrasp1, 'sp')
+        self.assertEqual(a.species.genus.epithet, 'Zzd-Plantae')
+        self.assertEqual(a.species.genus.family.epithet, 'Zz-Plantae')
+        self.assertEqual(a.quantity_recvd, 1)
+        self.assertEqual(len(a.plants), 1)
+        self.assertEqual(a.plants[0].quantity, 1)
 
     def test_not_identified_some_quantity_not_one(self):
         # prepare T0
         # test T0
         a = self.session.query(Accession).filter_by(code='2018.0001').first()
-        self.assertEquals(a, None)
+        self.assertEqual(a, None)
         s = self.session.query(Species).first()
-        self.assertEquals(s, None)
+        self.assertEqual(s, None)
         # action
         line = '20180905_170619 :PENDING_EDIT: 2018.0001.1 :  : 3 : (@;@)'
         process_line(self.session, line, 1536845535)
         self.session.commit()
         # T1
         a = self.session.query(Accession).filter_by(code='2018.0001').first()
-        self.assertNotEquals(a, None)
-        self.assertEquals(a.species.infrasp1, 'sp')
-        self.assertEquals(a.species.genus.epithet, 'Zzd-Plantae')
-        self.assertEquals(a.species.genus.family.epithet, 'Zz-Plantae')
-        self.assertEquals(a.quantity_recvd, 3)
-        self.assertEquals(len(a.plants), 1)
-        self.assertEquals(a.plants[0].quantity, 3)
+        self.assertNotEqual(a, None)
+        self.assertEqual(a.species.infrasp1, 'sp')
+        self.assertEqual(a.species.genus.epithet, 'Zzd-Plantae')
+        self.assertEqual(a.species.genus.family.epithet, 'Zz-Plantae')
+        self.assertEqual(a.quantity_recvd, 3)
+        self.assertEqual(len(a.plants), 1)
+        self.assertEqual(a.plants[0].quantity, 3)
 
     def test_not_identified_no_plant_code(self):
         # prepare T0
         # test T0
         a = self.session.query(Accession).filter_by(code='2018.0001').first()
-        self.assertEquals(a, None)
+        self.assertEqual(a, None)
         s = self.session.query(Species).first()
-        self.assertEquals(s, None)
+        self.assertEqual(s, None)
         # action
         line = '20180905_170619 :PENDING_EDIT: 2018.0001 :  : 1 : (@;@)'
         process_line(self.session, line, 1536845535)
         self.session.commit()
         # T1
         a = self.session.query(Accession).filter_by(code='2018.0001').first()
-        self.assertNotEquals(a, None)
-        self.assertEquals(a.species.infrasp1, 'sp')
-        self.assertEquals(a.species.genus.epithet, 'Zzd-Plantae')
-        self.assertEquals(a.species.genus.family.epithet, 'Zz-Plantae')
-        self.assertEquals(a.quantity_recvd, 1)
-        self.assertEquals(len(a.plants), 1)
-        self.assertEquals(a.plants[0].quantity, 1)
-        self.assertEquals(len(a.verifications), 0)
+        self.assertNotEqual(a, None)
+        self.assertEqual(a.species.infrasp1, 'sp')
+        self.assertEqual(a.species.genus.epithet, 'Zzd-Plantae')
+        self.assertEqual(a.species.genus.family.epithet, 'Zz-Plantae')
+        self.assertEqual(a.quantity_recvd, 1)
+        self.assertEqual(len(a.plants), 1)
+        self.assertEqual(a.plants[0].quantity, 1)
+        self.assertEqual(len(a.verifications), 0)
 
     def test_not_identified_quito_accession_code(self):
         # prepare T0
         # test T0
         a = self.session.query(Accession).filter_by(code='018901').first()
-        self.assertEquals(a, None)
+        self.assertEqual(a, None)
         s = self.session.query(Species).first()
-        self.assertEquals(s, None)
+        self.assertEqual(s, None)
         # action
         line = '20180905_170619 :PENDING_EDIT: 018901 :  : 1 : (@;@)'
         process_line(self.session, line, 1536845535)
@@ -242,14 +242,14 @@
         self.session.commit()
         # T1
         a = self.session.query(Accession).filter_by(code='018901').first()
-        self.assertNotEquals(a, None)
-        self.assertEquals(a.species.infrasp1, 'sp')
-        self.assertEquals(a.species.genus.epithet, 'Zzd-Plantae')
-        self.assertEquals(a.species.genus.family.epithet, 'Zz-Plantae')
-        self.assertEquals(a.quantity_recvd, 1)
-        self.assertEquals(len(a.plants), 2)
-        self.assertEquals(a.plants[0].quantity, 1)
-        self.assertEquals(a.plants[1].quantity, 2)
+        self.assertNotEqual(a, None)
+        self.assertEqual(a.species.infrasp1, 'sp')
+        self.assertEqual(a.species.genus.epithet, 'Zzd-Plantae')
+        self.assertEqual(a.species.genus.family.epithet, 'Zz-Plantae')
+        self.assertEqual(a.quantity_recvd, 1)
+        self.assertEqual(len(a.plants), 2)
+        self.assertEqual(a.plants[0].quantity, 1)
+        self.assertEqual(a.plants[1].quantity, 2)
 
 
 class ImportExistingPlant(BaubleTestCase):
@@ -272,26 +272,26 @@
         # test T0
         a = self.session.query(Accession).filter_by(code='2018.0001').first()
         p = self.session.query(Plant).filter_by(code='1', accession=a).first()
-        self.assertNotEquals(a, None)
-        self.assertEquals(a.species.epithet, 'stipitata')
-        self.assertEquals(a.species.genus.epithet, 'Eugenia')
-        self.assertEquals(a.species.genus.family.epithet, 'Myrtaceae')
-        self.assertNotEquals(p, None)
-        self.assertEquals(p.location, l)
-        self.assertEquals(p.quantity, 1)
+        self.assertNotEqual(a, None)
+        self.assertEqual(a.species.epithet, 'stipitata')
+        self.assertEqual(a.species.genus.epithet, 'Eugenia')
+        self.assertEqual(a.species.genus.family.epithet, 'Myrtaceae')
+        self.assertNotEqual(p, None)
+        self.assertEqual(p.location, l)
+        self.assertEqual(p.quantity, 1)
         # action
         line = '20180905_170619 :PENDING_EDIT: 2018.0001.1 :  : 3 : (@;@)'
         process_line(self.session, line, 1536845535)
         # test T1
         a = self.session.query(Accession).filter_by(code='2018.0001').first()
         p = self.session.query(Plant).filter_by(code='1', accession=a).first()
-        self.assertNotEquals(a, None)
-        self.assertEquals(a.species.epithet, 'stipitata')
-        self.assertEquals(a.species.genus.epithet, 'Eugenia')
-        self.assertEquals(a.species.genus.family.epithet, 'Myrtaceae')
-        self.assertNotEquals(p, None)
-        self.assertEquals(p.location, l)
-        self.assertEquals(p.quantity, 3)
+        self.assertNotEqual(a, None)
+        self.assertEqual(a.species.epithet, 'stipitata')
+        self.assertEqual(a.species.genus.epithet, 'Eugenia')
+        self.assertEqual(a.species.genus.family.epithet, 'Myrtaceae')
+        self.assertNotEqual(p, None)
+        self.assertEqual(p.location, l)
+        self.assertEqual(p.quantity, 3)
 
     def test_import_identified_overwriting_identification(self):
         # prepare T0
@@ -300,14 +300,14 @@
         p = lookup(self.session, Plant, accession=a, code='1', location=l, quantity=1)
         # test T0
         a = self.session.query(Accession).filter_by(code='2018.0002').first()
-        self.assertNotEquals(a, None)
-        p = self.session.query(Plant).filter_by(code='1', accession=a).first()
-        self.assertNotEquals(p, None)
-        self.assertEquals(a.species.epithet, 'stipitata')
-        self.assertEquals(a.species.genus.epithet, 'Eugenia')
-        self.assertEquals(a.species.genus.family.epithet, 'Myrtaceae')
-        self.assertEquals(p.location, l)
-        self.assertEquals(p.quantity, 1)
+        self.assertNotEqual(a, None)
+        p = self.session.query(Plant).filter_by(code='1', accession=a).first()
+        self.assertNotEqual(p, None)
+        self.assertEqual(a.species.epithet, 'stipitata')
+        self.assertEqual(a.species.genus.epithet, 'Eugenia')
+        self.assertEqual(a.species.genus.family.epithet, 'Myrtaceae')
+        self.assertEqual(p.location, l)
+        self.assertEqual(p.quantity, 1)
         initial_count = len(a.verifications)
 
         # action
@@ -319,15 +319,15 @@
         # test T1
         a = self.session.query(Accession).filter_by(code='2018.0002').first()
         p = self.session.query(Plant).filter_by(code='1', accession=a).first()
-        self.assertNotEquals(a, None)
-        self.assertEquals(a.species.epithet, 'insignis')
-        self.assertEquals(a.species.genus.epithet, 'Eugenia')
-        self.assertEquals(a.species.genus.family.epithet, 'Myrtaceae')
-        self.assertNotEquals(p, None)
-        self.assertEquals(p.location, l)
-        self.assertEquals(p.quantity, 1)
-        self.assertEquals(len(a.verifications), initial_count + 1)
-        self.assertEquals(a.verifications[-1].verifier, 'Pasquale')
+        self.assertNotEqual(a, None)
+        self.assertEqual(a.species.epithet, 'insignis')
+        self.assertEqual(a.species.genus.epithet, 'Eugenia')
+        self.assertEqual(a.species.genus.family.epithet, 'Myrtaceae')
+        self.assertNotEqual(p, None)
+        self.assertEqual(p.location, l)
+        self.assertEqual(p.quantity, 1)
+        self.assertEqual(len(a.verifications), initial_count + 1)
+        self.assertEqual(a.verifications[-1].verifier, 'Pasquale')
 
 class ImportInventoryLines(BaubleTestCase):
     def setUp(self):
@@ -348,7 +348,7 @@
         a = lookup(self.session, Accession, code='2013.1317', species=self.spe)
         p = lookup(self.session, Plant, accession=a, code='1', location=self.loc, quantity=1)
         # test T0
-        self.assertEquals(p.location, self.loc)
+        self.assertEqual(p.location, self.loc)
 
         # action
         line = '20180223_092139 :INVENTORY: A09x : 2013.1317 : 000000000000000'
@@ -358,16 +358,16 @@
         # test T1
         a = self.session.query(Accession).filter_by(code='2013.1317').first()
         p = self.session.query(Plant).filter_by(code='1', accession=a).first()
-        self.assertEquals(p.location.code, 'A09x')
-        self.assertEquals(len(p.notes), 1)
-        self.assertEquals(p.notes[0].category, 'inventory')
-        self.assertEquals(p.notes[0].note, '2018-02-23')
+        self.assertEqual(p.location.code, 'A09x')
+        self.assertEqual(len(p.notes), 1)
+        self.assertEqual(p.notes[0].category, 'inventory')
+        self.assertEqual(p.notes[0].note, '2018-02-23')
 
     def test_inventory_unknown_plant(self):
         # prepare T0
         # test T0
         a = self.session.query(Accession).first()
-        self.assertEquals(a, None)
+        self.assertEqual(a, None)
 
         # action
         line = '20180223_092139 :INVENTORY: A09x : 2013.1317 : 000000000000000'
@@ -377,15 +377,15 @@
         # test T1
         a = self.session.query(Accession).filter_by(code='2013.1317').first()
         p = self.session.query(Plant).filter_by(code='1', accession=a).first()
-        self.assertEquals(p.location.code, 'A09x')
-        self.assertEquals(len(p.notes), 1)
+        self.assertEqual(p.location.code, 'A09x')
+        self.assertEqual(len(p.notes), 1)
 
     def test_inventory_totally_useless_line(self):
         # prepare T0
         # test T0
         a = self.session.query(Accession).first()
-        self.assertEquals(a, None)
-        self.assertEquals(len(self.session.query(Location).all()), 1)
+        self.assertEqual(a, None)
+        self.assertEqual(len(self.session.query(Location).all()), 1)
 
         # action
         line = '20180223_092139 :INVENTORY:  :  : 000000000000000'
@@ -394,15 +394,15 @@
 
         # test T1
         a = self.session.query(Accession).first()
-        self.assertEquals(a, None)
-        self.assertEquals(len(self.session.query(Location).all()), 1)
+        self.assertEqual(a, None)
+        self.assertEqual(len(self.session.query(Location).all()), 1)
 
     def test_inventory_existence_assertion_on_already_existing(self):
         # prepare T0
         a = lookup(self.session, Accession, code='2013.1317', species=self.spe)
         p = lookup(self.session, Plant, accession=a, code='1', location=self.loc, quantity=1)
         # test T0
-        self.assertEquals(p.location, self.loc)
+        self.assertEqual(p.location, self.loc)
 
         # action
         line = '20180223_092139 :INVENTORY:  : 2013.1317 : 000000000000000'
@@ -412,15 +412,15 @@
         # test T1
         a = self.session.query(Accession).filter_by(code='2013.1317').first()
         p = self.session.query(Plant).filter_by(code='1', accession=a).first()
-        self.assertEquals(p.location.code, 'somewhere')
-        self.assertEquals(len(p.notes), 1)  # inventory always noted
+        self.assertEqual(p.location.code, 'somewhere')
+        self.assertEqual(len(p.notes), 1)  # inventory always noted
 
     def test_inventory_existence_assertion_on_not_existing(self):
         # prepare T0
         # test T0
         a = self.session.query(Accession).first()
-        self.assertEquals(a, None)
-        self.assertEquals(len(self.session.query(Location).all()), 1)
+        self.assertEqual(a, None)
+        self.assertEqual(len(self.session.query(Location).all()), 1)
 
         # action
         line = '20180223_092139 :INVENTORY:  : 2013.1317 : 000000000000000'
@@ -428,13 +428,13 @@
         self.session.commit()
 
         # test T1
-        self.assertEquals(len(self.session.query(Location).all()), 2)
+        self.assertEqual(len(self.session.query(Location).all()), 2)
         a = self.session.query(Accession).filter_by(code='2013.1317').first()
-        self.assertNotEquals(a, None)
-        p = self.session.query(Plant).filter_by(code='1', accession=a).first()
-        self.assertNotEquals(p, None)
-        self.assertEquals(p.location.code, 'default')
-        self.assertEquals(len(p.notes), 1)  # inventory always noted
+        self.assertNotEqual(a, None)
+        p = self.session.query(Plant).filter_by(code='1', accession=a).first()
+        self.assertNotEqual(p, None)
+        self.assertEqual(p.location.code, 'default')
+        self.assertEqual(len(p.notes), 1)  # inventory always noted
 
 
 class ImportGPSCoordinates(BaubleTestCase):
@@ -452,17 +452,17 @@
         # prepare T0
         # test T0
         a = self.session.query(Accession).first()
-        self.assertEquals(a, None)
+        self.assertEqual(a, None)
         # action
         line = '20180905_170619 :PENDING_EDIT: 2018.0001 :  :  : (31.5215;-5.5312)'
         process_line(self.session, line, 1536845535)
         self.session.commit()
         # T1
         a = self.session.query(Accession).filter_by(code='2018.0001').first()
-        self.assertNotEquals(a, None)
-        self.assertEquals(len(a.plants), 1)
+        self.assertNotEqual(a, None)
+        self.assertEqual(len(a.plants), 1)
         p = a.plants[0]
-        self.assertEquals(p.coords, {'lat': 31.5215, 'lon': -5.5312})
+        self.assertEqual(p.coords, {'lat': 31.5215, 'lon': -5.5312})
 
     def test_gps_coordinates_overwriting(self):
         # prepare T0
@@ -473,7 +473,7 @@
         pn = lookup(self.session, PlantNote, plant=p, category='<coords>', note="{lat:32.2996,lon:-9.2395}")
 
         # test T0
-        self.assertEquals(p.coords, {'lat': 32.2996, 'lon': -9.2395})
+        self.assertEqual(p.coords, {'lat': 32.2996, 'lon': -9.2395})
 
         # action
         line = '20180905_170619 :PENDING_EDIT: 2018.0002 :  :  : (31.5215;-5.5312)'
@@ -482,10 +482,10 @@
 
         # T1
         a = self.session.query(Accession).filter_by(code='2018.0002').first()
-        self.assertNotEquals(a, None)
-        self.assertEquals(len(a.plants), 1)
+        self.assertNotEqual(a, None)
+        self.assertEqual(len(a.plants), 1)
         p = a.plants[0]
-        self.assertEquals(p.coords, {'lat': 31.5215, 'lon': -5.5312})
+        self.assertEqual(p.coords, {'lat': 31.5215, 'lon': -5.5312})
 
 
 class ImportPictures(BaubleTestCase):
@@ -503,7 +503,7 @@
         # prepare T0
         # test T0
         a = self.session.query(Accession).first()
-        self.assertEquals(a, None)
+        self.assertEqual(a, None)
 
         # action
         line = '20180223_130951 :PENDING_EDIT: 2015.0901 :  :  : (@;@) : file:///storage/sdcard/Android/data/me.ghini.pocket/files/Pictures/GPP_20180223_130931-958344128.jpg : file:///storage/sdcard/Android/data/me.ghini.pocket/files/Pictures/GPP_20180223_130943948184518.jpg'
@@ -514,7 +514,7 @@
 
         # T1
         a = self.session.query(Accession).filter_by(code='2015.0901').first()
-        self.assertNotEquals(a, None)
-        self.assertEquals(len(a.plants), 1)
+        self.assertNotEqual(a, None)
+        self.assertEqual(len(a.plants), 1)
         p = a.plants[0]
-        self.assertEquals(len(p.pictures), 2)
+        self.assertEqual(len(p.pictures), 2)
--- ./bauble/plugins/imex/csv_.py	(original)
+++ ./bauble/plugins/imex/csv_.py	(refactored)
@@ -79,10 +79,10 @@
         self.reader = csv.DictReader(f, dialect=dialect, **kwds)
         self.encoding = encoding
 
-    def next(self):
-        row = self.reader.next()
+    def __next__(self):
+        row = next(self.reader)
         t = {}
-        for k, v in row.iteritems():
+        for k, v in row.items():
             if v == '':
                 t[k] = None
             else:
@@ -111,7 +111,7 @@
         returns a consisten order.
         """
         if isinstance(row, dict):
-            row = row.values()
+            row = list(row.values())
         t = []
         for s in row:
             if s is None:
@@ -209,13 +209,13 @@
         # create pairs from the values in the lines where pair[0]
         # should come before pair[1] when the lines are sorted
         pairs = []
-        for line in bychild.values():
+        for line in list(bychild.values()):
             for parent, child in key_pairs:
                 if line[parent] and line[child]:
                     pairs.append((line[parent], line[child]))
 
         # sort the keys and flatten the lines back into a list
-        sorted_keys = utils.topological_sort(bychild.keys(), pairs)
+        sorted_keys = utils.topological_sort(list(bychild.keys()), pairs)
         sorted_lines = []
         for key in sorted_keys:
             sorted_lines.append(bychild[key])
@@ -256,7 +256,7 @@
             # up the parent connection and the transaction
             connection = metadata.bind.connect()
             transaction = connection.begin()
-        except Exception, e:
+        except Exception as e:
             msg = _('Error connecting to database.\n\n%s') % \
                 utils.xml_safe(e)
             utils.message_dialog(msg, Gtk.MessageType.ERROR)
@@ -284,7 +284,7 @@
         for table in metadata.sorted_tables:
             try:
                 sorted_tables.insert(0, (table, filename_dict.pop(table.name)))
-            except KeyError, e:
+            except KeyError as e:
                 # table.name not in list of filenames
                 pass
 
@@ -403,7 +403,7 @@
                 f = open(filename, "rb")
                 tmp = UnicodeReader(f, quotechar=QUOTE_CHAR,
                                     quoting=QUOTE_STYLE)
-                tmp.next()
+                next(tmp)
                 csv_columns = set(tmp.reader.fieldnames)
                 del tmp
                 f.close()
@@ -416,24 +416,22 @@
                 for column in table.c:
                     if isinstance(column.default, ColumnDefault):
                         defaults[column.name] = column.default.execute()
-                column_names = table.c.keys()
+                column_names = list(table.c.keys())
 
                 # check if there are any foreign keys to on the table
                 # that refer to itself, if so create a new file with
                 # the lines sorted in order of dependency so that we
                 # don't get errors about importing values into a
                 # foreign_key that don't reference and existin row
-                self_keys = filter(lambda f: f.column.table == table,
-                                   table.foreign_keys)
+                self_keys = [f for f in table.foreign_keys if f.column.table == table]
                 if self_keys:
-                    key_pairs = map(lambda x: (x.parent.name, x.column.name),
-                                    self_keys)
+                    key_pairs = [(x.parent.name, x.column.name) for x in self_keys]
                     filename = self._toposort_file(filename, key_pairs)
 
                 # the column keys for the insert are a union of the
                 # columns in the CSV file and the columns with
                 # defaults
-                column_keys = list(csv_columns.union(defaults.keys()))
+                column_keys = list(csv_columns.union(list(defaults.keys())))
                 insert = table.insert(bind=connection).\
                     compile(column_keys=column_keys)
 
@@ -463,7 +461,7 @@
 
                     # fill in default values and None for "empty"
                     # columns in line
-                    for column in table.c.keys():
+                    for column in list(table.c.keys()):
                         if column in defaults \
                                 and (column not in line
                                      or isempty(line[column])):
@@ -508,10 +506,10 @@
             # TODO: need to get those tables from depends that need to
             # be created but weren't created already
             metadata.create_all(connection, depends, checkfirst=True)
-        except GeneratorExit, e:
+        except GeneratorExit as e:
             transaction.rollback()
             raise
-        except Exception, e:
+        except Exception as e:
             logger.error("%s(%s)" % (type(e).__name__, e))
             logger.error(traceback.format_exc())
             transaction.rollback()
@@ -529,7 +527,7 @@
             for table, filename in sorted_tables:
                 for col in table.c:
                     utils.reset_sequence(col)
-        except Exception, e:
+        except Exception as e:
             col_name = None
             try:
                 col_name = col.name
@@ -590,7 +588,7 @@
 
         try:
             bauble.task.queue(self.__export_task(path))
-        except Exception, e:
+        except Exception as e:
             logger.debug("%s(%s)" % (type(e).__name__, e))
 
     def __export_task(self, path):
@@ -609,7 +607,7 @@
                     return
 
         def replace(s):
-            if isinstance(s, (str, unicode)):
+            if isinstance(s, str):
                 s.replace('\n', '\\n').replace('\r', '\\r')
             return s
 
@@ -625,7 +623,7 @@
         if main_is_frozen:
             spinner = '-\\|/'
         else:
-            spinner = u'⣄⡆⠇⠋⠙⠸⢰⣠'
+            spinner = '⣄⡆⠇⠋⠙⠸⢰⣠'
         for table in db.metadata.sorted_tables:
             filename = filename_template % table.name
             steps_so_far += 1
@@ -643,16 +641,16 @@
 
             # create empty files with only the column names
             if len(results) == 0:
-                write_csv(filename, [table.c.keys()])
+                write_csv(filename, [list(table.c.keys())])
                 yield
                 continue
 
             rows = []
-            rows.append(table.c.keys())  # append col names
+            rows.append(list(table.c.keys()))  # append col names
             ctr = 0
             for row in results:
                 try:
-                    rows.append(map(replace, row.values()))
+                    rows.append(list(map(replace, list(row.values()))))
                 except:
                     import traceback
                     logger.error(traceback.format_exc())
--- ./bauble/plugins/imex/iojson.py	(original)
+++ ./bauble/plugins/imex/iojson.py	(refactored)
@@ -188,8 +188,8 @@
 
         ## prepend the result with the taxonomic information
         result = families + genera + species + speciesnotes + vernacular + contacts + result
-        print vernacular
-        print speciesnotes
+        print(vernacular)
+        print(speciesnotes)
 
         ## done, return the result
         return result
--- ./bauble/plugins/imex/test.py	(original)
+++ ./bauble/plugins/imex/test.py	(refactored)
@@ -40,30 +40,30 @@
 from bauble.editor import MockView
 
 
-family_data = [{'id': 1, 'family': u'Orchidaceae', 'qualifier': None},
-               {'id': 2, 'family': u'Myrtaceae'}]
+family_data = [{'id': 1, 'family': 'Orchidaceae', 'qualifier': None},
+               {'id': 2, 'family': 'Myrtaceae'}]
 genus_data = [
-    {'id': 1, 'genus': u'Calopogon', 'family_id': 1, 'author': u'R. Br.'},
-    {'id': 2, 'genus': u'Panisea', 'family_id': 1}, ]
+    {'id': 1, 'genus': 'Calopogon', 'family_id': 1, 'author': 'R. Br.'},
+    {'id': 2, 'genus': 'Panisea', 'family_id': 1}, ]
 species_data = [
-    {'id': 1, 'sp': u'tuberosus', 'genus_id': 1, 'sp_author': None},
-    {'id': 2, 'sp': u'albiflora', 'genus_id': 2, 'sp_author': u'(Ridl.) Seidenf.'},
-    {'id': 3, 'sp': u'distelidia', 'genus_id': 2, 'sp_author': u'I.D.Lund'},
-    {'id': 4, 'sp': u'zeylanica', 'genus_id': 2, 'sp_author': u'(Hook.f.) Aver.'}, ]
+    {'id': 1, 'sp': 'tuberosus', 'genus_id': 1, 'sp_author': None},
+    {'id': 2, 'sp': 'albiflora', 'genus_id': 2, 'sp_author': '(Ridl.) Seidenf.'},
+    {'id': 3, 'sp': 'distelidia', 'genus_id': 2, 'sp_author': 'I.D.Lund'},
+    {'id': 4, 'sp': 'zeylanica', 'genus_id': 2, 'sp_author': '(Hook.f.) Aver.'}, ]
 species_note_test_data = [
-    {'id': 1, 'species_id': 18, 'category': u'CITES', 'note': u'I'},
-    {'id': 2, 'species_id': 20, 'category': u'IUCN', 'note': u'LC'},
-    {'id': 3, 'species_id': 18, 'category': u'<price>', 'note': u'19.50'}, ]
+    {'id': 1, 'species_id': 18, 'category': 'CITES', 'note': 'I'},
+    {'id': 2, 'species_id': 20, 'category': 'IUCN', 'note': 'LC'},
+    {'id': 3, 'species_id': 18, 'category': '<price>', 'note': '19.50'}, ]
 accession_data = [
-    {'id': 1, 'species_id': 1, 'code': u'2015.0001'},
-    {'id': 2, 'species_id': 1, 'code': u'2015.0002'},
-    {'id': 3, 'species_id': 1, 'code': u'2015.0003', 'private': True}, ]
+    {'id': 1, 'species_id': 1, 'code': '2015.0001'},
+    {'id': 2, 'species_id': 1, 'code': '2015.0002'},
+    {'id': 3, 'species_id': 1, 'code': '2015.0003', 'private': True}, ]
 location_data = [
-    {'id': 1, 'code': u'1'}, ]
+    {'id': 1, 'code': '1'}, ]
 plant_data = [
-    {'id': 1, 'accession_id': 1, 'location_id': 1, 'code': u'1',
+    {'id': 1, 'accession_id': 1, 'location_id': 1, 'code': '1',
      'quantity': 1},
-    {'id': 2, 'accession_id': 3, 'location_id': 1, 'code': u'1',
+    {'id': 2, 'accession_id': 3, 'location_id': 1, 'code': '1',
      'quantity': 1}, ]
 
 
@@ -99,7 +99,7 @@
             format = {'delimiter': ',', 'quoting': QUOTE_STYLE,
                       'quotechar': QUOTE_CHAR}
 
-            fields = data[0].keys()
+            fields = list(data[0].keys())
             f.write('%s\n' % ','.join(fields))
             writer = csv.DictWriter(f, fields, **format)
             writer.writerows(data)
@@ -116,15 +116,15 @@
         """
         Test tables that are self-referenial are import in order.
         """
-        geo_data = [{'id': 3, 'name': u'3', 'parent_id': 1},
-                    {'id': 1, 'name': u'1', 'parent_id': None},
-                    {'id': 2, 'name': u'2', 'parent_id': 1},
+        geo_data = [{'id': 3, 'name': '3', 'parent_id': 1},
+                    {'id': 1, 'name': '1', 'parent_id': None},
+                    {'id': 2, 'name': '2', 'parent_id': 1},
                     ]
         filename = os.path.join(self.path, 'geography.txt')
         f = open(filename, 'wb')
         format = {'delimiter': ',', 'quoting': QUOTE_STYLE,
                   'quotechar': QUOTE_CHAR}
-        fields = geo_data[0].keys()
+        fields = list(geo_data[0].keys())
         f.write('%s\n' % ','.join(fields))
         f.flush()
         writer = csv.DictWriter(f, fields, **format)
@@ -143,15 +143,15 @@
             col1 = Column(Boolean, default=False)
         table = BoolTest.__table__
         table.create(bind=db.engine)
-        data = [{'id': 1, 'col1': u'True'},
-                {'id': 2, 'col1': u'False'},
-                {'id': 3, 'col1': u''},
+        data = [{'id': 1, 'col1': 'True'},
+                {'id': 2, 'col1': 'False'},
+                {'id': 3, 'col1': ''},
                 ]
         filename = os.path.join(self.path, 'bool_test.txt')
         f = open(filename, 'wb')
         format = {'delimiter': ',', 'quoting': QUOTE_STYLE,
                   'quotechar': QUOTE_CHAR}
-        fields = data[0].keys()
+        fields = list(data[0].keys())
         f.write('%s\n' % ','.join(fields))
         f.flush()
         writer = csv.DictWriter(f, fields, **format)
@@ -162,13 +162,13 @@
         importer.start([filename], force=True)
 
         t = self.session.query(BoolTest).get(1)
-        self.assert_(t.col1 is True)
+        self.assertTrue(t.col1 is True)
 
         t = self.session.query(BoolTest).get(2)
-        self.assert_(t.col1 is False)
+        self.assertTrue(t.col1 is False)
 
         t = self.session.query(BoolTest).get(3)
-        self.assert_(t.col1 is False)
+        self.assertTrue(t.col1 is False)
         table.drop(bind=db.engine)
 
     def test_with_open_connection(self):
@@ -181,7 +181,7 @@
         f = open(filename, 'wb')
         format = {'delimiter': ',', 'quoting': QUOTE_STYLE,
                   'quotechar': QUOTE_CHAR}
-        fields = family_data[0].keys()
+        fields = list(family_data[0].keys())
         f.write('%s\n' % ','.join(fields))
         writer = csv.DictWriter(f, fields, **format)
         writer.writerows(family_data)
@@ -199,7 +199,7 @@
         """
         self.session = db.Session()
         family = self.session.query(Family).filter_by(id=1).one()
-        self.assert_(family.qualifier == '')
+        self.assertTrue(family.qualifier == '')
 
     def test_import_use_default(self):
         """
@@ -209,12 +209,12 @@
         """
         q = self.session.query(Family)
         ids = [r.id for r in q]
-        self.assertEquals(ids, [1, 2])
+        self.assertEqual(ids, [1, 2])
         del q
         self.session.expunge_all()
         self.session = db.Session()
         family = self.session.query(Family).filter_by(id=1).one()
-        self.assert_(family.qualifier == '')
+        self.assertTrue(family.qualifier == '')
 
     def test_import_no_default(self):
         """
@@ -223,7 +223,7 @@
         value is set to None
         """
         species = self.session.query(Species).filter_by(id=1).one()
-        self.assert_(species.cv_group is None)
+        self.assertTrue(species.cv_group is None)
 
     def test_import_empty_is_none(self):
         """
@@ -232,7 +232,7 @@
         then the column is set to None
         """
         species = self.session.query(Species).filter_by(id=1).one()
-        self.assert_(species.cv_group is None)
+        self.assertTrue(species.cv_group is None)
 
     def test_import_empty_uses_default(self):
         """
@@ -241,7 +241,7 @@
         executed.
         """
         family = self.session.query(Family).filter_by(id=2).one()
-        self.assert_(family.qualifier == '')
+        self.assertTrue(family.qualifier == '')
 
     def test_sequences(self):
         """
@@ -275,14 +275,14 @@
         Test importing a unicode string.
         """
         genus = self.session.query(Genus).filter_by(id=1).one()
-        self.assert_(genus.author == genus_data[0]['author'])
+        self.assertTrue(genus.author == genus_data[0]['author'])
 
     def test_import_no_inherit(self):
         """
         Test importing a row with None doesn't inherit from previous row.
         """
         query = self.session.query(Genus)
-        self.assert_(query[1].author != query[0].author,
+        self.assertTrue(query[1].author != query[0].author,
                      (query[1].author, query[0].author))
 
     def test_export_none_is_empty(self):
@@ -297,8 +297,8 @@
         exporter.start(temp_path)
         f = open(os.path.join(temp_path, 'species.txt'))
         reader = csv.DictReader(f, dialect=csv.excel)
-        row = reader.next()
-        self.assert_(row['cv_group'] == '')
+        row = next(reader)
+        self.assertTrue(row['cv_group'] == '')
 
 
 class CSVTests2(ImexTestCase):
@@ -328,7 +328,7 @@
         if db.engine.name == 'postgres':
             stmt = "SELECT currval('family_id_seq');"
             currval = conn.execute(stmt).fetchone()[0]
-            self.assertEquals(currval, 0)
+            self.assertEqual(currval, 0)
         elif db.engine.name == 'sqlite':
             # max(id) isn't really safe in production use but is ok for a test
             stmt = "SELECT max(id) from family;"
@@ -383,12 +383,12 @@
         # u'Gal\xe1pagos' is the unencoded unicode object,
         # calling u.encode('utf-8') will convert the \xe1 to the a
         # with an accent
-        data = {'name': u'Gal\xe1pagos'}
+        data = {'name': 'Gal\xe1pagos'}
         geography_table.insert().execute(data)
         query = self.session.query(Geography)
         row_name = [r.name for r in query.all()
                     if r.name.startswith("Gal")][0]
-        self.assertEquals(row_name, data['name'])
+        self.assertEqual(row_name, data['name'])
 
     def test_export(self):
         # 1. export the test data
@@ -457,25 +457,25 @@
         ## must still check content of generated file!
         with open(self.temp_path) as f:
             result = json.load(f)
-        self.assertEquals(len(result), 14)
+        self.assertEqual(len(result), 14)
         families = [i for i in result
                     if i['object'] == 'taxon' and i['rank'] == 'familia']
-        self.assertEquals(len(families), 2)
+        self.assertEqual(len(families), 2)
         genera = [i for i in result
                   if i['object'] == 'taxon' and i['rank'] == 'genus']
-        self.assertEquals(len(genera), 2)
+        self.assertEqual(len(genera), 2)
         species = [i for i in result
                    if i['object'] == 'taxon' and i['rank'] == 'species']
-        self.assertEquals(len(species), 4)
+        self.assertEqual(len(species), 4)
         target = [
             {"epithet": "Orchidaceae", "object": "taxon", "rank": "familia"},
             {"epithet": "Myrtaceae", "object": "taxon", "rank": "familia"},
             {"author": "R. Br.", "epithet": "Calopogon", "ht-epithet": "Orchidaceae", "ht-rank": "familia", "object": "taxon", "rank": "genus"},
             {"author": "", "epithet": "Panisea", "ht-epithet": "Orchidaceae", "ht-rank": "familia", "object": "taxon", "rank": "genus"},
-            {u'ht-epithet': u'Calopogon', u'hybrid': False, u'object': u'taxon', u'ht-rank': u'genus', u'rank': u'species', u'epithet': u'tuberosus'},
-            {u'ht-epithet': u'Panisea', u'hybrid': False, u'object': u'taxon', u'ht-rank': u'genus', u'rank': u'species', u'sp_author': u'(L.) Britton', u'epithet': u'albiflora', 'sp_author': u'(Ridl.) Seidenf.'},
-            {u'ht-epithet': u'Panisea', u'hybrid': False, u'object': u'taxon', u'ht-rank': u'genus', u'rank': u'species', u'sp_author': u'(L.) Britton', u'epithet': u'distelidia', 'sp_author': u'I.D.Lund'},
-            {u'ht-epithet': u'Panisea', u'hybrid': False, u'object': u'taxon', u'ht-rank': u'genus', u'rank': u'species', u'sp_author': u'(L.) Britton', u'epithet': u'zeylanica', 'sp_author': u'(Hook.f.) Aver.'},
+            {'ht-epithet': 'Calopogon', 'hybrid': False, 'object': 'taxon', 'ht-rank': 'genus', 'rank': 'species', 'epithet': 'tuberosus'},
+            {'ht-epithet': 'Panisea', 'hybrid': False, 'object': 'taxon', 'ht-rank': 'genus', 'rank': 'species', 'sp_author': '(L.) Britton', 'epithet': 'albiflora', 'sp_author': '(Ridl.) Seidenf.'},
+            {'ht-epithet': 'Panisea', 'hybrid': False, 'object': 'taxon', 'ht-rank': 'genus', 'rank': 'species', 'sp_author': '(L.) Britton', 'epithet': 'distelidia', 'sp_author': 'I.D.Lund'},
+            {'ht-epithet': 'Panisea', 'hybrid': False, 'object': 'taxon', 'ht-rank': 'genus', 'rank': 'species', 'sp_author': '(L.) Britton', 'epithet': 'zeylanica', 'sp_author': '(Hook.f.) Aver.'},
             {"code": "2015.0001", "object": "accession", "private": False, "species": "Calopogon tuberosus"},
             {"code": "2015.0002", "object": "accession", "private": False, "species": "Calopogon tuberosus"},
             {"code": "2015.0003", "object": "accession", "private": True, "species": "Calopogon tuberosus"},
@@ -491,17 +491,17 @@
         view = MockView()
         exporter = JSONExporter(view)
         exporter.selection_based_on == 'sbo_selection'
-        view.selection = range(5000)
+        view.selection = list(range(5000))
         view.reply_yes_no_dialog = [False]
         exporter.run()
         self.assertTrue('run_yes_no_dialog' in view.invoked)
-        self.assertEquals(view.reply_yes_no_dialog, [])
+        self.assertEqual(view.reply_yes_no_dialog, [])
 
     def test_writes_full_taxonomic_info(self):
         "exporting one family: export full taxonomic information below family"
 
         selection = self.session.query(Family).filter(
-            Family.family == u'Orchidaceae').all()
+            Family.family == 'Orchidaceae').all()
         exporter = JSONExporter(MockView())
         exporter.selection_based_on == 'sbo_selection'
         exporter.include_private = False
@@ -510,15 +510,15 @@
         exporter.run()
         with open(self.temp_path) as f:
             result = json.load(f)
-        self.assertEquals(len(result), 1)
-        self.assertEquals(result[0]['rank'], 'familia')
-        self.assertEquals(result[0]['epithet'], 'Orchidaceae')
+        self.assertEqual(len(result), 1)
+        self.assertEqual(result[0]['rank'], 'familia')
+        self.assertEqual(result[0]['epithet'], 'Orchidaceae')
 
     def test_writes_partial_taxonomic_info(self):
         "exporting one genus: all species below genus"
 
         selection = self.session.query(Genus).filter(
-            Genus.genus == u'Calopogon').all()
+            Genus.genus == 'Calopogon').all()
         exporter = JSONExporter(MockView())
         exporter.view.selection = selection
         exporter.selection_based_on == 'sbo_selection'
@@ -527,19 +527,19 @@
         exporter.run()
         with open(self.temp_path) as f:
             result = json.load(f)
-        self.assertEquals(len(result), 1)
-        self.assertEquals(result[0]['rank'], 'genus')
-        self.assertEquals(result[0]['epithet'], 'Calopogon')
-        self.assertEquals(result[0]['ht-rank'], 'familia')
-        self.assertEquals(result[0]['ht-epithet'], 'Orchidaceae')
-        self.assertEquals(result[0]['author'], 'R. Br.')
+        self.assertEqual(len(result), 1)
+        self.assertEqual(result[0]['rank'], 'genus')
+        self.assertEqual(result[0]['epithet'], 'Calopogon')
+        self.assertEqual(result[0]['ht-rank'], 'familia')
+        self.assertEqual(result[0]['ht-epithet'], 'Orchidaceae')
+        self.assertEqual(result[0]['author'], 'R. Br.')
 
     def test_writes_partial_taxonomic_info_species(self):
         "exporting one species: all species below species"
 
         selection = self.session.query(
-            Species).filter(Species.sp == u'tuberosus').join(
-            Genus).filter(Genus.genus == u"Calopogon").all()
+            Species).filter(Species.sp == 'tuberosus').join(
+            Genus).filter(Genus.genus == "Calopogon").all()
         exporter = JSONExporter(MockView())
         exporter.view.selection = selection
         exporter.selection_based_on == 'sbo_selection'
@@ -548,18 +548,18 @@
         exporter.run()
         with open(self.temp_path) as f:
             result = json.load(f)
-        self.assertEquals(len(result), 1)
-        self.assertEquals(result[0]['rank'], 'species')
-        self.assertEquals(result[0]['epithet'], 'tuberosus')
-        self.assertEquals(result[0]['ht-rank'], 'genus')
-        self.assertEquals(result[0]['ht-epithet'], 'Calopogon')
-        self.assertEquals(result[0]['hybrid'], False)
+        self.assertEqual(len(result), 1)
+        self.assertEqual(result[0]['rank'], 'species')
+        self.assertEqual(result[0]['epithet'], 'tuberosus')
+        self.assertEqual(result[0]['ht-rank'], 'genus')
+        self.assertEqual(result[0]['ht-epithet'], 'Calopogon')
+        self.assertEqual(result[0]['hybrid'], False)
 
     def test_export_single_species_with_notes(self):
         selection = self.session.query(
-            Species).filter(Species.sp == u'tuberosus').join(
-            Genus).filter(Genus.genus == u"Calopogon").all()
-        note = SpeciesNote(category=u'<coords>', note=u'{1: 1, 2: 2}')
+            Species).filter(Species.sp == 'tuberosus').join(
+            Genus).filter(Genus.genus == "Calopogon").all()
+        note = SpeciesNote(category='<coords>', note='{1: 1, 2: 2}')
         note.species = selection[0]
         self.session.add(note)
         self.session.commit()
@@ -571,18 +571,18 @@
         exporter.run()
         with open(self.temp_path) as f:
             result = json.load(f)
-        self.assertEquals(len(result), 2)
-        self.assertEquals(result[0], {u'ht-epithet': u'Calopogon', u'hybrid': False, u'object': u'taxon', u'ht-rank': u'genus', u'rank': u'species', u'epithet': u'tuberosus'})
+        self.assertEqual(len(result), 2)
+        self.assertEqual(result[0], {'ht-epithet': 'Calopogon', 'hybrid': False, 'object': 'taxon', 'ht-rank': 'genus', 'rank': 'species', 'epithet': 'tuberosus'})
         date_dict = result[1]['date']
         del result[1]['date']
-        self.assertEquals(result[1], {u'category': u'<coords>', u'note': u'{1: 1, 2: 2}', u'species': u'Calopogon tuberosus', u'object': u'species_note'})
-        self.assertEquals(set(date_dict.keys()), set([u'millis', u'__class__']))
+        self.assertEqual(result[1], {'category': '<coords>', 'note': '{1: 1, 2: 2}', 'species': 'Calopogon tuberosus', 'object': 'species_note'})
+        self.assertEqual(set(date_dict.keys()), set(['millis', '__class__']))
 
     def test_export_single_species_with_vernacular_name(self):
         selection = self.session.query(
-            Species).filter(Species.sp == u'tuberosus').join(
-            Genus).filter(Genus.genus == u"Calopogon").all()
-        vn = VernacularName(language=u"it", name=u'orchidea')
+            Species).filter(Species.sp == 'tuberosus').join(
+            Genus).filter(Genus.genus == "Calopogon").all()
+        vn = VernacularName(language="it", name='orchidea')
         selection[0].vernacular_names.append(vn)
         self.session.add(vn)
         self.session.commit()
@@ -594,24 +594,24 @@
         exporter.run()
         with open(self.temp_path) as f:
             result = json.load(f)
-        self.assertEquals(len(result), 2)
-        self.assertEquals(result[0], {u'ht-epithet': u'Calopogon', u'hybrid': False, u'object': u'taxon', u'ht-rank': u'genus', u'rank': u'species', u'epithet': u'tuberosus'})
-        self.assertEquals(result[1], {u'language': u'it', u'name': u'orchidea', u'object': u'vernacular_name', u'species': u'Calopogon tuberosus'})
+        self.assertEqual(len(result), 2)
+        self.assertEqual(result[0], {'ht-epithet': 'Calopogon', 'hybrid': False, 'object': 'taxon', 'ht-rank': 'genus', 'rank': 'species', 'epithet': 'tuberosus'})
+        self.assertEqual(result[1], {'language': 'it', 'name': 'orchidea', 'object': 'vernacular_name', 'species': 'Calopogon tuberosus'})
 
     def test_partial_taxonomic_with_synonymy(self):
         "exporting one genus which is not an accepted name."
 
         f = self.session.query(
             Family).filter(
-            Family.family == u'Orchidaceae').one()
-        bu = Genus(family=f, genus=u'Bulbophyllum')  # accepted
-        zy = Genus(family=f, genus=u'Zygoglossum')  # synonym
+            Family.family == 'Orchidaceae').one()
+        bu = Genus(family=f, genus='Bulbophyllum')  # accepted
+        zy = Genus(family=f, genus='Zygoglossum')  # synonym
         bu.synonyms.append(zy)
         self.session.add_all([f, bu, zy])
         self.session.commit()
 
         selection = self.session.query(Genus).filter(
-            Genus.genus == u'Zygoglossum').all()
+            Genus.genus == 'Zygoglossum').all()
         exporter = JSONExporter(MockView())
         exporter.view.selection = selection
         exporter.selection_based_on == 'sbo_selection'
@@ -620,24 +620,24 @@
         exporter.run()
         with open(self.temp_path) as f:
             result = json.load(f)
-        self.assertEquals(len(result), 1)
-        self.assertEquals(result[0]['rank'], 'genus')
-        self.assertEquals(result[0]['epithet'], 'Zygoglossum')
-        self.assertEquals(result[0]['ht-rank'], 'familia')
-        self.assertEquals(result[0]['ht-epithet'], 'Orchidaceae')
+        self.assertEqual(len(result), 1)
+        self.assertEqual(result[0]['rank'], 'genus')
+        self.assertEqual(result[0]['epithet'], 'Zygoglossum')
+        self.assertEqual(result[0]['ht-rank'], 'familia')
+        self.assertEqual(result[0]['ht-epithet'], 'Orchidaceae')
         accepted = result[0].get('accepted')
         self.assertTrue(isinstance(accepted, dict))
-        self.assertEquals(accepted['rank'], 'genus')
-        self.assertEquals(accepted['epithet'], 'Bulbophyllum')
-        self.assertEquals(accepted['ht-rank'], 'familia')
-        self.assertEquals(accepted['ht-epithet'], 'Orchidaceae')
+        self.assertEqual(accepted['rank'], 'genus')
+        self.assertEqual(accepted['epithet'], 'Bulbophyllum')
+        self.assertEqual(accepted['ht-rank'], 'familia')
+        self.assertEqual(accepted['ht-epithet'], 'Orchidaceae')
 
     def test_export_ignores_private_if_sbo_selection(self):
         exporter = JSONExporter(MockView())
         selection = [o for o in self.objects if isinstance(o, Accession)]
         non_private = [a for a in selection if a.private is False]
-        self.assertEquals(len(selection), 3)
-        self.assertEquals(len(non_private), 2)
+        self.assertEqual(len(selection), 3)
+        self.assertEqual(len(non_private), 2)
         exporter.view.selection = selection
         exporter.selection_based_on == 'sbo_selection'
         exporter.include_private = False
@@ -645,7 +645,7 @@
         exporter.run()
         with open(self.temp_path) as f:
             result = json.load(f)
-        self.assertEquals(len(result), 3)
+        self.assertEqual(len(result), 3)
 
     def test_export_non_private_if_sbo_accessions(self):
         exporter = JSONExporter(MockView())
@@ -656,7 +656,7 @@
         exporter.run()
         with open(self.temp_path) as f:
             result = json.load(f)
-        self.assertEquals(len(result), 5)
+        self.assertEqual(len(result), 5)
 
     def test_export_private_if_sbo_accessions(self):
         exporter = JSONExporter(MockView())
@@ -667,7 +667,7 @@
         exporter.run()
         with open(self.temp_path) as f:
             result = json.load(f)
-        self.assertEquals(len(result), 6)
+        self.assertEqual(len(result), 6)
 
     def test_export_non_private_if_sbo_plants(self):
         exporter = JSONExporter(MockView())
@@ -678,7 +678,7 @@
         exporter.run()
         with open(self.temp_path) as f:
             result = json.load(f)
-        self.assertEquals(len(result), 6)
+        self.assertEqual(len(result), 6)
 
     def test_export_private_if_sbo_plants(self):
         exporter = JSONExporter(MockView())
@@ -689,17 +689,17 @@
         exporter.run()
         with open(self.temp_path) as f:
             result = json.load(f)
-        self.assertEquals(len(result), 8)
+        self.assertEqual(len(result), 8)
 
     def test_export_with_vernacular(self):
         "exporting one genus which is not an accepted name."
 
         ## precondition
         sola = Family(family='Solanaceae')
-        brug = Genus(family=sola, genus=u'Brugmansia')
-        arbo = Species(genus=brug, sp=u'arborea')
+        brug = Genus(family=sola, genus='Brugmansia')
+        arbo = Species(genus=brug, sp='arborea')
         vern = VernacularName(species=arbo,
-                              language=u"es", name=u"Floripondio")
+                              language="es", name="Floripondio")
         self.session.add_all([sola, brug, arbo, vern])
         self.session.commit()
 
@@ -716,8 +716,8 @@
             result = json.load(f)
         vern_from_json = [i for i in result
                           if i['object'] == 'vernacular_name']
-        self.assertEquals(len(vern_from_json), 1)
-        self.assertEquals(vern_from_json[0]['language'], 'es')
+        self.assertEqual(len(vern_from_json), 1)
+        self.assertEqual(vern_from_json[0]['language'], 'es')
 
     def test_on_btnbrowse_clicked(self):
         view = MockView()
@@ -725,8 +725,8 @@
         view.reply_file_chooser_dialog = ['/tmp/test.json']
         exporter.on_btnbrowse_clicked('button')
         exporter.on_text_entry_changed('filename')
-        self.assertEquals(exporter.filename, '/tmp/test.json')
-        self.assertEquals(JSONExporter.last_folder, '/tmp')
+        self.assertEqual(exporter.filename, '/tmp/test.json')
+        self.assertEqual(JSONExporter.last_folder, '/tmp')
 
     def test_includes_sources(self):
 
@@ -734,7 +734,7 @@
         # Create an Accession a, then create a Source s, then assign a.source = s
         a = self.session.query(Accession).first()
         a.source = s = Source()
-        s.source_detail = c = Contact(name=u'Summit')
+        s.source_detail = c = Contact(name='Summit')
         self.session.add_all([s, c])
         self.session.commit()
 
@@ -750,18 +750,18 @@
         ## check
         with open(self.temp_path) as f:
             result = json.load(f)
-        print result
+        print(result)
         contacts_from_json = [i for i in result
                               if i['object'] == 'contact']
-        self.assertEquals(len(contacts_from_json), 1)
-        self.assertEquals(contacts_from_json[0]['name'], 'Summit')
+        self.assertEqual(len(contacts_from_json), 1)
+        self.assertEqual(contacts_from_json[0]['name'], 'Summit')
         accessions_from_json = [i for i in result
                                 if i['object'] == 'accession']
-        self.assertEquals(len(accessions_from_json), 3)
+        self.assertEqual(len(accessions_from_json), 3)
         accessions_with_contact = [i for i in result
                                    if i['object'] == 'accession' and i.get('contact') is not None]
-        self.assertEquals(len(accessions_with_contact), 1)
-        self.assertEquals(accessions_with_contact[0]['contact'], 'Summit')
+        self.assertEqual(len(accessions_with_contact), 1)
+        self.assertEqual(accessions_with_contact[0]['contact'], 'Summit')
 
 
 class JSONImportTests(BaubleTestCase):
@@ -793,13 +793,13 @@
             '"author": "Rchb. f."}]'
         with open(self.temp_path, "w") as f:
             f.write(json_string)
-        self.assertEquals(len(self.session.query(Genus).filter(
-            Genus.genus == u"Neogyna").all()), 0)
-        importer = JSONImporter(MockView())
-        importer.filename = self.temp_path
-        importer.on_btnok_clicked(None)
-        self.assertEquals(len(self.session.query(Genus).filter(
-            Genus.genus == u"Neogyna").all()), 1)
+        self.assertEqual(len(self.session.query(Genus).filter(
+            Genus.genus == "Neogyna").all()), 0)
+        importer = JSONImporter(MockView())
+        importer.filename = self.temp_path
+        importer.on_btnok_clicked(None)
+        self.assertEqual(len(self.session.query(Genus).filter(
+            Genus.genus == "Neogyna").all()), 1)
 
     def test_import_new_inserts_lowercase(self):
         "importing new taxon adds it to database, rank name can be\
@@ -808,13 +808,13 @@
             ': "familia", "ht-epithet": "Orchidaceae", "author": "Rchb. f."}]'
         with open(self.temp_path, "w") as f:
             f.write(json_string)
-        self.assertEquals(len(self.session.query(Genus).filter(
-            Genus.genus == u"Neogyna").all()), 0)
-        importer = JSONImporter(MockView())
-        importer.filename = self.temp_path
-        importer.on_btnok_clicked(None)
-        self.assertEquals(len(self.session.query(Genus).filter(
-            Genus.genus == u"Neogyna").all()), 1)
+        self.assertEqual(len(self.session.query(Genus).filter(
+            Genus.genus == "Neogyna").all()), 0)
+        importer = JSONImporter(MockView())
+        importer.filename = self.temp_path
+        importer.on_btnok_clicked(None)
+        self.assertEqual(len(self.session.query(Genus).filter(
+            Genus.genus == "Neogyna").all()), 1)
 
     def test_import_new_with_non_timestamped_note(self):
         json_string = (
@@ -828,10 +828,10 @@
         importer.on_btnok_clicked(None)
         self.session.commit()
         afterwards = Species.retrieve_or_create(
-            self.session, {'ht-epithet': u"Calopogon",
-                           'epithet': u"pallidus"})
-        self.assertEquals(afterwards.sp_author, u'Chapm.')
-        self.assertEquals(len(afterwards.notes), 1)
+            self.session, {'ht-epithet': "Calopogon",
+                           'epithet': "pallidus"})
+        self.assertEqual(afterwards.sp_author, 'Chapm.')
+        self.assertEqual(len(afterwards.notes), 1)
 
     def test_import_new_with_three_array_notes(self):
         json_string = (
@@ -847,16 +847,16 @@
         importer.on_btnok_clicked(None)
         self.session.commit()
         afterwards = Species.retrieve_or_create(
-            self.session, {'ht-epithet': u"Calopogon",
-                           'epithet': u"pallidus"})
-        self.assertEquals(afterwards.sp_author, u'Chapm.')
-        self.assertEquals(len(afterwards.notes), 3)
+            self.session, {'ht-epithet': "Calopogon",
+                           'epithet': "pallidus"})
+        self.assertEqual(afterwards.sp_author, 'Chapm.')
+        self.assertEqual(len(afterwards.notes), 3)
 
     def test_import_new_same_picture_notes(self):
         before = Species.retrieve_or_create(
-            self.session, {'ht-epithet': u"Calopogon",
-                           'epithet': u"pallidus"})
-        note = SpeciesNote(category=u'<picture>', note=u'a')
+            self.session, {'ht-epithet': "Calopogon",
+                           'epithet': "pallidus"})
+        note = SpeciesNote(category='<picture>', note='a')
         self.session.commit()
         
         json_string = (
@@ -871,10 +871,10 @@
         importer.on_btnok_clicked(None)
         self.session.commit()
         afterwards = Species.retrieve_or_create(
-            self.session, {'ht-epithet': u"Calopogon",
-                           'epithet': u"pallidus"})
-        self.assertEquals(afterwards.sp_author, u'Chapm.')
-        self.assertEquals(len(afterwards.notes), 2)
+            self.session, {'ht-epithet': "Calopogon",
+                           'epithet': "pallidus"})
+        self.assertEqual(afterwards.sp_author, 'Chapm.')
+        self.assertEqual(len(afterwards.notes), 2)
 
     def test_import_new_with_repeated_note(self):
         json_string = (
@@ -889,11 +889,11 @@
         importer.on_btnok_clicked(None)
         self.session.commit()
         afterwards = Species.retrieve_or_create(
-            self.session, {'ht-epithet': u"Calopogon",
-                           'epithet': u"pallidus"})
-        self.assertEquals(afterwards.sp_author, u'Chapm.')
-        self.assertEquals(len(afterwards.notes), 1)
-        self.assertEquals(afterwards.notes[0].note, u'10')
+            self.session, {'ht-epithet': "Calopogon",
+                           'epithet': "pallidus"})
+        self.assertEqual(afterwards.sp_author, 'Chapm.')
+        self.assertEqual(len(afterwards.notes), 1)
+        self.assertEqual(afterwards.notes[0].note, '10')
 
     def test_import_new_with_timestamped_note(self):
         json_string = (
@@ -907,12 +907,12 @@
         importer.on_btnok_clicked(None)
         self.session.commit()
         afterwards = Species.retrieve_or_create(
-            self.session, {'ht-epithet': u"Calopogon",
-                           'epithet': u"pallidus"})
-        self.assertEquals(afterwards.sp_author, u'Chapm.')
-        self.assertEquals(len(afterwards.notes), 1)
+            self.session, {'ht-epithet': "Calopogon",
+                           'epithet': "pallidus"})
+        self.assertEqual(afterwards.sp_author, 'Chapm.')
+        self.assertEqual(len(afterwards.notes), 1)
         import datetime
-        self.assertEquals(afterwards.notes[0].date, datetime.date(2009, 2, 24))
+        self.assertEqual(afterwards.notes[0].date, datetime.date(2009, 2, 24))
 
     def test_import_existing_updates(self):
         "importing existing taxon updates it"
@@ -922,23 +922,23 @@
         with open(self.temp_path, "w") as f:
             f.write(json_string)
         previously = Species.retrieve_or_create(
-            self.session, {'ht-epithet': u"Calopogon",
-                           'epithet': u"tuberosus"})
-        self.assertEquals(previously.sp_author, None)
+            self.session, {'ht-epithet': "Calopogon",
+                           'epithet': "tuberosus"})
+        self.assertEqual(previously.sp_author, None)
         importer = JSONImporter(MockView())
         importer.filename = self.temp_path
         importer.on_btnok_clicked(None)
         self.session.commit()
         afterwards = Species.retrieve_or_create(
-            self.session, {'ht-epithet': u"Calopogon",
-                           'epithet': u"tuberosus"})
-        self.assertEquals(afterwards.sp_author, u"Britton et al.")
+            self.session, {'ht-epithet': "Calopogon",
+                           'epithet': "tuberosus"})
+        self.assertEqual(afterwards.sp_author, "Britton et al.")
 
     def test_import_ignores_id_new(self):
         "importing taxon disregards id value if present (new taxon)."
         previously = Genus.retrieve_or_create(
-            self.session, {'epithet': u"Neogyna"})
-        self.assertEquals(previously, None)
+            self.session, {'epithet': "Neogyna"})
+        self.assertEqual(previously, None)
         json_string = '[{"rank": "Genus", "epithet": "Neogyna", '\
             '"ht-rank": "Familia", "ht-epithet": "Orchidaceae", '\
             '"author": "Rchb. f.", "id": 1}]'
@@ -950,14 +950,14 @@
 
         self.session.commit()
         real_id = Genus.retrieve_or_create(self.session,
-                                           {'epithet': u"Neogyna"}).id
+                                           {'epithet': "Neogyna"}).id
         self.assertTrue(real_id != 1)
 
     def test_import_ignores_id_updating(self):
         "importing taxon disregards id value if present (updating taxon)."
         previously = Species.retrieve_or_create(self.session,
-                                                {'ht-epithet': u"Calopogon",
-                                                 'epithet': u"tuberosus"}).id
+                                                {'ht-epithet': "Calopogon",
+                                                 'epithet': "tuberosus"}).id
         json_string = '[{"rank": "Species", "epithet": "tuberosus", '\
             '"ht-rank": "Genus", "ht-epithet": "Calopogon", "hybrid": false, '\
             '"id": 8}]'
@@ -969,9 +969,9 @@
 
         self.session.commit()
         afterwards = Species.retrieve_or_create(self.session,
-                                                {'ht-epithet': u"Calopogon",
-                                                 'epithet': u"tuberosus"}).id
-        self.assertEquals(previously, afterwards)
+                                                {'ht-epithet': "Calopogon",
+                                                 'epithet': "tuberosus"}).id
+        self.assertEqual(previously, afterwards)
 
     def test_import_species_to_new_genus_fails(self):
         "importing new species referring to non existing genus logs a warning."
@@ -987,18 +987,18 @@
         ## should check the logs
         ## check the species is still not there
         sp = self.session.query(Species).filter(
-            Species.sp == u'lawrenceae').join(Genus).filter(
-            Genus.genus == u'Aerides').all()
-        self.assertEquals(sp, [])
+            Species.sp == 'lawrenceae').join(Genus).filter(
+            Genus.genus == 'Aerides').all()
+        self.assertEqual(sp, [])
 
     def test_import_species_to_new_genus_and_family(self):
         "species referring to non existing genus (family is specified)"
 
         ## precondition: the species is not there
         sp = self.session.query(Species).filter(
-            Species.sp == u'lawrenceae').join(Genus).filter(
-            Genus.genus == u'Aerides').all()
-        self.assertEquals(sp, [])
+            Species.sp == 'lawrenceae').join(Genus).filter(
+            Genus.genus == 'Aerides').all()
+        self.assertEqual(sp, [])
 
         json_string = '[{"rank": "Species", "epithet": "lawrenceae", '\
             '"ht-rank": "Genus", "ht-epithet": "Aerides", '\
@@ -1012,16 +1012,16 @@
         self.session.commit()
         ## postcondition: the species is there
         sp = self.session.query(Species).filter(
-            Species.sp == u'lawrenceae').join(Genus).filter(
-            Genus.genus == u'Aerides').all()
-        self.assertEquals(len(sp), 1)
+            Species.sp == 'lawrenceae').join(Genus).filter(
+            Genus.genus == 'Aerides').all()
+        self.assertEqual(len(sp), 1)
         sp = sp[0]
         genus = self.session.query(Genus).filter(
-            Genus.genus == u'Aerides').first()
+            Genus.genus == 'Aerides').first()
         family = self.session.query(Family).filter(
-            Family.family == u'Orchidaceae').first()
-        self.assertEquals(sp.genus, genus)
-        self.assertEquals(genus.family, family)
+            Family.family == 'Orchidaceae').first()
+        self.assertEqual(sp.genus, genus)
+        self.assertEqual(genus.family, family)
 
     def test_import_with_synonym(self):
         "importing taxon with `accepted` field imports both taxa"
@@ -1038,27 +1038,27 @@
 
         self.session.commit()
         synonym = Genus.retrieve_or_create(
-            self.session, {'epithet': u"Zygoglossum"})
-        self.assertEquals(synonym.accepted.__class__, Genus)
+            self.session, {'epithet': "Zygoglossum"})
+        self.assertEqual(synonym.accepted.__class__, Genus)
         accepted = Genus.retrieve_or_create(
-            self.session, {'epithet': u"Bulbophyllum"})
-        self.assertEquals(synonym.accepted, accepted)
+            self.session, {'epithet': "Bulbophyllum"})
+        self.assertEqual(synonym.accepted, accepted)
 
     def test_use_author_to_break_ties(self):
         "importing homonym taxon is possible if authorship breaks ties"
         # Anacampseros was used twice, by Linnaeus, and by Miller
-        ataceae = Family(family=u'Anacampserotaceae')  # Eggli & Nyffeler
-        linnaeus = Genus(family=ataceae, genus=u'Anacampseros', author=u'L.')
-        claceae = Family(family=u'Crassulaceae')  # J. St.-Hil.
-        miller = Genus(family=claceae, genus=u'Anacampseros', author=u'Mill.')
+        ataceae = Family(family='Anacampserotaceae')  # Eggli & Nyffeler
+        linnaeus = Genus(family=ataceae, genus='Anacampseros', author='L.')
+        claceae = Family(family='Crassulaceae')  # J. St.-Hil.
+        miller = Genus(family=claceae, genus='Anacampseros', author='Mill.')
         self.session.add_all([claceae, ataceae, linnaeus, miller])
         self.session.commit()
 
         ## T_0
         accepted = Genus.retrieve_or_create(
-            self.session, {'epithet': u"Sedum"}, create=False)
-        self.assertEquals(accepted, None)
-        self.assertEquals(miller.accepted, None)
+            self.session, {'epithet': "Sedum"}, create=False)
+        self.assertEqual(accepted, None)
+        self.assertEqual(miller.accepted, None)
 
         ## what if we update Anacampseros Mill., with `accepted` information?
         json_string = ' {"author": "Mill.", "epithet": "Anacampseros", '\
@@ -1076,16 +1076,16 @@
 
         ## T_1
         accepted = Genus.retrieve_or_create(
-            self.session, {'epithet': u"Sedum"}, create=False)
-        self.assertEquals(accepted.__class__, Genus)
-        self.assertEquals(miller.accepted, accepted)
+            self.session, {'epithet': "Sedum"}, create=False)
+        self.assertEqual(accepted.__class__, Genus)
+        self.assertEqual(miller.accepted, accepted)
 
     def test_import_create_update(self):
         'existing gets updated, not existing is created'
 
         ## T_0
-        ataceae = Family(family=u'Anacampserotaceae')  # Eggli & Nyffeler
-        linnaeus = Genus(family=ataceae, genus=u'Anacampseros')  # L.
+        ataceae = Family(family='Anacampserotaceae')  # Eggli & Nyffeler
+        linnaeus = Genus(family=ataceae, genus='Anacampseros')  # L.
         self.session.add_all([ataceae, linnaeus])
         self.session.commit()
 
@@ -1107,20 +1107,20 @@
 
         ## T_1
         sedum = Genus.retrieve_or_create(
-            self.session, {'epithet': u"Sedum"}, create=False)
-        self.assertEquals(sedum.__class__, Genus)
-        self.assertEquals(sedum.author, u'L.')
+            self.session, {'epithet': "Sedum"}, create=False)
+        self.assertEqual(sedum.__class__, Genus)
+        self.assertEqual(sedum.author, 'L.')
         anacampseros = Genus.retrieve_or_create(
-            self.session, {'epithet': u"Anacampseros"}, create=False)
-        self.assertEquals(anacampseros.__class__, Genus)
-        self.assertEquals(anacampseros.author, u'L.')
+            self.session, {'epithet': "Anacampseros"}, create=False)
+        self.assertEqual(anacampseros.__class__, Genus)
+        self.assertEqual(anacampseros.author, 'L.')
 
     def test_import_no_create_update(self):
         'existing gets updated, not existing is not created'
 
         ## T_0
-        ataceae = Family(family=u'Anacampserotaceae')  # Eggli & Nyffeler
-        linnaeus = Genus(family=ataceae, genus=u'Anacampseros')  # L.
+        ataceae = Family(family='Anacampserotaceae')  # Eggli & Nyffeler
+        linnaeus = Genus(family=ataceae, genus='Anacampseros')  # L.
         self.session.add_all([ataceae, linnaeus])
         self.session.commit()
 
@@ -1142,19 +1142,19 @@
 
         ## T_1
         sedum = Genus.retrieve_or_create(
-            self.session, {'epithet': u"Sedum"}, create=False)
-        self.assertEquals(sedum, None)
+            self.session, {'epithet': "Sedum"}, create=False)
+        self.assertEqual(sedum, None)
         anacampseros = Genus.retrieve_or_create(
-            self.session, {'epithet': u"Anacampseros"}, create=False)
-        self.assertEquals(anacampseros.__class__, Genus)
-        self.assertEquals(anacampseros.author, u'L.')
+            self.session, {'epithet': "Anacampseros"}, create=False)
+        self.assertEqual(anacampseros.__class__, Genus)
+        self.assertEqual(anacampseros.author, 'L.')
 
     def test_import_create_no_update(self):
         'existing remains untouched, not existing is created'
 
         ## T_0
-        ataceae = Family(family=u'Anacampserotaceae')  # Eggli & Nyffeler
-        linnaeus = Genus(family=ataceae, genus=u'Anacampseros')  # L.
+        ataceae = Family(family='Anacampserotaceae')  # Eggli & Nyffeler
+        linnaeus = Genus(family=ataceae, genus='Anacampseros')  # L.
         self.session.add_all([ataceae, linnaeus])
         self.session.commit()
 
@@ -1176,13 +1176,13 @@
 
         ## T_1
         sedum = Genus.retrieve_or_create(
-            self.session, {'epithet': u"Sedum"}, create=False)
-        self.assertEquals(sedum.__class__, Genus)
-        self.assertEquals(sedum.author, u'L.')
+            self.session, {'epithet': "Sedum"}, create=False)
+        self.assertEqual(sedum.__class__, Genus)
+        self.assertEqual(sedum.author, 'L.')
         anacampseros = Genus.retrieve_or_create(
-            self.session, {'epithet': u"Anacampseros"}, create=False)
-        self.assertEquals(anacampseros.__class__, Genus)
-        self.assertEquals(anacampseros.author, u'')
+            self.session, {'epithet': "Anacampseros"}, create=False)
+        self.assertEqual(anacampseros.__class__, Genus)
+        self.assertEqual(anacampseros.author, '')
 
     def test_on_btnbrowse_clicked(self):
         view = MockView()
@@ -1190,8 +1190,8 @@
         view.reply_file_chooser_dialog = ['/tmp/test.json']
         exporter.on_btnbrowse_clicked('button')
         exporter.on_text_entry_changed('input_filename')
-        self.assertEquals(exporter.filename, '/tmp/test.json')
-        self.assertEquals(JSONImporter.last_folder, '/tmp')
+        self.assertEqual(exporter.filename, '/tmp/test.json')
+        self.assertEqual(JSONImporter.last_folder, '/tmp')
 
     def test_import_contact(self):
         ## T_0
@@ -1210,14 +1210,14 @@
 
         ## T_1
         summit = self.session.query(Contact).first()
-        self.assertNotEquals(summit, None)
+        self.assertNotEqual(summit, None)
 
 
 class GlobalFunctionsTests(BaubleTestCase):
     'Presenter manages view and model, implements view callbacks.'
     def test_json_serializer_datetime(self):
         import datetime
-        from iojson import serializedatetime
+        from .iojson import serializedatetime
         stamp = datetime.datetime(2011, 11, 11, 12, 13)
-        self.assertEquals(serializedatetime(stamp),
+        self.assertEqual(serializedatetime(stamp),
                           {'millis': 1321013580000, '__class__': 'datetime'})
--- ./bauble/plugins/imex/xml.py	(original)
+++ ./bauble/plugins/imex/xml.py	(refactored)
@@ -48,9 +48,9 @@
     el = etree.SubElement(parent, name, **kwargs)
     try:
         if text is not None:
-            el.text = unicode(text, 'utf8')
+            el.text = str(text, 'utf8')
     except (AssertionError, TypeError):
-        el.text = unicode(str(text), 'utf8')
+        el.text = str(str(text), 'utf8')
     return el
 
 
@@ -93,21 +93,21 @@
         if not one_file:
             tableset_el = etree.Element('tableset')
 
-        for table_name, table in db.metadata.tables.iteritems():
+        for table_name, table in db.metadata.tables.items():
             if one_file:
                 tableset_el = etree.Element('tableset')
             logger.info('exporting %s…' % table_name)
             table_el = ElementFactory(tableset_el, 'table',
                                       attrib={'name': table_name})
             results = table.select().execute().fetchall()
-            columns = table.c.keys()
+            columns = list(table.c.keys())
             try:
                 for row in results:
                     row_el = ElementFactory(table_el, 'row')
                     for col in columns:
                         ElementFactory(row_el, 'column', attrib={'name': col},
                                        text=row[col])
-            except ValueError, e:
+            except ValueError as e:
                 utils.message_details_dialog(utils.xml_safe(e),
                                              traceback.format_exc(),
                                              Gtk.MessageType.ERROR)
--- ./bauble/plugins/plants/__init__.py	(original)
+++ ./bauble/plugins/plants/__init__.py	(refactored)
@@ -60,8 +60,8 @@
     )
 from bauble.plugins.plants.geography import (
     Geography, get_species_in_geography)
-from taxonomy_check import TaxonomyCheckTool
-from stored_queries import (
+from .taxonomy_check import TaxonomyCheckTool
+from .stored_queries import (
     StoredQueryEditorTool)
 import bauble.search as search
 from bauble.view import SearchView
@@ -195,7 +195,7 @@
 
         ssn = db.Session()
         q = ssn.query(bauble.meta.BaubleMeta)
-        q = q.filter(bauble.meta.BaubleMeta.name.startswith(u'stqr'))
+        q = q.filter(bauble.meta.BaubleMeta.name.startswith('stqr'))
         name_tooltip_query = dict(
             (int(i.name[5:]), (i.value.split(':', 2)))
             for i in q.all())
@@ -310,7 +310,7 @@
             pass
 
     def on_splash_stqr_button_clicked(self, *args):
-        from stored_queries import edit_callback
+        from .stored_queries import edit_callback
         edit_callback()
 
 
@@ -376,20 +376,20 @@
         # suggest some useful defaults for stored queries
         import bauble.meta as meta
         session = db.Session()
-        default = u'false'
-        q = session.query(bauble.meta.BaubleMeta).filter(bauble.meta.BaubleMeta.name.startswith(u'stqr-'))
+        default = 'false'
+        q = session.query(bauble.meta.BaubleMeta).filter(bauble.meta.BaubleMeta.name.startswith('stqr-'))
         for i in q.all():
             default = i.name
             session.delete(i)
             session.commit()
-        init_marker = meta.get_default(u'stqv_initialized', default, session)
-        if init_marker.value == u'false':
-            init_marker.value = u'true'
+        init_marker = meta.get_default('stqv_initialized', default, session)
+        if init_marker.value == 'false':
+            init_marker.value = 'true'
             for index, name, tooltip, query in [
                     (9, _('history'), _('the history in this database'), ':history'),
                     (10, _('preferences'), _('your user preferences'), ':prefs')]:
-                meta.get_default(u'stqr_%02d' % index,
-                                 u"%s:%s:%s" % (name, tooltip, query),
+                meta.get_default('stqr_%02d' % index,
+                                 "%s:%s:%s" % (name, tooltip, query),
                                  session)
             session.commit()
         session.close()
@@ -403,10 +403,10 @@
         if not import_defaults:
             return
         path = os.path.join(paths.lib_dir(), "plugins", "plants", "default")
-        filenames = [os.path.join(path, f) for f in 'family.txt',
+        filenames = [os.path.join(path, f) for f in ('family.txt',
                      'family_synonym.txt',
                      'genus.txt', 'genus_synonym.txt', 'geography.txt',
-                     'habit.txt']
+                     'habit.txt')]
 
         from bauble.plugins.imex.csv_ import CSVImporter
         csv = CSVImporter()
--- ./bauble/plugins/plants/ask_tpl.py	(original)
+++ ./bauble/plugins/plants/ask_tpl.py	(refactored)
@@ -81,7 +81,7 @@
                                                 for k in l if k)]
             header = result[0]
             result = result[1:]
-            return [dict(zip(header, k)) for k in result if k[7] == '']
+            return [dict(list(zip(header, k))) for k in result if k[7] == '']
 
         class ShouldStopNow(Exception):
             pass
@@ -133,7 +133,7 @@
             logger.debug("%s interrupted : do not invoke callback",
                          self.name)
             return
-        except Exception, e:
+        except Exception as e:
             logger.debug("%s (%s)%s : completed with trouble",
                          self.name, type(e).__name__, e)
             self.__class__.running = None
--- ./bauble/plugins/plants/family.py	(original)
+++ ./bauble/plugins/plants/family.py	(refactored)
@@ -93,7 +93,7 @@
         obj = session.query(Family).get(family.id)
         session.delete(obj)
         session.commit()
-    except Exception, e:
+    except Exception as e:
         msg = _('Could not delete.\n\n%s') % utils.xml_safe(e)
         utils.message_details_dialog(msg, traceback.format_exc(),
                                      type=Gtk.MessageType.ERROR)
@@ -174,8 +174,8 @@
 
     # we use the blank string here instead of None so that the
     # contraints will work properly,
-    qualifier = Column(types.Enum(values=[u's. lat.', u's. str.', u'']),
-                       default=u'')
+    qualifier = Column(types.Enum(values=['s. lat.', 's. str.', '']),
+                       default='')
 
     # relations
     # `genera` relation is defined outside of `Family` class definition
@@ -453,7 +453,7 @@
             or self.notes_presenter.dirty()
 
     def refresh_view(self):
-        for widget, field in self.widget_to_field_map.iteritems():
+        for widget, field in self.widget_to_field_map.items():
             value = getattr(self.model, field)
             self.view.widget_set_value(widget, value)
 
@@ -629,12 +629,12 @@
                 if self.presenter.dirty():
                     self.commit_changes()
                     self._committed.append(self.model)
-            except DBAPIError, e:
+            except DBAPIError as e:
                 msg = _('Error committing changes.\n\n%s') % \
                     utils.xml_safe(e.orig)
                 utils.message_details_dialog(msg, str(e), Gtk.MessageType.ERROR)
                 return False
-            except Exception, e:
+            except Exception as e:
                 msg = _('Unknown error when committing changes. See the '
                         'details for more information.\n\n%s') % \
                     utils.xml_safe(e)
@@ -952,7 +952,7 @@
             for i in button_defaults:
                 prefs[self.family_web_button_defs_prefs + '.'
                       + i.get('name')] = {
-                          k: v for k, v in i.items() if k != 'name'
+                          k: v for k, v in list(i.items()) if k != 'name'
                       }
             prefs.save()
 
--- ./bauble/plugins/plants/genus.py	(original)
+++ ./bauble/plugins/plants/genus.py	(refactored)
@@ -105,7 +105,7 @@
         obj = session.query(Genus).get(genus.id)
         session.delete(obj)
         session.commit()
-    except Exception, e:
+    except Exception as e:
         msg = _('Could not delete.\n\n%s') % utils.xml_safe(e)
         utils.message_details_dialog(msg, traceback.format_exc(),
                                      type=Gtk.MessageType.ERROR)
@@ -188,9 +188,9 @@
     def hybrid_epithet(self):
         '''strip the leading char if it is an hybrid marker
         '''
-        if self.genus[0] in [u'x', u'×']:
+        if self.genus[0] in ['x', '×']:
             return self.genus[1:]
-        if self.genus[0] in [u'+', u'➕']:
+        if self.genus[0] in ['+', '➕']:
             return self.genus[1:]
         return self.genus
 
@@ -198,21 +198,21 @@
     def hybrid_marker(self):
         """Intergeneric Hybrid Flag (ITF2)
         """
-        if self.genus[0] in [u'x', u'×']:
-            return u'×'
-        if self.genus[0] in [u'+', u'➕']:
-            return u'+'
-        if self.genus.find(u'×') > 0:
+        if self.genus[0] in ['x', '×']:
+            return '×'
+        if self.genus[0] in ['+', '➕']:
+            return '+'
+        if self.genus.find('×') > 0:
             # the genus field contains a formula
-            return u'H'
-        return u''
+            return 'H'
+        return ''
 
     # columns
     genus = Column(String(64), nullable=False, index=True)
     epithet = synonym('genus')
 
     # use '' instead of None so that the constraints will work propertly
-    author = Column(Unicode(255), default=u'')
+    author = Column(Unicode(255), default='')
 
     @validates('genus', 'author')
     def validate_stripping(self, key, value):
@@ -220,8 +220,8 @@
             return None
         return value.strip()
 
-    qualifier = Column(types.Enum(values=['s. lat.', 's. str', u'']),
-                       default=u'')
+    qualifier = Column(types.Enum(values=['s. lat.', 's. str', '']),
+                       default='')
 
     family_id = Column(Integer, ForeignKey('family.id'), nullable=False)
 
@@ -329,7 +329,7 @@
 
     @classmethod
     def compute_serializable_fields(cls, session, keys):
-        from family import Family
+        from .family import Family
         result = {'family': None}
         ## retrieve family object
         if keys.get('ht-epithet'):
@@ -450,7 +450,7 @@
         if v.author is None:
             author = ''
         else:
-            author = utils.xml_safe(unicode(v.author))
+            author = utils.xml_safe(str(v.author))
         renderer.set_property('markup', '<i>%s</i> %s (<small>%s</small>)'
                               % (Genus.str(v), author, Family.str(v.family)))
 
@@ -588,7 +588,7 @@
                 self.notes_presenter.dirty())
 
     def refresh_view(self):
-        for widget, field in self.widget_to_field_map.iteritems():
+        for widget, field in self.widget_to_field_map.items():
             if field == 'family_id':
                 value = getattr(self.model, 'family')
             else:
@@ -663,7 +663,7 @@
             syn = v.synonym
             cell.set_property('markup', '<i>%s</i> %s (<small>%s</small>)'
                               % (Genus.str(syn),
-                                 utils.xml_safe(unicode(syn.author)),
+                                 utils.xml_safe(str(syn.author)),
                                  Family.str(syn.family)))
             # set background color to indicate it's new
             if v.id is None:
@@ -778,12 +778,12 @@
                 if self.presenter.dirty():
                     self.commit_changes()
                     self._committed.append(self.model)
-            except DBAPIError, e:
+            except DBAPIError as e:
                 msg = (_('Error committing changes.\n\n%s') %
                        utils.xml_safe(e.orig))
                 utils.message_details_dialog(msg, str(e), Gtk.MessageType.ERROR)
                 return False
-            except Exception, e:
+            except Exception as e:
                 msg = (_('Unknown error when committing changes. See the '
                          'details for more information.\n\n%s') %
                        utils.xml_safe(e))
@@ -897,10 +897,10 @@
         session = object_session(row)
         self.current_obj = row
         self.widget_set_value('gen_name_data', '<big>%s</big> %s' %
-                              (row, utils.xml_safe(unicode(row.author))),
+                              (row, utils.xml_safe(str(row.author))),
                               markup=True)
         self.widget_set_value('gen_fam_data',
-                              (utils.xml_safe(unicode(row.family))))
+                              (utils.xml_safe(str(row.family))))
 
         # get the number of species
         nsp = (session.query(Species).
@@ -1107,7 +1107,7 @@
         if not prefs.config.has_section(self.genus_web_button_defs_prefs):
             for i in button_defaults:
                 prefs[self.genus_web_button_defs_prefs + '.' + i.get('name')] \
-                    = {k: v for k, v in i.items() if k != 'name'}
+                    = {k: v for k, v in list(i.items()) if k != 'name'}
             prefs.save()
 
         butns = prefs.config.items(self.genus_web_button_defs_prefs)
--- ./bauble/plugins/plants/geography.py	(original)
+++ ./bauble/plugins/plants/geography.py	(refactored)
@@ -76,7 +76,7 @@
             except KeyError:
                 geos_hash[parent_id] = [(geo_id, name)]
 
-        for kids in geos_hash.values():
+        for kids in list(geos_hash.values()):
             kids.sort(key=itemgetter(1))  # sort by name
 
         def get_kids(pid):
@@ -132,7 +132,7 @@
                 return
             no_kids = []
             for geo_id, geo_name in geos_hash[None]:
-                if geo_id not in geos_hash.keys():
+                if geo_id not in list(geos_hash.keys()):
                     no_kids.append((geo_id, geo_name))
                 else:
                     self.append(build_menu(geo_id, geo_name))
--- ./bauble/plugins/plants/species.py	(original)
+++ ./bauble/plugins/plants/species.py	(refactored)
@@ -93,7 +93,7 @@
         obj = session.query(Species).get(species.id)
         session.delete(obj)
         session.commit()
-    except Exception, e:
+    except Exception as e:
         msg = _('Could not delete.\n\n%s') % utils.xml_safe(e)
         utils.message_details_dialog(msg, traceback.format_exc(),
                                      type=Gtk.MessageType.ERROR)
@@ -144,7 +144,7 @@
             prefs.save()
 
     def search(self, text, session):
-        from genus import Genus, GenusSynonym
+        from .genus import Genus, GenusSynonym
         super(SynonymSearch, self).search(text, session)
         if not prefs[self.return_synonyms_pref]:
             return []
@@ -328,7 +328,7 @@
         # TODO put genus markup in genus.markup() like species.markup()
         genus = row.genus.genus
         if not genus.isupper():
-            genus = u'<i>{}</i>'.format(genus).replace(u'x ', u'</i>×<i>')
+            genus = '<i>{}</i>'.format(genus).replace('x ', '</i>×<i>')
         self.widget_set_value('sp_gen_data', '<big>%s</big>' %
                               genus, markup=True)
         utils.make_label_clickable(
@@ -402,7 +402,7 @@
         super(SpeciesInfoBox, self).__init__(tabbed=True)
         page = SpeciesInfoPage()
         label = page.label
-        if isinstance(label, basestring):
+        if isinstance(label, str):
             label = Gtk.Label(label=label)
         self.insert_page(page, label, 0)
 
@@ -552,7 +552,7 @@
             for i in button_defaults:
                 prefs[self.species_web_button_defs_prefs + '.'
                       + i.get('name')] = {
-                          k: v for k, v in i.items() if k != 'name'
+                          k: v for k, v in list(i.items()) if k != 'name'
                       }
             prefs.save()
 
--- ./bauble/plugins/plants/species_editor.py	(original)
+++ ./bauble/plugins/plants/species_editor.py	(refactored)
@@ -98,8 +98,8 @@
 
         combo = self.view.widgets.sp_habit_comboentry
         model = Gtk.ListStore(str, object)
-        map(lambda p: model.append(p),
-            [(str(h), h) for h in self.session.query(Habit)])
+        list(map(lambda p: model.append(p),
+            [(str(h), h) for h in self.session.query(Habit)]))
         utils.setup_text_combobox(combo, model)
 
         def on_focus_out(entry, event):
@@ -124,7 +124,7 @@
 
         # connect signals
         def gen_get_completions(text):
-            clause = utils.ilike(Genus.genus, '%s%%' % unicode(text))
+            clause = utils.ilike(Genus.genus, '%s%%' % str(text))
             return self.session.query(Genus).filter(clause).\
                 order_by(Genus.genus)
 
@@ -141,14 +141,14 @@
             self.view.close_boxes()
             if found:
                 found = dict((k, utils.to_unicode(v))
-                             for k, v in found.items())
+                             for k, v in list(found.items()))
                 found_s = dict((k, utils.xml_safe(utils.to_unicode(v)))
-                               for k, v in found.items())
+                               for k, v in list(found.items()))
             if accepted:
                 accepted = dict((k, utils.to_unicode(v))
-                                for k, v in accepted.items())
+                                for k, v in list(accepted.items()))
                 accepted_s = dict((k, utils.xml_safe(utils.to_unicode(v)))
-                                  for k, v in accepted.items())
+                                  for k, v in list(accepted.items()))
 
             msg_box_msg = _('No match found on ThePlantList.org')
 
@@ -158,7 +158,7 @@
                 if (self.model.sp == found['Species'] and
                         self.model.sp_author == found['Authorship'] and
                         self.model.hybrid == (
-                            found['Species hybrid marker'] == u'×')):
+                            found['Species hybrid marker'] == '×')):
                     msg_box_msg = _(
                         'your data finely matches ThePlantList.org')
                 else:
@@ -178,7 +178,7 @@
                             self.set_model_attr('sp_author', found['Authorship'])
                             self.set_model_attr(
                                 'hybrid',
-                                found['Species hybrid marker'] == u'×')
+                                found['Species hybrid marker'] == '×')
                             self.refresh_view()
                             self.refresh_fullname_label()
                     box.on_response = on_response_found
@@ -243,7 +243,7 @@
         def on_sp_species_button_clicked(widget, event=None):
             # the real activity runs in a separate thread.
             logger.debug('sp_species button clicked, importing AskTpl')
-            from ask_tpl import AskTPL
+            from .ask_tpl import AskTPL
 
             while self.species_check_messages:
                 kid = self.species_check_messages.pop()
@@ -428,14 +428,14 @@
         # imediately allow spaces for names that fit our allowances. Works only
         # on the first pass when opening a species for an edit or when pasting
         # in text.  Without it spaces are removed when opened to edit.
-        if any(i for i in (text.count(u'×'),
-                           text.count(u' ('),
+        if any(i for i in (text.count('×'),
+                           text.count(' ('),
                            text[:4] == 'sp. ')):
             self.species_space = True
 
-        if text.count(u'*'):
+        if text.count('*'):
             self.species_space = True
-            text = text.replace(u'*', u" × ")
+            text = text.replace('*', " × ")
         # allow provisional names for unnamed species(e.g. 'sp. nov.'
         # 'sp. (OrmeauL.H.Bird AQ435851)') - see ITF2 - Species Epithet:
         # Rule of information 1.2
@@ -449,9 +449,9 @@
         # (although not strictly ITF2 compliant the practice is in common use)
         # note this will add the space in when adding a ( only if spaces have
         # not already been allowed due to one of the other rules.
-        if text == (u'(') and self.species_space is False:
+        if text == ('(') and self.species_space is False:
             self.species_space = True
-            text = text.replace(u'(', u" (")
+            text = text.replace('(', " (")
 
         if self.species_space is False:
             text = text.replace(' ', '')
@@ -529,7 +529,7 @@
         return r
 
     def refresh_view(self):
-        for widget, field in self.widget_to_field_map.iteritems():
+        for widget, field in self.widget_to_field_map.items():
             if field is 'genus_id':
                 value = self.model.genus
             else:
@@ -911,7 +911,7 @@
                 cell.set_property(
                     'active', v == self.model.default_vernacular_name)
                 return
-            except AttributeError, e:
+            except AttributeError as e:
                 logger.debug("AttributeError %s" % e)
                 pass
             cell.set_property('active', False)
@@ -1203,14 +1203,14 @@
         '''
         save the current state of the gui to the preferences
         '''
-        for expander, pref in self.expanders_pref_map.iteritems():
+        for expander, pref in self.expanders_pref_map.items():
             prefs[pref] = self.widgets[expander].get_expanded()
 
     def restore_state(self):
         '''
         restore the state of the gui from the preferences
         '''
-        for expander, pref in self.expanders_pref_map.iteritems():
+        for expander, pref in self.expanders_pref_map.items():
             expanded = prefs.get(pref, True)
             self.widgets[expander].set_expanded(expanded)
 
@@ -1271,13 +1271,13 @@
                 if self.presenter.is_dirty():
                     self.commit_changes()
                     self._committed.append(self.model)
-            except DBAPIError, e:
+            except DBAPIError as e:
                 msg = _('Error committing changes.\n\n%s') % \
                     utils.xml_safe(e.orig)
                 logger.debug(traceback.format_exc())
                 utils.message_details_dialog(msg, str(e), Gtk.MessageType.ERROR)
                 return False
-            except Exception, e:
+            except Exception as e:
                 msg = _('Unknown error when committing changes. See the '
                         'details for more information.\n\n%s') % \
                     utils.xml_safe(e)
--- ./bauble/plugins/plants/species_model.py	(original)
+++ ./bauble/plugins/plants/species_model.py	(refactored)
@@ -42,7 +42,7 @@
 def _remove_zws(s):
     "remove_zero_width_space"
     if s:
-        return s.replace(u'\u200b', '')
+        return s.replace('\u200b', '')
     return s
 
 
@@ -59,16 +59,16 @@
         try:
             if vn.species.default_vernacular_name == vn:
                 del vn.species.default_vernacular_name
-        except Exception, e:
+        except Exception as e:
             logger.debug("%s(%s)" % (type(e).__name__, e))
 
 
-infrasp_rank_values = {u'subsp.': _('subsp.'),
-                       u'var.': _('var.'),
-                       u'subvar.': _('subvar'),
-                       u'f.': _('f.'),
-                       u'subf.': _('subf.'),
-                       u'cv.': _('cv.'),
+infrasp_rank_values = {'subsp.': _('subsp.'),
+                       'var.': _('var.'),
+                       'subvar.': _('subvar'),
+                       'f.': _('f.'),
+                       'subf.': _('subf.'),
+                       'cv.': _('cv.'),
                        None: ''}
 
 
@@ -85,9 +85,9 @@
 def compare_rank(rank1, rank2):
     'implement the binary comparison operation needed for sorting'
 
-    ordering = [u'familia', u'subfamilia', u'tribus', u'subtribus',
-                u'genus', u'subgenus', u'species', None, u'subsp.',
-                u'var.', u'subvar.', u'f.', u'subf.', u'cv.']
+    ordering = ['familia', 'subfamilia', 'tribus', 'subtribus',
+                'genus', 'subgenus', 'species', None, 'subsp.',
+                'var.', 'subvar.', 'f.', 'subf.', 'cv.']
     return ordering.index(rank1).__cmp__(ordering.index(rank2))
 
 
@@ -180,7 +180,7 @@
                 citation = citation.replace(authorship_text, '<span weight="light">' + authorship_text + '</span>')
             return citation + trail, substring
         except:
-            return u'...', u'...'
+            return '...', '...'
 
     @property
     def cites(self):
@@ -191,7 +191,7 @@
         '''
 
         cites_notes = [i.note for i in self.notes
-                       if i.category and i.category.upper() == u'CITES']
+                       if i.category and i.category.upper() == 'CITES']
         if not cites_notes:
             return self.genus.cites
         return cites_notes[0]
@@ -216,7 +216,7 @@
          'NE': _('Not Evaluated (NE)')}
 
         notes = [i.note for i in self.notes
-                 if i.category and i.category.upper() == u'IUCN']
+                 if i.category and i.category.upper() == 'IUCN']
         return (notes + ['DD'])[0]
 
     @property
@@ -230,7 +230,7 @@
         [_('endemic'), _('indigenous'), _('native'), _('introduced')]
 
         notes = [i.note for i in self.notes
-                 if i.category.lower() == u'condition']
+                 if i.category.lower() == 'condition']
         return (notes + [None])[0]
 
     def __lowest_infraspecific(self):
@@ -242,22 +242,22 @@
                     self.infrasp3_author),
                    (self.infrasp4_rank, self.infrasp4,
                     self.infrasp4_author)]
-        infrasp = [i for i in infrasp if i[0] not in [u'cv.', '', None]]
+        infrasp = [i for i in infrasp if i[0] not in ['cv.', '', None]]
         if infrasp == []:
-            return (u'', u'', u'')
+            return ('', '', '')
         return sorted(infrasp, cmp=lambda a, b: compare_rank(a[0], b[0]))[-1]
 
     @property
     def infraspecific_rank(self):
-        return self.__lowest_infraspecific()[0] or u''
+        return self.__lowest_infraspecific()[0] or ''
 
     @property
     def infraspecific_epithet(self):
-        return self.__lowest_infraspecific()[1] or u''
+        return self.__lowest_infraspecific()[1] or ''
 
     @property
     def infraspecific_author(self):
-        return self.__lowest_infraspecific()[2] or u''
+        return self.__lowest_infraspecific()[2] or ''
 
     @property
     def cultivar_epithet(self):
@@ -270,9 +270,9 @@
                    (self.infrasp4_rank, self.infrasp4,
                     self.infrasp4_author))
         for rank, epithet, author in infrasp:
-            if rank == u'cv.':
+            if rank == 'cv.':
                 return epithet
-        return u''
+        return ''
 
     # columns
     sp = Column(Unicode(64), index=True)
@@ -286,22 +286,22 @@
     trade_name = Column(Unicode(64))
 
     infrasp1 = Column(Unicode(64))
-    infrasp1_rank = Column(types.Enum(values=infrasp_rank_values.keys(),
+    infrasp1_rank = Column(types.Enum(values=list(infrasp_rank_values.keys()),
                                       translations=infrasp_rank_values))
     infrasp1_author = Column(Unicode(64))
 
     infrasp2 = Column(Unicode(64))
-    infrasp2_rank = Column(types.Enum(values=infrasp_rank_values.keys(),
+    infrasp2_rank = Column(types.Enum(values=list(infrasp_rank_values.keys()),
                                       translations=infrasp_rank_values))
     infrasp2_author = Column(Unicode(64))
 
     infrasp3 = Column(Unicode(64))
-    infrasp3_rank = Column(types.Enum(values=infrasp_rank_values.keys(),
+    infrasp3_rank = Column(types.Enum(values=list(infrasp_rank_values.keys()),
                                       translations=infrasp_rank_values))
     infrasp3_author = Column(Unicode(64))
 
     infrasp4 = Column(Unicode(64))
-    infrasp4_rank = Column(types.Enum(values=infrasp_rank_values.keys(),
+    infrasp4_rank = Column(types.Enum(values=list(infrasp_rank_values.keys()),
                                       translations=infrasp_rank_values))
     infrasp4_author = Column(Unicode(64))
 
@@ -381,7 +381,7 @@
             return ''
         else:
             dist = ['%s' % d for d in self.distribution]
-            return unicode(', ').join(sorted(dist))
+            return str(', ').join(sorted(dist))
 
     def markup(self, authors=False, genus=True):
         '''returns this object as a string with markup
@@ -393,7 +393,7 @@
         return self.str(authors, markup=True, genus=genus)
 
     # in PlantPlugins.init() we set this to 'x' for win32
-    hybrid_char = u'×'
+    hybrid_char = '×'
 
     def str(self, authors=False, markup=False, remove_zws=False, genus=True,
             qualification=None):
@@ -417,7 +417,7 @@
         else:
             genus = ''
         if self.sp and not remove_zws:
-            sp = u'\u200b' + self.sp  # prepend with zero_width_space
+            sp = '\u200b' + self.sp  # prepend with zero_width_space
         else:
             sp = self.sp
         sp2 = self.sp2
@@ -427,8 +427,8 @@
             if genus.isupper():
                 genus = escape(genus)
             else:
-                genus = u'<i>{}</i>'.format(
-                    escape(genus).replace(u'x ', u'</i>×<i>'))
+                genus = '<i>{}</i>'.format(
+                    escape(genus).replace('x ', '</i>×<i>'))
             if sp is not None:
                 sp = italicize(escape(sp))
             if sp2 is not None:
@@ -582,7 +582,7 @@
 
     def as_dict(self, recurse=True):
         result = dict((col, getattr(self, col))
-                      for col in self.__table__.columns.keys()
+                      for col in list(self.__table__.columns.keys())
                       if col not in ['id', 'sp']
                       and col[0] != '_'
                       and getattr(self, col) is not None
@@ -607,7 +607,7 @@
     @classmethod
     def retrieve(cls, session, keys):
         logger.debug('retrieve species with keys %s', keys)
-        from genus import Genus
+        from .genus import Genus
         # NOTE need to include infrasp parts if they are included in keys...
         # Issue is they have to match exactly or won't get the right item back
         # make sure to include only parts we know we can search
@@ -623,7 +623,7 @@
             'infrasp4',
             'infrasp4_rank'
         }
-        sp_parts = {key: keys[key] for key in _parts.intersection(keys.keys())}
+        sp_parts = {key: keys[key] for key in _parts.intersection(list(keys.keys()))}
         logger.debug('sp_parts in keys %s', sp_parts)
         # only add the sp part in if there is a value to give it. (e.g.
         # cultivars may not have a sp value)
@@ -646,7 +646,7 @@
 
     @classmethod
     def compute_serializable_fields(cls, session, keys):
-        from genus import Genus
+        from .genus import Genus
         result = {'genus': None}
         ## retrieve genus object
         specifies_family = keys.get('familia')
@@ -688,7 +688,7 @@
     return result
 
 def retrieve(cls, session, keys):
-    from genus import Genus
+    from .genus import Genus
     genus, epithet = keys['species'].split(' ', 1)
     try:
         return session.query(cls).filter(
@@ -788,7 +788,7 @@
 
     @classmethod
     def retrieve(cls, session, keys):
-        from genus import Genus
+        from .genus import Genus
         g_epithet, s_epithet = keys['species'].split(' ', 1)
         sp = session.query(Species).filter(
             Species.sp == s_epithet).join(Genus).filter(
--- ./bauble/plugins/plants/stored_queries.py	(original)
+++ ./bauble/plugins/plants/stored_queries.py	(refactored)
@@ -36,7 +36,7 @@
         self.__query = [''] * 11
         ssn = db.Session()
         q = ssn.query(meta.BaubleMeta)
-        stqrq = q.filter(meta.BaubleMeta.name.startswith(u'stqr_'))
+        stqrq = q.filter(meta.BaubleMeta.name.startswith('stqr_'))
         for item in stqrq:
             if item.name[4] != '_':
                 continue
@@ -54,18 +54,18 @@
         for index in range(1, 11):
             if self.__label[index] == '':
                 ssn.query(meta.BaubleMeta).\
-                    filter_by(name=u'stqr_%02d' % index).\
+                    filter_by(name='stqr_%02d' % index).\
                     delete()
             else:
                 obj = db.get_or_create(ssn, meta.BaubleMeta,
-                                       name=u'stqr_%02d' % index)
+                                       name='stqr_%02d' % index)
                 if obj.value != self[index]:
                     obj.value = self[index]
         ssn.commit()
         ssn.close()
 
     def __getitem__(self, index):
-        return u'%s:%s:%s' % (self.__label[index],
+        return '%s:%s:%s' % (self.__label[index],
                               self.__tooltip[index],
                               self.__query[index])
 
@@ -77,7 +77,7 @@
         self.__index = 0
         return self
 
-    def next(self):
+    def __next__(self):
         if self.__index == 10:
             raise StopIteration
         else:
--- ./bauble/plugins/plants/stored_queries_test.py	(original)
+++ ./bauble/plugins/plants/stored_queries_test.py	(refactored)
@@ -30,47 +30,47 @@
     def test_initialize_model(self):
         m = StoredQueriesModel()
         for i in range(1, 9):
-            self.assertEquals(m[i], '::')
+            self.assertEqual(m[i], '::')
 
     def test_initialize_has_defaults(self):
         m = StoredQueriesModel()
         for i in range(9, 11):
-            self.assertNotEquals(m[i], '::')
+            self.assertNotEqual(m[i], '::')
 
 
 class StoredQueriesTests(BaubleTestCase):
     def test_define_label(self):
         m = StoredQueriesModel()
         m.label = 'n=1'
-        self.assertEquals(m.label, 'n=1')
-        m.page = 2
-        self.assertEquals(m.label, '')
+        self.assertEqual(m.label, 'n=1')
+        m.page = 2
+        self.assertEqual(m.label, '')
         m.label = 'n=2'
-        self.assertEquals(m.label, 'n=2')
-        m.page = 1
-        self.assertEquals(m.label, 'n=1')
+        self.assertEqual(m.label, 'n=2')
+        m.page = 1
+        self.assertEqual(m.label, 'n=1')
 
     def test_define_tooltip(self):
         m = StoredQueriesModel()
         m.tooltip = 'n=1'
-        self.assertEquals(m.tooltip, 'n=1')
-        m.page = 2
-        self.assertEquals(m.tooltip, '')
+        self.assertEqual(m.tooltip, 'n=1')
+        m.page = 2
+        self.assertEqual(m.tooltip, '')
         m.tooltip = 'n=2'
-        self.assertEquals(m.tooltip, 'n=2')
-        m.page = 1
-        self.assertEquals(m.tooltip, 'n=1')
+        self.assertEqual(m.tooltip, 'n=2')
+        m.page = 1
+        self.assertEqual(m.tooltip, 'n=1')
 
     def test_define_query(self):
         m = StoredQueriesModel()
         m.query = 'n=1'
-        self.assertEquals(m.query, 'n=1')
-        m.page = 2
-        self.assertEquals(m.query, '')
+        self.assertEqual(m.query, 'n=1')
+        m.page = 2
+        self.assertEqual(m.query, '')
         m.query = 'n=2'
-        self.assertEquals(m.query, 'n=2')
-        m.page = 1
-        self.assertEquals(m.query, 'n=1')
+        self.assertEqual(m.query, 'n=2')
+        m.page = 1
+        self.assertEqual(m.query, 'n=1')
 
     def test_loop(self):
         m = StoredQueriesModel()
@@ -86,13 +86,13 @@
         m.query = 'q=2'
 
         after = [i for i in before]
-        after[0] = u'l=1:t=1:q=1'
-        after[1] = u'l=2:t=2:q=2'
-        self.assertEquals(m[1], after[0])
-        self.assertEquals(m[2], after[1])
-        self.assertEquals(m[3], '::')
-
-        self.assertEquals([i for i in m], after)
+        after[0] = 'l=1:t=1:q=1'
+        after[1] = 'l=2:t=2:q=2'
+        self.assertEqual(m[1], after[0])
+        self.assertEqual(m[2], after[1])
+        self.assertEqual(m[3], '::')
+
+        self.assertEqual([i for i in m], after)
 
     def test_setgetitem(self):
         m = StoredQueriesModel()
@@ -102,9 +102,9 @@
         after = [i for i in m]
         for i, v in enumerate(after):
             if i in [0, 3]:
-                self.assertEquals(after[i], 'l:t:q')
+                self.assertEqual(after[i], 'l:t:q')
             else:
-                self.assertEquals(after[i], before[i])
+                self.assertEqual(after[i], before[i])
 
     def test_save(self):
         m = StoredQueriesModel()
@@ -112,7 +112,7 @@
         m[4] = 'l:t:q'
         m.save()
         n = StoredQueriesModel()
-        self.assertEquals([i for i in n], [k for k in m])
+        self.assertEqual([i for i in n], [k for k in m])
         self.assertFalse(id(n) == id(m))
 
     def test_save_overwrite(self):
@@ -124,7 +124,7 @@
         n[5] = 'l:t:q'
         n.save()
         m = StoredQueriesModel()
-        self.assertEquals([i for i in n], [k for k in m])
+        self.assertEqual([i for i in n], [k for k in m])
         self.assertFalse(id(n) == id(m))
 
 
@@ -134,8 +134,8 @@
         view = MockView()
         m = StoredQueriesModel()
         presenter = StoredQueriesPresenter(m, view)
-        self.assertEquals(presenter.view, view)
-        self.assertEquals(id(presenter.model), id(m))
+        self.assertEqual(presenter.view, view)
+        self.assertEqual(id(presenter.model), id(m))
 
     def test_change_page(self):
         view = MockView()
@@ -156,30 +156,30 @@
         view = MockView()
         m = StoredQueriesModel()
         presenter = StoredQueriesPresenter(m, view)
-        self.assertEquals(m.page, 1)
+        self.assertEqual(m.page, 1)
         presenter.on_next_button_clicked(None)
-        self.assertEquals(m.page, 2)
+        self.assertEqual(m.page, 2)
         presenter.on_next_button_clicked(None)
-        self.assertEquals(m.page, 3)
+        self.assertEqual(m.page, 3)
 
     def test_prev_page(self):
         view = MockView()
         m = StoredQueriesModel()
         presenter = StoredQueriesPresenter(m, view)
-        self.assertEquals(m.page, 1)
+        self.assertEqual(m.page, 1)
         presenter.on_prev_button_clicked(None)
-        self.assertEquals(m.page, 10)
+        self.assertEqual(m.page, 10)
         presenter.on_prev_button_clicked(None)
-        self.assertEquals(m.page, 9)
+        self.assertEqual(m.page, 9)
 
     def test_select_page(self):
         view = MockView()
         m = StoredQueriesModel()
         presenter = StoredQueriesPresenter(m, view)
-        self.assertEquals(m.page, 1)
+        self.assertEqual(m.page, 1)
         bname = 'stqr_05_button'
         presenter.on_button_clicked(bname)
-        self.assertEquals(m.page, 5)
+        self.assertEqual(m.page, 5)
         self.assertTrue(('widget_set_active', (bname, True)) in
                         presenter.view.invoked_detailed)
         self.assertTrue(('widget_set_active', ('stqr_01_button', False)) in
@@ -191,15 +191,15 @@
         presenter = StoredQueriesPresenter(m, view)
         bname = 'stqr_04_button'
         presenter.on_button_clicked(bname)
-        self.assertEquals(m.page, 4)
+        self.assertEqual(m.page, 4)
         presenter.view.values['stqr_label_entry'] = 'abc'
         presenter.on_label_entry_changed('stqr_label_entry')
-        print presenter.view.invoked_detailed
-        self.assertEquals(m.label, 'abc')
+        print(presenter.view.invoked_detailed)
+        self.assertEqual(m.label, 'abc')
         self.assertTrue(('widget_set_text', ('stqr_04_label', 'abc')) in
                         presenter.view.invoked_detailed)
         presenter.view.values['stqr_label_entry'] = ''
         presenter.on_label_entry_changed('stqr_label_entry')
-        self.assertEquals(m.label, '')
+        self.assertEqual(m.label, '')
         self.assertTrue(('widget_set_text', ('stqr_04_label', '<empty>')) in
                         presenter.view.invoked_detailed)
--- ./bauble/plugins/plants/taxonomy_check.py	(original)
+++ ./bauble/plugins/plants/taxonomy_check.py	(refactored)
@@ -17,6 +17,7 @@
 
 import os
 import logging
+from functools import reduce
 logger = logging.getLogger(__name__)
 from bauble import paths, pluginmgr, utils
 from bauble.plugins.plants import Species
@@ -152,9 +153,9 @@
             for l in f.readlines():
                 l = l.strip()
                 values = [i.strip() for i in l.split("\t")]
-                responses.append(dict(zip(keys, values)))
+                responses.append(dict(list(zip(keys, values))))
         for binomial, response in zip(self.binomials, responses):
-            acceptable = response['Name_matched_rank'] == u'species'
+            acceptable = response['Name_matched_rank'] == 'species'
             row = [acceptable,
                    acceptable and YES_ICON or NO_ICON,
                    binomial]
--- ./bauble/plugins/plants/taxonomy_check_test.py	(original)
+++ ./bauble/plugins/plants/taxonomy_check_test.py	(refactored)
@@ -17,7 +17,7 @@
 #
 
 from bauble.test import BaubleTestCase
-from taxonomy_check import species_to_fix
+from .taxonomy_check import species_to_fix
 from bauble.plugins.plants.family import Family
 from bauble.plugins.plants.genus import Genus
 
@@ -26,25 +26,25 @@
 
     def setUp(self):
         super(TestOne, self).setUp()
-        family = Family(family=u'Amaranthaceae')
-        genus = Genus(family=family, genus=u'Salsola')
+        family = Family(family='Amaranthaceae')
+        genus = Genus(family=family, genus='Salsola')
         self.session.add_all([family, genus])
         self.session.commit()
 
     def test_species_author(self):
-        s = species_to_fix(self.session, u'Salsola kali', u'L.', True)
-        self.assertEquals(s.sp, u'kali')
-        self.assertEquals(s.sp_author, u'L.')
-        self.assertEquals(s.infraspecific_rank, '')
-        self.assertEquals(s.infraspecific_epithet, '')
-        self.assertEquals(s.infraspecific_author, '')
+        s = species_to_fix(self.session, 'Salsola kali', 'L.', True)
+        self.assertEqual(s.sp, 'kali')
+        self.assertEqual(s.sp_author, 'L.')
+        self.assertEqual(s.infraspecific_rank, '')
+        self.assertEqual(s.infraspecific_epithet, '')
+        self.assertEqual(s.infraspecific_author, '')
 
     def test_subspecies_author(self):
-        s = species_to_fix(self.session, u'Salsola kali subsp. tragus', u'(L.) Čelak.', True)
-        self.assertEquals(s.sp, u'kali')
-        self.assertEquals(s.sp_author, None)
-        self.assertEquals(s.infraspecific_rank, u'subsp.')
-        self.assertEquals(s.infraspecific_epithet, u'tragus')
-        self.assertEquals(s.infraspecific_author, u'(L.) Čelak.')
+        s = species_to_fix(self.session, 'Salsola kali subsp. tragus', '(L.) Čelak.', True)
+        self.assertEqual(s.sp, 'kali')
+        self.assertEqual(s.sp_author, None)
+        self.assertEqual(s.infraspecific_rank, 'subsp.')
+        self.assertEqual(s.infraspecific_epithet, 'tragus')
+        self.assertEqual(s.infraspecific_author, '(L.) Čelak.')
 
     
--- ./bauble/plugins/plants/test.py	(original)
+++ ./bauble/plugins/plants/test.py	(refactored)
@@ -65,99 +65,99 @@
 
 
 family_test_data = (
-    {'id': 1, 'family': u'Orchidaceae'},
-    {'id': 2, 'family': u'Leguminosae', 'qualifier': u's. str.'},
-    {'id': 3, 'family': u'Polypodiaceae'},
-    {'id': 4, 'family': u'Solanaceae'},
+    {'id': 1, 'family': 'Orchidaceae'},
+    {'id': 2, 'family': 'Leguminosae', 'qualifier': 's. str.'},
+    {'id': 3, 'family': 'Polypodiaceae'},
+    {'id': 4, 'family': 'Solanaceae'},
     )
 
 family_note_test_data = (
-    {'id': 1, 'family_id': 1, 'category': u'CITES', 'note': u'II'},
+    {'id': 1, 'family_id': 1, 'category': 'CITES', 'note': 'II'},
     )
 
 genus_test_data = (
-    {'id': 1, 'genus': u'Maxillaria', 'family_id': 1},
-    {'id': 2, 'genus': u'Encyclia', 'family_id': 1},
-    {'id': 3, 'genus': u'Abrus', 'family_id': 2},
-    {'id': 4, 'genus': u'Campyloneurum', 'family_id': 3},
-    {'id': 5, 'genus': u'Paphiopedilum', 'family_id': 1},
-    {'id': 6, 'genus': u'Laelia', 'family_id': 1},
-    {'id': 7, 'genus': u'Brugmansia', 'family_id': 4},
+    {'id': 1, 'genus': 'Maxillaria', 'family_id': 1},
+    {'id': 2, 'genus': 'Encyclia', 'family_id': 1},
+    {'id': 3, 'genus': 'Abrus', 'family_id': 2},
+    {'id': 4, 'genus': 'Campyloneurum', 'family_id': 3},
+    {'id': 5, 'genus': 'Paphiopedilum', 'family_id': 1},
+    {'id': 6, 'genus': 'Laelia', 'family_id': 1},
+    {'id': 7, 'genus': 'Brugmansia', 'family_id': 4},
     )
 
 genus_note_test_data = (
-    {'id': 1, 'genus_id': 5, 'category': u'CITES', 'note': u'I'},
+    {'id': 1, 'genus_id': 5, 'category': 'CITES', 'note': 'I'},
     )
 
 species_test_data = (
-    {'id': 1, 'sp': u'variabilis', 'genus_id': 1,
-     'sp_author': u'Bateman ex Lindl.'},
-    {'id': 2, 'sp': u'cochleata', 'genus_id': 2,
-     'sp_author': u'(L.) Lem\xe9e'},
-    {'id': 3, 'sp': u'precatorius', 'genus_id': 3,
-     'sp_author': u'L.'},
-    {'id': 4, 'sp': u'alapense', 'genus_id': 4,
-     'hybrid': True, 'sp_author': u'F\xe9e'},
-    {'id': 5, 'sp': u'cochleata', 'genus_id': 2,
-     'sp_author': u'(L.) Lem\xe9e',
-     'infrasp1_rank': u'var.', 'infrasp1': u'cochleata'},
-    {'id': 6, 'sp': u'cochleata', 'genus_id': 2,
-     'sp_author': u'(L.) Lem\xe9e',
-     'infrasp1_rank': u'cv.', 'infrasp1': u'Black Night'},
-    {'id': 7, 'sp': u'precatorius', 'genus_id': 3,
-     'sp_author': u'L.', 'cv_group': u'SomethingRidiculous'},
-    {'id': 8, 'sp': u'precatorius', 'genus_id': 3,
-     'sp_author': u'L.',
-     'infrasp1_rank': u'cv.', 'infrasp1': u'Hot Rio Nights',
-     'cv_group': u'SomethingRidiculous'},
-    {'id': 9, 'sp': u'generalis', 'genus_id': 1,
+    {'id': 1, 'sp': 'variabilis', 'genus_id': 1,
+     'sp_author': 'Bateman ex Lindl.'},
+    {'id': 2, 'sp': 'cochleata', 'genus_id': 2,
+     'sp_author': '(L.) Lem\xe9e'},
+    {'id': 3, 'sp': 'precatorius', 'genus_id': 3,
+     'sp_author': 'L.'},
+    {'id': 4, 'sp': 'alapense', 'genus_id': 4,
+     'hybrid': True, 'sp_author': 'F\xe9e'},
+    {'id': 5, 'sp': 'cochleata', 'genus_id': 2,
+     'sp_author': '(L.) Lem\xe9e',
+     'infrasp1_rank': 'var.', 'infrasp1': 'cochleata'},
+    {'id': 6, 'sp': 'cochleata', 'genus_id': 2,
+     'sp_author': '(L.) Lem\xe9e',
+     'infrasp1_rank': 'cv.', 'infrasp1': 'Black Night'},
+    {'id': 7, 'sp': 'precatorius', 'genus_id': 3,
+     'sp_author': 'L.', 'cv_group': 'SomethingRidiculous'},
+    {'id': 8, 'sp': 'precatorius', 'genus_id': 3,
+     'sp_author': 'L.',
+     'infrasp1_rank': 'cv.', 'infrasp1': 'Hot Rio Nights',
+     'cv_group': 'SomethingRidiculous'},
+    {'id': 9, 'sp': 'generalis', 'genus_id': 1,
      'hybrid': True,
-     'infrasp1_rank': u'cv.', 'infrasp1': u'Red'},
-    {'id': 10, 'sp': u'generalis', 'genus_id': 1,
-     'hybrid': True, 'sp_author': u'L.',
-     'infrasp1_rank': u'cv.', 'infrasp1': u'Red',
-     'cv_group': u'SomeGroup'},
-    {'id': 11, 'sp': u'generalis', 'genus_id': 1,
-     'sp_qual': u'agg.'},
-    {'id': 12, 'genus_id': 1, 'cv_group': u'SomeGroup'},
+     'infrasp1_rank': 'cv.', 'infrasp1': 'Red'},
+    {'id': 10, 'sp': 'generalis', 'genus_id': 1,
+     'hybrid': True, 'sp_author': 'L.',
+     'infrasp1_rank': 'cv.', 'infrasp1': 'Red',
+     'cv_group': 'SomeGroup'},
+    {'id': 11, 'sp': 'generalis', 'genus_id': 1,
+     'sp_qual': 'agg.'},
+    {'id': 12, 'genus_id': 1, 'cv_group': 'SomeGroup'},
     {'id': 13, 'genus_id': 1,
-     'infrasp1_rank': u'cv.', 'infrasp1': u'Red'},
+     'infrasp1_rank': 'cv.', 'infrasp1': 'Red'},
     {'id': 14, 'genus_id': 1,
-     'infrasp1_rank': u'cv.', 'infrasp1': u'Red & Blue'},
-    {'id': 15, 'sp': u'cochleata', 'genus_id': 2,
-     'sp_author': u'L.',
-     'infrasp1_rank': u'subsp.', 'infrasp1': u'cochleata',
-     'infrasp1_author': u'L.',
-     'infrasp2_rank': u'var.', 'infrasp2': u'cochleata',
-     'infrasp2_author': u'L.',
-     'infrasp3_rank': u'cv.', 'infrasp3': u'Black',
-     'infrasp3_author': u'L.'},
-    {'id': 16, 'genus_id': 1, 'sp': u'test',
-     'infrasp1_rank': u'subsp.', 'infrasp1': u'test',
-     'cv_group': u'SomeGroup'},
-    {'id': 17, 'genus_id': 5, 'sp': u'adductum', 'author': u'Asher'},
-    {'id': 18, 'genus_id': 6, 'sp': u'lobata', 'author': u'H.J. Veitch'},
-    {'id': 19, 'genus_id': 6, 'sp': u'grandiflora', 'author': u'Lindl.'},
-    {'id': 20, 'genus_id': 2, 'sp': u'fragrans', 'author': u'Dressler'},
-    {'id': 21, 'genus_id': 7, 'sp': u'arborea', 'author': u'Lagerh.'},
-    {'id': 22, 'sp': u'', 'genus_id': 1, 'sp_author': u'',
-     'infrasp1_rank': u'cv.', 'infrasp1': u'Layla Saida'},
-    {'id': 23, 'sp': u'', 'genus_id': 1, 'sp_author': u'',
-     'infrasp1_rank': u'cv.', 'infrasp1': u'Buonanotte'},
-    {'id': 24, 'sp': u'', 'genus_id': 1, 'sp_author': u'',
-     'infrasp1_rank': None, 'infrasp1': u'sp'},
+     'infrasp1_rank': 'cv.', 'infrasp1': 'Red & Blue'},
+    {'id': 15, 'sp': 'cochleata', 'genus_id': 2,
+     'sp_author': 'L.',
+     'infrasp1_rank': 'subsp.', 'infrasp1': 'cochleata',
+     'infrasp1_author': 'L.',
+     'infrasp2_rank': 'var.', 'infrasp2': 'cochleata',
+     'infrasp2_author': 'L.',
+     'infrasp3_rank': 'cv.', 'infrasp3': 'Black',
+     'infrasp3_author': 'L.'},
+    {'id': 16, 'genus_id': 1, 'sp': 'test',
+     'infrasp1_rank': 'subsp.', 'infrasp1': 'test',
+     'cv_group': 'SomeGroup'},
+    {'id': 17, 'genus_id': 5, 'sp': 'adductum', 'author': 'Asher'},
+    {'id': 18, 'genus_id': 6, 'sp': 'lobata', 'author': 'H.J. Veitch'},
+    {'id': 19, 'genus_id': 6, 'sp': 'grandiflora', 'author': 'Lindl.'},
+    {'id': 20, 'genus_id': 2, 'sp': 'fragrans', 'author': 'Dressler'},
+    {'id': 21, 'genus_id': 7, 'sp': 'arborea', 'author': 'Lagerh.'},
+    {'id': 22, 'sp': '', 'genus_id': 1, 'sp_author': '',
+     'infrasp1_rank': 'cv.', 'infrasp1': 'Layla Saida'},
+    {'id': 23, 'sp': '', 'genus_id': 1, 'sp_author': '',
+     'infrasp1_rank': 'cv.', 'infrasp1': 'Buonanotte'},
+    {'id': 24, 'sp': '', 'genus_id': 1, 'sp_author': '',
+     'infrasp1_rank': None, 'infrasp1': 'sp'},
     )
 
 species_note_test_data = (
-    {'id': 1, 'species_id': 18, 'category': u'CITES', 'note': u'I'},
-    {'id': 2, 'species_id': 20, 'category': u'IUCN', 'note': u'LC'},
-    {'id': 3, 'species_id': 18, 'category': u'<price>', 'note': u'19.50'},
-    {'id': 4, 'species_id': 18, 'category': u'[list_var]', 'note': u'abc'},
-    {'id': 5, 'species_id': 18, 'category': u'[list_var]', 'note': u'def'},
-    {'id': 6, 'species_id': 18, 'category': u'<price_tag>', 'note': u'$19.50'},
-    {'id': 7, 'species_id': 18, 'category': u'{dict_var:k}', 'note': u'abc'},
-    {'id': 8, 'species_id': 18, 'category': u'{dict_var:l}', 'note': u'def'},
-    {'id': 9, 'species_id': 18, 'category': u'{dict_var:m}', 'note': u'xyz'},
+    {'id': 1, 'species_id': 18, 'category': 'CITES', 'note': 'I'},
+    {'id': 2, 'species_id': 20, 'category': 'IUCN', 'note': 'LC'},
+    {'id': 3, 'species_id': 18, 'category': '<price>', 'note': '19.50'},
+    {'id': 4, 'species_id': 18, 'category': '[list_var]', 'note': 'abc'},
+    {'id': 5, 'species_id': 18, 'category': '[list_var]', 'note': 'def'},
+    {'id': 6, 'species_id': 18, 'category': '<price_tag>', 'note': '$19.50'},
+    {'id': 7, 'species_id': 18, 'category': '{dict_var:k}', 'note': 'abc'},
+    {'id': 8, 'species_id': 18, 'category': '{dict_var:l}', 'note': 'def'},
+    {'id': 9, 'species_id': 18, 'category': '{dict_var:m}', 'note': 'xyz'},
     )
 
 species_str_map = {
@@ -195,11 +195,11 @@
 
 species_str_authors_map = {
     1: 'Maxillaria variabilis Bateman ex Lindl.',
-    2: u'Encyclia cochleata (L.) Lem\xe9e',
+    2: 'Encyclia cochleata (L.) Lem\xe9e',
     3: 'Abrus precatorius L.',
-    4: u'Campyloneurum %salapense F\xe9e' % Species.hybrid_char,
-    5: u'Encyclia cochleata (L.) Lem\xe9e var. cochleata',
-    6: u'Encyclia cochleata (L.) Lem\xe9e \'Black Night\'',
+    4: 'Campyloneurum %salapense F\xe9e' % Species.hybrid_char,
+    5: 'Encyclia cochleata (L.) Lem\xe9e var. cochleata',
+    6: 'Encyclia cochleata (L.) Lem\xe9e \'Black Night\'',
     7: 'Abrus precatorius L. SomethingRidiculous Group',
     8: "Abrus precatorius L. (SomethingRidiculous Group) 'Hot Rio Nights'",
     15: ("Encyclia cochleata L. subsp. "
@@ -208,20 +208,20 @@
 
 species_markup_authors_map = {
     1: '<i>Maxillaria</i> <i>variabilis</i> Bateman ex Lindl.',
-    2: u'<i>Encyclia</i> <i>cochleata</i> (L.) Lem\xe9e',
+    2: '<i>Encyclia</i> <i>cochleata</i> (L.) Lem\xe9e',
     3: '<i>Abrus</i> <i>precatorius</i> L.',
-    4: u'<i>Campyloneurum</i> %s<i>alapense</i> F\xe9e' % Species.hybrid_char,
-    5: u'<i>Encyclia</i> <i>cochleata</i> (L.) Lem\xe9e var. <i>cochleata</i>',
-    6: u'<i>Encyclia</i> <i>cochleata</i> (L.) Lem\xe9e \'Black Night\''}
+    4: '<i>Campyloneurum</i> %s<i>alapense</i> F\xe9e' % Species.hybrid_char,
+    5: '<i>Encyclia</i> <i>cochleata</i> (L.) Lem\xe9e var. <i>cochleata</i>',
+    6: '<i>Encyclia</i> <i>cochleata</i> (L.) Lem\xe9e \'Black Night\''}
 
 sp_synonym_test_data = ({'id': 1, 'synonym_id': 1, 'species_id': 2},
                         )
 
 vn_test_data = (
-    {'id': 1, 'name': u'SomeName', 'language': u'English', 'species_id': 1},
-    {'id': 2, 'name': u'SomeName 2', 'language': u'English', 'species_id': 1},
-    {'id': 3, 'name': u'Floripondio', 'language': u'es', 'species_id': 21},
-    {'id': 4, 'name': u'Toé', 'language': u'agr', 'species_id': 21},
+    {'id': 1, 'name': 'SomeName', 'language': 'English', 'species_id': 1},
+    {'id': 2, 'name': 'SomeName 2', 'language': 'English', 'species_id': 1},
+    {'id': 3, 'name': 'Floripondio', 'language': 'es', 'species_id': 21},
+    {'id': 4, 'name': 'Toé', 'language': 'agr', 'species_id': 21},
     )
 
 test_data_table_control = (
@@ -290,8 +290,8 @@
         """
         Test that cascading is set up properly
         """
-        family = Family(family=u'family')
-        genus = Genus(family=family, genus=u'genus')
+        family = Family(family='family')
+        genus = Genus(family=family, genus='genus')
         self.session.add_all([family, genus])
         self.session.commit()
 
@@ -305,24 +305,24 @@
         """
         Test that Family.synonyms works correctly
         """
-        family = Family(family=u'family')
-        family2 = Family(family=u'family2')
+        family = Family(family='family')
+        family2 = Family(family='family2')
         family.synonyms.append(family2)
         self.session.add_all([family, family2])
         self.session.commit()
 
         # test that family2 was added as a synonym to family
-        family = self.session.query(Family).filter_by(family=u'family').one()
-        self.assert_(family2 in family.synonyms)
+        family = self.session.query(Family).filter_by(family='family').one()
+        self.assertTrue(family2 in family.synonyms)
 
         # test that the synonyms relation and family backref works
-        self.assert_(family._synonyms[0].family == family)
-        self.assert_(family._synonyms[0].synonym == family2)
+        self.assertTrue(family._synonyms[0].family == family)
+        self.assertTrue(family._synonyms[0].synonym == family2)
 
         # test that the synonyms are removed properly
         family.synonyms.remove(family2)
         self.session.commit()
-        self.assert_(family2 not in family.synonyms)
+        self.assertTrue(family2 not in family.synonyms)
 
         # test synonyms contraints, e.g that a family cannot have the
         # same synonym twice
@@ -335,8 +335,8 @@
         # test that clearing all the synonyms works
         family.synonyms.clear()
         self.session.commit()
-        self.assert_(len(family.synonyms) == 0)
-        self.assert_(self.session.query(FamilySynonym).count() == 0)
+        self.assertTrue(len(family.synonyms) == 0)
+        self.assertTrue(self.session.query(FamilySynonym).count() == 0)
 
         # test that deleting a family that is a synonym of another family
         # deletes all the dangling object s
@@ -344,28 +344,28 @@
         self.session.commit()
         self.session.delete(family2)
         self.session.commit()
-        self.assert_(self.session.query(FamilySynonym).count() == 0)
+        self.assertTrue(self.session.query(FamilySynonym).count() == 0)
 
         # test that deleting the previous synonyms didn't delete the
         # family that it refered to
-        self.assert_(self.session.query(Family).get(family.id))
+        self.assertTrue(self.session.query(Family).get(family.id))
 
         # test that deleting a family that has synonyms deletes all
         # the synonyms that refer to that family deletes all the
-        family2 = Family(family=u'family2')
+        family2 = Family(family='family2')
         self.session.add(family2)
         family.synonyms.append(family2)
         self.session.commit()
         self.session.delete(family)
         self.session.commit()
-        self.assert_(self.session.query(FamilySynonym).count() == 0)
+        self.assertTrue(self.session.query(FamilySynonym).count() == 0)
 
     def test_constraints(self):
         """
         Test that the family constraints were created correctly
         """
-        values = [dict(family=u'family'),
-                  dict(family=u'family', qualifier=u's. lat.')]
+        values = [dict(family='family'),
+                  dict(family='family', qualifier='s. lat.')]
         for v in values:
             self.session.add(Family(**v))
             self.session.add(Family(**v))
@@ -382,11 +382,11 @@
         Test that the family str function works as expected
         """
         f = Family()
-        self.assert_(str(f) == repr(f))
-        f = Family(family=u'fam')
-        self.assert_(str(f) == 'fam')
-        f.qualifier = u's. lat.'
-        self.assert_(str(f) == 'fam s. lat.')
+        self.assertTrue(str(f) == repr(f))
+        f = Family(family='fam')
+        self.assertTrue(str(f) == 'fam')
+        f.qualifier = 's. lat.'
+        self.assertTrue(str(f) == 'fam s. lat.')
 
     def test_editor(self):
         """
@@ -407,7 +407,7 @@
 
     def test_remove_callback_no_genera_no_confirm(self):
         # T_0
-        f5 = Family(family=u'Arecaceae')
+        f5 = Family(family='Arecaceae')
         self.session.add(f5)
         self.session.flush()
         self.invoked = []
@@ -422,20 +422,20 @@
         self.session.flush()
 
         # effect
-        print self.invoked
+        print(self.invoked)
         self.assertFalse('message_details_dialog' in
                          [f for (f, m) in self.invoked])
-        self.assertTrue(('yes_no_dialog', u'Are you sure you want to '
+        self.assertTrue(('yes_no_dialog', 'Are you sure you want to '
                          'remove the family <i>Arecaceae</i>?')
                         in self.invoked)
-        self.assertEquals(result, None)
-        q = self.session.query(Family).filter_by(family=u"Arecaceae")
+        self.assertEqual(result, None)
+        q = self.session.query(Family).filter_by(family="Arecaceae")
         matching = q.all()
-        self.assertEquals(matching, [f5])
+        self.assertEqual(matching, [f5])
 
     def test_remove_callback_no_genera_confirm(self):
         # T_0
-        f5 = Family(family=u'Arecaceae')
+        f5 = Family(family='Arecaceae')
         self.session.add(f5)
         self.session.flush()
         self.invoked = []
@@ -450,22 +450,22 @@
         self.session.flush()
 
         # effect
-        print self.invoked
+        print(self.invoked)
         self.assertFalse('message_details_dialog' in
                          [f for (f, m) in self.invoked])
-        self.assertTrue(('yes_no_dialog', u'Are you sure you want to '
+        self.assertTrue(('yes_no_dialog', 'Are you sure you want to '
                          'remove the family <i>Arecaceae</i>?')
                         in self.invoked)
 
-        self.assertEquals(result, True)
-        q = self.session.query(Family).filter_by(family=u"Arecaceae")
+        self.assertEqual(result, True)
+        q = self.session.query(Family).filter_by(family="Arecaceae")
         matching = q.all()
-        self.assertEquals(matching, [])
+        self.assertEqual(matching, [])
 
     def test_remove_callback_with_genera_cant_cascade(self):
         # T_0
-        f5 = Family(family=u'Arecaceae')
-        gf5 = Genus(family=f5, genus=u'Areca')
+        f5 = Family(family='Arecaceae')
+        gf5 = Genus(family=f5, genus='Areca')
         self.session.add_all([f5, gf5])
         self.session.flush()
         self.invoked = []
@@ -482,41 +482,41 @@
         self.session.flush()
 
         # effect
-        print self.invoked
+        print(self.invoked)
         self.assertFalse('message_details_dialog' in
                          [f for (f, m) in self.invoked])
-        self.assertTrue(('message_dialog', u'The family <i>Arecaceae</i> has 1 genera.\n\nYou cannot remove a family with genera.')
+        self.assertTrue(('message_dialog', 'The family <i>Arecaceae</i> has 1 genera.\n\nYou cannot remove a family with genera.')
                         in self.invoked)
-        q = self.session.query(Family).filter_by(family=u"Arecaceae")
+        q = self.session.query(Family).filter_by(family="Arecaceae")
         matching = q.all()
-        self.assertEquals(matching, [f5])
-        q = self.session.query(Genus).filter_by(genus=u"Areca")
+        self.assertEqual(matching, [f5])
+        q = self.session.query(Genus).filter_by(genus="Areca")
         matching = q.all()
-        self.assertEquals(matching, [gf5])
+        self.assertEqual(matching, [gf5])
 
 
 class GenusTests(PlantTestCase):
 
     def test_synonyms(self):
-        family = Family(family=u'family')
-        genus = Genus(family=family, genus=u'genus')
-        genus2 = Genus(family=family, genus=u'genus2')
+        family = Family(family='family')
+        genus = Genus(family=family, genus='genus')
+        genus2 = Genus(family=family, genus='genus2')
         genus.synonyms.append(genus2)
         self.session.add_all([genus, genus2])
         self.session.commit()
 
         # test that genus2 was added as a synonym to genus
-        genus = self.session.query(Genus).filter_by(genus=u'genus').one()
-        self.assert_(genus2 in genus.synonyms)
+        genus = self.session.query(Genus).filter_by(genus='genus').one()
+        self.assertTrue(genus2 in genus.synonyms)
 
         # test that the synonyms relation and genus backref works
-        self.assert_(genus._synonyms[0].genus == genus)
-        self.assert_(genus._synonyms[0].synonym == genus2)
+        self.assertTrue(genus._synonyms[0].genus == genus)
+        self.assertTrue(genus._synonyms[0].synonym == genus2)
 
         # test that the synonyms are removed properly
         genus.synonyms.remove(genus2)
         self.session.commit()
-        self.assert_(genus2 not in genus.synonyms)
+        self.assertTrue(genus2 not in genus.synonyms)
 
         # test synonyms contraints, e.g that a genus cannot have the
         # same synonym twice
@@ -529,8 +529,8 @@
         # test that clearing all the synonyms works
         genus.synonyms.clear()
         self.session.commit()
-        self.assert_(len(genus.synonyms) == 0)
-        self.assert_(self.session.query(GenusSynonym).count() == 0)
+        self.assertTrue(len(genus.synonyms) == 0)
+        self.assertTrue(self.session.query(GenusSynonym).count() == 0)
 
         # test that deleting a genus that is a synonym of another genus
         # deletes all the dangling objects
@@ -538,36 +538,36 @@
         self.session.commit()
         self.session.delete(genus2)
         self.session.commit()
-        self.assert_(self.session.query(GenusSynonym).count() == 0)
+        self.assertTrue(self.session.query(GenusSynonym).count() == 0)
 
         # test that deleting the previous synonyms didn't delete the
         # genus that it refered to
-        self.assert_(self.session.query(Genus).get(genus.id))
+        self.assertTrue(self.session.query(Genus).get(genus.id))
 
         # test that deleting a genus that has synonyms deletes all
         # the synonyms that refer to that genus
-        genus2 = Genus(family=family, genus=u'genus2')
+        genus2 = Genus(family=family, genus='genus2')
         self.session.add(genus2)
         genus.synonyms.append(genus2)
         self.session.commit()
         self.session.delete(genus)
         self.session.commit()
-        self.assert_(self.session.query(GenusSynonym).count() == 0)
+        self.assertTrue(self.session.query(GenusSynonym).count() == 0)
 
     def test_contraints(self):
         """
         Test that the genus constraints were created correctly
         """
-        family = Family(family=u'family')
+        family = Family(family='family')
         self.session.add(family)
 
         # if any of these values are inserted twice they should raise
         # an IntegrityError because the UniqueConstraint on Genus
-        values = [dict(family=family, genus=u'genus'),
-                  dict(family=family, genus=u'genus', author=u'author'),
-                  dict(family=family, genus=u'genus', qualifier=u's. lat.'),
-                  dict(family=family, genus=u'genus', qualifier=u's. lat.',
-                       author=u'author')
+        values = [dict(family=family, genus='genus'),
+                  dict(family=family, genus='genus', author='author'),
+                  dict(family=family, genus='genus', qualifier='s. lat.'),
+                  dict(family=family, genus='genus', qualifier='s. lat.',
+                       author='author')
                   ]
         for v in values:
             self.session.add(Genus(**v))
@@ -587,8 +587,8 @@
         """
         raise SkipTest('Not Implemented')
         #loc = self.create(Genus, name=u'some site')
-        fam = Family(family=u'family')
-        fam2 = Family(family=u'family2')
+        fam = Family(family='family')
+        fam2 = Family(family='family2')
         fam2.synonyms.append(fam)
         self.session.add_all([fam, fam2])
         self.session.commit()
@@ -604,20 +604,20 @@
             'GenusEditorView not deleted'
 
     def test_can_use_epithet_field(self):
-        family = Family(epithet=u'family')
-        genus = Genus(family=family, genus=u'genus')
+        family = Family(epithet='family')
+        genus = Genus(family=family, genus='genus')
         self.session.add_all([family, genus])
         self.session.commit()
         g1 = self.session.query(Genus).filter(Genus.epithet=='genus').one()
         g2 = self.session.query(Genus).filter(Genus.genus=='genus').one()
-        self.assertEquals(g1, g2)
-        self.assertEquals(g1.genus, 'genus')
-        self.assertEquals(g2.epithet, 'genus')
+        self.assertEqual(g1, g2)
+        self.assertEqual(g1.genus, 'genus')
+        self.assertEqual(g2.epithet, 'genus')
 
     def test_remove_callback_no_species_no_confirm(self):
         # T_0
-        caricaceae = Family(family=u'Caricaceae')
-        f5 = Genus(epithet=u'Carica', family=caricaceae)
+        caricaceae = Family(family='Caricaceae')
+        f5 = Genus(epithet='Carica', family=caricaceae)
         self.session.add(caricaceae)
         self.session.add(f5)
         self.session.flush()
@@ -635,18 +635,18 @@
         # effect
         self.assertFalse('message_details_dialog' in
                          [f for (f, m) in self.invoked])
-        self.assertTrue(('yes_no_dialog', u'Are you sure you want to '
+        self.assertTrue(('yes_no_dialog', 'Are you sure you want to '
                          'remove the genus <i>Carica</i>?')
                         in self.invoked)
-        self.assertEquals(result, None)
-        q = self.session.query(Genus).filter_by(genus=u"Carica")
+        self.assertEqual(result, None)
+        q = self.session.query(Genus).filter_by(genus="Carica")
         matching = q.all()
-        self.assertEquals(matching, [f5])
+        self.assertEqual(matching, [f5])
 
     def test_remove_callback_no_species_confirm(self):
         # T_0
-        caricaceae = Family(family=u'Caricaceae')
-        f5 = Genus(epithet=u'Carica', family=caricaceae)
+        caricaceae = Family(family='Caricaceae')
+        f5 = Genus(epithet='Carica', family=caricaceae)
         self.session.add_all([caricaceae, f5])
         self.session.flush()
         self.invoked = []
@@ -661,23 +661,23 @@
         self.session.flush()
 
         # effect
-        print self.invoked
+        print(self.invoked)
         self.assertFalse('message_details_dialog' in
                          [f for (f, m) in self.invoked])
-        self.assertTrue(('yes_no_dialog', u'Are you sure you want to '
+        self.assertTrue(('yes_no_dialog', 'Are you sure you want to '
                          'remove the genus <i>Carica</i>?')
                         in self.invoked)
 
-        self.assertEquals(result, True)
-        q = self.session.query(Genus).filter_by(genus=u"Carica")
+        self.assertEqual(result, True)
+        q = self.session.query(Genus).filter_by(genus="Carica")
         matching = q.all()
-        self.assertEquals(matching, [])
+        self.assertEqual(matching, [])
 
     def test_remove_callback_with_species_cant_cascade(self):
         # T_0
-        caricaceae = Family(family=u'Caricaceae')
-        f5 = Genus(epithet=u'Carica', family=caricaceae)
-        gf5 = Species(genus=f5, sp=u'papaya')
+        caricaceae = Family(family='Caricaceae')
+        f5 = Genus(epithet='Carica', family=caricaceae)
+        gf5 = Species(genus=f5, sp='papaya')
         self.session.add_all([caricaceae, f5, gf5])
         self.session.flush()
         self.invoked = []
@@ -694,27 +694,27 @@
         self.session.flush()
 
         # effect
-        print self.invoked
+        print(self.invoked)
         self.assertFalse('message_details_dialog' in
                          [f for (f, m) in self.invoked])
-        self.assertTrue(('message_dialog', u'The genus <i>Carica</i> has 1 species.\n\nYou cannot remove a genus with species.')
+        self.assertTrue(('message_dialog', 'The genus <i>Carica</i> has 1 species.\n\nYou cannot remove a genus with species.')
                         in self.invoked)
-        q = self.session.query(Genus).filter_by(genus=u"Carica")
+        q = self.session.query(Genus).filter_by(genus="Carica")
         matching = q.all()
-        self.assertEquals(matching, [f5])
-        q = self.session.query(Species).filter_by(sp=u"papaya")
+        self.assertEqual(matching, [f5])
+        q = self.session.query(Species).filter_by(sp="papaya")
         matching = q.all()
-        self.assertEquals(matching, [gf5])
+        self.assertEqual(matching, [gf5])
         
 
 class GenusSynonymyTests(PlantTestCase):
 
     def setUp(self):
         super(GenusSynonymyTests, self).setUp()
-        f = self.session.query(Family).filter(Family.family == u'Orchidaceae'
+        f = self.session.query(Family).filter(Family.family == 'Orchidaceae'
                                               ).one()
-        bu = Genus(family=f, genus=u'Bulbophyllum')  # accepted
-        zy = Genus(family=f, genus=u'Zygoglossum')  # synonym
+        bu = Genus(family=f, genus='Bulbophyllum')  # accepted
+        zy = Genus(family=f, genus='Zygoglossum')  # synonym
         bu.synonyms.append(zy)
         self.session.add_all([f, bu, zy])
         self.session.commit()
@@ -723,51 +723,51 @@
         "a taxon has a list of synonyms"
         bu = self.session.query(
             Genus).filter(
-            Genus.genus == u'Bulbophyllum').one()
+            Genus.genus == 'Bulbophyllum').one()
         zy = self.session.query(
             Genus).filter(
-            Genus.genus == u'Zygoglossum').one()
-        self.assertEquals(bu.synonyms, [zy])
-        self.assertEquals(zy.synonyms, [])
+            Genus.genus == 'Zygoglossum').one()
+        self.assertEqual(bu.synonyms, [zy])
+        self.assertEqual(zy.synonyms, [])
 
     def test_backward_synonyms(self):
         "synonymy is used to get the accepted taxon"
         bu = self.session.query(
             Genus).filter(
-            Genus.genus == u'Bulbophyllum').one()
+            Genus.genus == 'Bulbophyllum').one()
         zy = self.session.query(
             Genus).filter(
-            Genus.genus == u'Zygoglossum').one()
-        self.assertEquals(zy.accepted, bu)
-        self.assertEquals(bu.accepted, None)
+            Genus.genus == 'Zygoglossum').one()
+        self.assertEqual(zy.accepted, bu)
+        self.assertEqual(bu.accepted, None)
 
     def test_synonymy_included_in_as_dict(self):
         bu = self.session.query(
             Genus).filter(
-            Genus.genus == u'Bulbophyllum').one()
+            Genus.genus == 'Bulbophyllum').one()
         zy = self.session.query(
             Genus).filter(
-            Genus.genus == u'Zygoglossum').one()
+            Genus.genus == 'Zygoglossum').one()
         self.assertTrue('accepted' not in bu.as_dict())
         self.assertTrue('accepted' in zy.as_dict())
-        self.assertEquals(zy.as_dict()['accepted'],
+        self.assertEqual(zy.as_dict()['accepted'],
                           bu.as_dict(recurse=False))
 
     def test_define_accepted(self):
         # notice that same test should be also in Species and Family
         bu = self.session.query(
             Genus).filter(
-            Genus.genus == u'Bulbophyllum').one()
+            Genus.genus == 'Bulbophyllum').one()
         f = self.session.query(
             Family).filter(
-            Family.family == u'Orchidaceae').one()
-        he = Genus(family=f, genus=u'Henosis')  # one more synonym
+            Family.family == 'Orchidaceae').one()
+        he = Genus(family=f, genus='Henosis')  # one more synonym
         self.session.add(he)
         self.session.commit()
-        self.assertEquals(len(bu.synonyms), 1)
+        self.assertEqual(len(bu.synonyms), 1)
         self.assertFalse(he in bu.synonyms)
         he.accepted = bu
-        self.assertEquals(len(bu.synonyms), 2)
+        self.assertEqual(len(bu.synonyms), 2)
         self.assertTrue(he in bu.synonyms)
 
     def test_can_redefine_accepted(self):
@@ -775,14 +775,14 @@
         # name, it is now updated to Sedum L.
 
         ## T_0
-        claceae = Family(family=u'Crassulaceae')  # J. St.-Hil.
-        villa = Genus(family=claceae, genus=u'Villadia', author=u'Rose')
-        alta = Genus(family=claceae, genus=u'Altamiranoa', author=u'Rose')
+        claceae = Family(family='Crassulaceae')  # J. St.-Hil.
+        villa = Genus(family=claceae, genus='Villadia', author='Rose')
+        alta = Genus(family=claceae, genus='Altamiranoa', author='Rose')
         alta.accepted = villa
         self.session.add_all([claceae, alta, villa])
         self.session.commit()
 
-        sedum = Genus(family=claceae, genus=u'Sedum', author=u'L.')
+        sedum = Genus(family=claceae, genus='Sedum', author='L.')
         alta.accepted = sedum
         self.session.commit()
 
@@ -801,19 +801,19 @@
         import bauble.paths as paths
         default_path = os.path.join(
             paths.lib_dir(), "plugins", "plants", "default")
-        filenames = [os.path.join(default_path, f) for f in 'geography.txt',
-                     'habit.txt']
+        filenames = [os.path.join(default_path, f) for f in ('geography.txt',
+                     'habit.txt')]
         from bauble.plugins.imex.csv_ import CSVImporter
         importer = CSVImporter()
         importer.start(filenames, force=True)
 
-        f = Family(family=u'family')
-        g2 = Genus(genus=u'genus2', family=f)
-        g = Genus(genus=u'genus', family=f)
+        f = Family(family='family')
+        g2 = Genus(genus='genus2', family=f)
+        g = Genus(genus='genus', family=f)
         g2.synonyms.append(g)
         self.session.add(f)
         self.session.commit()
-        sp = Species(genus=g, sp=u'sp')
+        sp = Species(genus=g, sp='sp')
         edit_species(model=sp)
         assert utils.gc_objects_by_type('SpeciesEditorMenuItem') == [], \
             'SpeciesEditor not deleted'
@@ -829,24 +829,24 @@
         def get_sp_str(id, **kwargs):
             return self.session.query(Species).get(id).str(**kwargs)
 
-        for sid, expect in species_str_map.iteritems():
+        for sid, expect in species_str_map.items():
                 sp = self.session.query(Species).get(sid)
                 printable_name = remove_zws("%s" % sp)
-                self.assertEquals(species_str_map[sid], printable_name)
+                self.assertEqual(species_str_map[sid], printable_name)
                 spstr = get_sp_str(sid)
-                self.assertEquals(remove_zws(spstr), expect)
-
-        for sid, expect in species_str_authors_map.iteritems():
+                self.assertEqual(remove_zws(spstr), expect)
+
+        for sid, expect in species_str_authors_map.items():
             spstr = get_sp_str(sid, authors=True)
-            self.assertEquals(remove_zws(spstr), expect)
-
-        for sid, expect in species_markup_map.iteritems():
+            self.assertEqual(remove_zws(spstr), expect)
+
+        for sid, expect in species_markup_map.items():
             spstr = get_sp_str(sid, markup=True)
-            self.assertEquals(remove_zws(spstr), expect)
-
-        for sid, expect in species_markup_authors_map.iteritems():
+            self.assertEqual(remove_zws(spstr), expect)
+
+        for sid, expect in species_markup_authors_map.items():
             spstr = get_sp_str(sid, markup=True, authors=True)
-            self.assertEquals(remove_zws(spstr), expect)
+            self.assertEqual(remove_zws(spstr), expect)
 
     def test_lexicographic_order__unspecified_precedes_specified(self):
         def get_sp_str(id, **kwargs):
@@ -881,17 +881,17 @@
         """
         Test the Species.vernacular_name property
         """
-        family = Family(family=u'family')
-        genus = Genus(family=family, genus=u'genus')
-        sp = Species(genus=genus, sp=u'sp')
+        family = Family(family='family')
+        genus = Genus(family=family, genus='genus')
+        sp = Species(genus=genus, sp='sp')
         self.session.add_all([family, genus, sp])
         self.session.commit()
 
         # add a name
-        vn = VernacularName(name=u'name')
+        vn = VernacularName(name='name')
         sp.vernacular_names.append(vn)
         self.session.commit()
-        self.assert_(vn in sp.vernacular_names)
+        self.assertTrue(vn in sp.vernacular_names)
 
         # test that removing a name removes deleted orphaned objects
         sp.vernacular_names.remove(vn)
@@ -903,42 +903,42 @@
         """
         Test the Species.default_vernacular_name property
         """
-        family = Family(family=u'family')
-        genus = Genus(family=family, genus=u'genus')
-        sp = Species(genus=genus, sp=u'sp')
-        vn = VernacularName(name=u'name')
+        family = Family(family='family')
+        genus = Genus(family=family, genus='genus')
+        sp = Species(genus=genus, sp='sp')
+        vn = VernacularName(name='name')
         sp.vernacular_names.append(vn)
         self.session.add_all([family, genus, sp, vn])
         self.session.commit()
 
         # test that setting the default vernacular names
-        default = VernacularName(name=u'default')
+        default = VernacularName(name='default')
         sp.default_vernacular_name = default
         self.session.commit()
-        self.assert_(vn in sp.vernacular_names)
-        self.assert_(sp.default_vernacular_name == default)
+        self.assertTrue(vn in sp.vernacular_names)
+        self.assertTrue(sp.default_vernacular_name == default)
 
         # test that set_attr work on default vernacular name
-        default = VernacularName(name=u'default')
+        default = VernacularName(name='default')
         setattr(sp, 'default_vernacular_name', default)
         self.session.commit()
-        self.assert_(vn in sp.vernacular_names)
-        self.assert_(sp.default_vernacular_name == default)
+        self.assertTrue(vn in sp.vernacular_names)
+        self.assertTrue(sp.default_vernacular_name == default)
 
         # test that if you set the default_vernacular_name on a
         # species then it automatically adds it to vernacular_names
-        default = VernacularName(name=u'default')
+        default = VernacularName(name='default')
         sp.default_vernacular_name = default
         self.session.commit()
-        self.assert_(vn in sp.vernacular_names)
-        self.assert_(sp.default_vernacular_name == default)
+        self.assertTrue(vn in sp.vernacular_names)
+        self.assertTrue(sp.default_vernacular_name == default)
 
         # test that removing a vernacular name removes it from
         # default_vernacular_name, this test also effectively tests VNList
         dvid = sp._default_vernacular_name.id
         sp.vernacular_names.remove(default)
         self.session.commit()
-        self.assertEquals(sp.default_vernacular_name, None)
+        self.assertEqual(sp.default_vernacular_name, None)
         q = self.session.query(DefaultVernacularName)
         self.assertRaises(NoResultFound, q.filter_by(species_id=sp.id).one)
         self.assertRaises(NoResultFound, q.filter_by(id=dvid).one)
@@ -961,14 +961,14 @@
         dvid = sp._default_vernacular_name.id
         del sp.default_vernacular_name
         self.session.commit()
-        self.assertEquals(sp.default_vernacular_name, None)
+        self.assertEqual(sp.default_vernacular_name, None)
         q = self.session.query(DefaultVernacularName)
         self.assertRaises(NoResultFound, q.filter_by(species_id=sp.id).one)
         self.assertRaises(NoResultFound, q.filter_by(id=dvid).one)
 
         # test for regression in bug Launchpad #123286
-        vn1 = VernacularName(name=u'vn1')
-        vn2 = VernacularName(name=u'vn2')
+        vn1 = VernacularName(name='vn1')
+        vn2 = VernacularName(name='vn2')
         sp.default_vernacular_name = vn1
         sp.default_vernacular_name = vn2
         self.session.commit()
@@ -984,8 +984,8 @@
             sp2 = load_sp(id2)
             return '%s(%s).synonyms: %s' % \
                    (sp1, sp1.id,
-                    str(map(lambda s: '%s(%s)' %
-                            (s, s.id), sp1.synonyms)))
+                    str(['%s(%s)' %
+                            (s, s.id) for s in sp1.synonyms]))
 
         def synonym_of(id1, id2):
             sp1 = load_sp(id1)
@@ -997,12 +997,12 @@
         sp2 = load_sp(2)
         sp1.synonyms.append(sp2)
         self.session.flush()
-        self.assert_(synonym_of(1, 2), syn_str(1, 2))
+        self.assertTrue(synonym_of(1, 2), syn_str(1, 2))
 
         # test that removing a synonyms works using species.synonyms
         sp1.synonyms.remove(sp2)
         self.session.flush()
-        self.failIf(synonym_of(1, 2), syn_str(1, 2))
+        self.assertFalse(synonym_of(1, 2), syn_str(1, 2))
 
         self.session.expunge_all()
 
@@ -1012,12 +1012,12 @@
         syn = SpeciesSynonym(sp2)
         sp1._synonyms.append(syn)
         self.session.flush()
-        self.assert_(synonym_of(1, 2), syn_str(1, 2))
+        self.assertTrue(synonym_of(1, 2), syn_str(1, 2))
 
         # test that removing a synonyms works using species._synonyms
         sp1._synonyms.remove(syn)
         self.session.flush()
-        self.failIf(synonym_of(1, 2), syn_str(1, 2))
+        self.assertFalse(synonym_of(1, 2), syn_str(1, 2))
 
         # test adding a species and then immediately remove it
         self.session.expunge_all()
@@ -1048,7 +1048,7 @@
 
     def test_no_synonyms_means_itself_accepted(self):
         def create_tmp_sp(id):
-            sp = Species(id=id, epithet=u"sp%02d"%id, genus_id=1)
+            sp = Species(id=id, epithet="sp%02d"%id, genus_id=1)
             self.session.add(sp)
             return sp
 
@@ -1057,14 +1057,14 @@
         sp3 = create_tmp_sp(53)
         sp4 = create_tmp_sp(54)
         self.session.commit()
-        self.assertEquals(sp1.accepted, None)
-        self.assertEquals(sp2.accepted, None) 
-        self.assertEquals(sp3.accepted, None) 
-        self.assertEquals(sp4.accepted, None)
+        self.assertEqual(sp1.accepted, None)
+        self.assertEqual(sp2.accepted, None) 
+        self.assertEqual(sp3.accepted, None) 
+        self.assertEqual(sp4.accepted, None)
 
     def test_synonyms_and_accepted_properties(self):
         def create_tmp_sp(id):
-            sp = Species(id=id, epithet=u"sp%02d"%id, genus_id=1)
+            sp = Species(id=id, epithet="sp%02d"%id, genus_id=1)
             self.session.add(sp)
             return sp
 
@@ -1074,34 +1074,34 @@
         sp3 = create_tmp_sp(43)
         sp4 = create_tmp_sp(44)  # (1), (2), (3), (4)
         sp3.accepted = sp1  # (1 3), (2), (4)
-        self.assertEquals([i.epithet for i in sp1.synonyms], [sp3.epithet])
+        self.assertEqual([i.epithet for i in sp1.synonyms], [sp3.epithet])
         sp1.synonyms.append(sp2)  # (1 3 2), (4)
         self.session.flush()
-        print 'synonyms of 1', [i.epithet[-1] for i in sp1.synonyms]
-        print 'synonyms of 4', [i.epithet[-1] for i in sp4.synonyms]
-        self.assertEquals(sp2.accepted.epithet, sp1.epithet)  # just added
-        self.assertEquals(sp3.accepted.epithet, sp1.epithet)  # no change
+        print('synonyms of 1', [i.epithet[-1] for i in sp1.synonyms])
+        print('synonyms of 4', [i.epithet[-1] for i in sp4.synonyms])
+        self.assertEqual(sp2.accepted.epithet, sp1.epithet)  # just added
+        self.assertEqual(sp3.accepted.epithet, sp1.epithet)  # no change
         sp2.accepted = sp4  # (1 3), (4 2)
         self.session.flush()
-        print 'synonyms of 1', [i.epithet[-1] for i in sp1.synonyms]
-        print 'synonyms of 4', [i.epithet[-1] for i in sp4.synonyms]
-        self.assertEquals([i.epithet for i in sp4.synonyms], [sp2.epithet])
-        self.assertEquals([i.epithet for i in sp1.synonyms], [sp3.epithet])
-        self.assertEquals(sp1.accepted, None)
-        self.assertEquals(sp2.accepted, sp4) 
-        self.assertEquals(sp3.accepted, sp1) 
-        self.assertEquals(sp4.accepted, None)
+        print('synonyms of 1', [i.epithet[-1] for i in sp1.synonyms])
+        print('synonyms of 4', [i.epithet[-1] for i in sp4.synonyms])
+        self.assertEqual([i.epithet for i in sp4.synonyms], [sp2.epithet])
+        self.assertEqual([i.epithet for i in sp1.synonyms], [sp3.epithet])
+        self.assertEqual(sp1.accepted, None)
+        self.assertEqual(sp2.accepted, sp4) 
+        self.assertEqual(sp3.accepted, sp1) 
+        self.assertEqual(sp4.accepted, None)
         sp2.accepted = sp4  # does not change anything
-        self.assertEquals(sp1.accepted, None)
-        self.assertEquals(sp2.accepted, sp4) 
-        self.assertEquals(sp3.accepted, sp1) 
-        self.assertEquals(sp4.accepted, None)
+        self.assertEqual(sp1.accepted, None)
+        self.assertEqual(sp2.accepted, sp4) 
+        self.assertEqual(sp3.accepted, sp1) 
+        self.assertEqual(sp4.accepted, None)
 
     def test_remove_callback_no_accessions_no_confirm(self):
         # T_0
-        caricaceae = Family(family=u'Caricaceae')
-        f5 = Genus(epithet=u'Carica', family=caricaceae)
-        sp = Species(epithet=u'papaya', genus=f5)
+        caricaceae = Family(family='Caricaceae')
+        f5 = Genus(epithet='Carica', family=caricaceae)
+        sp = Species(epithet='papaya', genus=f5)
         self.session.add_all([caricaceae, f5, sp])
         self.session.flush()
         self.invoked = []
@@ -1118,19 +1118,19 @@
         # effect
         self.assertFalse('message_details_dialog' in
                          [f for (f, m) in self.invoked])
-        print self.invoked
-        self.assertTrue(('yes_no_dialog', u'Are you sure you want to remove the species <i>Carica \u200bpapaya</i>?')
+        print(self.invoked)
+        self.assertTrue(('yes_no_dialog', 'Are you sure you want to remove the species <i>Carica \u200bpapaya</i>?')
                         in self.invoked)
-        self.assertEquals(result, None)
-        q = self.session.query(Species).filter_by(genus=f5, sp=u"papaya")
+        self.assertEqual(result, None)
+        q = self.session.query(Species).filter_by(genus=f5, sp="papaya")
         matching = q.all()
-        self.assertEquals(matching, [sp])
+        self.assertEqual(matching, [sp])
 
     def test_remove_callback_no_accessions_confirm(self):
         # T_0
-        caricaceae = Family(family=u'Caricaceae')
-        f5 = Genus(epithet=u'Carica', family=caricaceae)
-        sp = Species(epithet=u'papaya', genus=f5)
+        caricaceae = Family(family='Caricaceae')
+        f5 = Genus(epithet='Carica', family=caricaceae)
+        sp = Species(epithet='papaya', genus=f5)
         self.session.add_all([caricaceae, f5, sp])
         self.session.flush()
         self.invoked = []
@@ -1145,24 +1145,24 @@
         self.session.flush()
 
         # effect
-        print self.invoked
+        print(self.invoked)
         self.assertFalse('message_details_dialog' in
                          [f for (f, m) in self.invoked])
-        self.assertTrue(('yes_no_dialog', u'Are you sure you want to remove the species <i>Carica \u200bpapaya</i>?')
+        self.assertTrue(('yes_no_dialog', 'Are you sure you want to remove the species <i>Carica \u200bpapaya</i>?')
                         in self.invoked)
 
-        self.assertEquals(result, True)
-        q = self.session.query(Species).filter_by(sp=u"Carica")
+        self.assertEqual(result, True)
+        q = self.session.query(Species).filter_by(sp="Carica")
         matching = q.all()
-        self.assertEquals(matching, [])
+        self.assertEqual(matching, [])
 
     def test_remove_callback_with_accessions_cant_cascade(self):
         # T_0
-        caricaceae = Family(family=u'Caricaceae')
-        f5 = Genus(epithet=u'Carica', family=caricaceae)
-        sp = Species(epithet=u'papaya', genus=f5)
+        caricaceae = Family(family='Caricaceae')
+        f5 = Genus(epithet='Carica', family=caricaceae)
+        sp = Species(epithet='papaya', genus=f5)
         from bauble.plugins.garden import (Accession)
-        acc = Accession(code=u'0123456', species=sp)
+        acc = Accession(code='0123456', species=sp)
         self.session.add_all([caricaceae, f5, sp, acc])
         self.session.flush()
         self.invoked = []
@@ -1179,17 +1179,17 @@
         self.session.flush()
 
         # effect
-        print self.invoked
+        print(self.invoked)
         self.assertFalse('message_details_dialog' in
                          [f for (f, m) in self.invoked])
-        self.assertTrue(('message_dialog', u'The species <i>Carica \u200bpapaya</i> has 1 accessions.\n\nYou cannot remove a species with accessions.')
+        self.assertTrue(('message_dialog', 'The species <i>Carica \u200bpapaya</i> has 1 accessions.\n\nYou cannot remove a species with accessions.')
                         in self.invoked)
-        q = self.session.query(Species).filter_by(genus=f5, sp=u"papaya")
+        q = self.session.query(Species).filter_by(genus=f5, sp="papaya")
         matching = q.all()
-        self.assertEquals(matching, [sp])
+        self.assertEqual(matching, [sp])
         q = self.session.query(Accession).filter_by(species=sp)
         matching = q.all()
-        self.assertEquals(matching, [acc])
+        self.assertEqual(matching, [acc])
 
 
 class GeographyTests(PlantTestCase):
@@ -1199,8 +1199,8 @@
 
     def setUp(self):
         super(GeographyTests, self).setUp()
-        self.family = Family(family=u'family')
-        self.genus = Genus(genus=u'genus', family=self.family)
+        self.family = Family(family='family')
+        self.genus = Genus(genus='genus', family=self.family)
         self.session.add_all([self.family, self.genus])
         self.session.flush()
         # import default geography data
@@ -1223,15 +1223,15 @@
         western_canada_id = 45
 
         # create a some species
-        sp1 = Species(genus=self.genus, sp=u'sp1')
+        sp1 = Species(genus=self.genus, sp='sp1')
         dist = SpeciesDistribution(geography_id=mexico_central_id)
         sp1.distribution.append(dist)
 
-        sp2 = Species(genus=self.genus, sp=u'sp2')
+        sp2 = Species(genus=self.genus, sp='sp2')
         dist = SpeciesDistribution(geography_id=oaxaca_id)
         sp2.distribution.append(dist)
 
-        sp3 = Species(genus=self.genus, sp=u'sp3')
+        sp3 = Species(genus=self.genus, sp='sp3')
         dist = SpeciesDistribution(geography_id=western_canada_id)
         sp3.distribution.append(dist)
 
@@ -1239,27 +1239,27 @@
 
         oaxaca = self.session.query(Geography).get(oaxaca_id)
         species = get_species_in_geography(oaxaca)
-        self.assert_([s.id for s in species] == [sp2.id])
+        self.assertTrue([s.id for s in species] == [sp2.id])
 
         mexico = self.session.query(Geography).get(mexico_id)
         species = get_species_in_geography(mexico)
-        self.assert_([s.id for s in species] == [sp1.id, sp2.id])
+        self.assertTrue([s.id for s in species] == [sp1.id, sp2.id])
 
         north_america = self.session.query(Geography).get(northern_america_id)
         species = get_species_in_geography(north_america)
-        self.assert_([s.id for s in species] == [sp1.id, sp2.id, sp3.id])
+        self.assertTrue([s.id for s in species] == [sp1.id, sp2.id, sp3.id])
 
     def test_species_distribution_str(self):
         # create a some species
-        sp1 = Species(genus=self.genus, sp=u'sp1')
+        sp1 = Species(genus=self.genus, sp='sp1')
         dist = SpeciesDistribution(geography_id=267)
         sp1.distribution.append(dist)
         self.session.flush()
-        self.assertEquals(sp1.distribution_str(), 'Mexico Central')
+        self.assertEqual(sp1.distribution_str(), 'Mexico Central')
         dist = SpeciesDistribution(geography_id=45)
         sp1.distribution.append(dist)
         self.session.flush()
-        self.assertEquals(sp1.distribution_str(), 'Mexico Central, Western Canada')
+        self.assertEqual(sp1.distribution_str(), 'Mexico Central, Western Canada')
 
 
 class FromAndToDictTest(PlantTestCase):
@@ -1280,7 +1280,7 @@
         sol = Family.retrieve_or_create(
             self.session, {'rank': 'family',
                            'epithet': 'Solanaceae'})
-        self.assertEquals(set(all_families), set([orc, pol, leg, sol]))
+        self.assertEqual(set(all_families), set([orc, pol, leg, sol]))
 
     def test_grabbing_same_params_same_output_existing(self):
         orc1 = Family.retrieve_or_create(
@@ -1368,7 +1368,7 @@
                            'rank': 'familia',
                            'epithet': 'Arecaceae'},
             create=False)
-        self.assertEquals(obj, None)
+        self.assertEqual(obj, None)
 
     def test_family_nocreate_noupdateeq_existing(self):
         ## retrieve same object, we only give the keys
@@ -1378,7 +1378,7 @@
                            'epithet': 'Leguminosae'},
             create=False, update=False)
         self.assertTrue(obj is not None)
-        self.assertEquals(obj.qualifier, 's. str.')
+        self.assertEqual(obj.qualifier, 's. str.')
 
     def test_family_nocreate_noupdatediff_existing(self):
         ## do not update object with new data
@@ -1386,9 +1386,9 @@
             self.session, {'object': 'taxon',
                            'rank': 'familia',
                            'epithet': 'Leguminosae',
-                           'qualifier': u's. lat.'},
-            create=False, update=False)
-        self.assertEquals(obj.qualifier, u's. str.')
+                           'qualifier': 's. lat.'},
+            create=False, update=False)
+        self.assertEqual(obj.qualifier, 's. str.')
 
     def test_family_nocreate_updatediff_existing(self):
         ## update object in self.session
@@ -1396,9 +1396,9 @@
             self.session, {'object': 'taxon',
                            'rank': 'familia',
                            'epithet': 'Leguminosae',
-                           'qualifier': u's. lat.'},
+                           'qualifier': 's. lat.'},
             create=False, update=True)
-        self.assertEquals(obj.qualifier, u's. lat.')
+        self.assertEqual(obj.qualifier, 's. lat.')
 
     def test_genus_nocreate_noupdate_noexisting_impossible(self):
         # do not create if not existing
@@ -1407,7 +1407,7 @@
                            'rank': 'genus',
                            'epithet': 'Masdevallia'},
             create=False)
-        self.assertEquals(obj, None)
+        self.assertEqual(obj, None)
 
     def test_genus_create_noupdate_noexisting_impossible(self):
         # do not create if not existing
@@ -1416,7 +1416,7 @@
                            'rank': 'genus',
                            'epithet': 'Masdevallia'},
             create=True)
-        self.assertEquals(obj, None)
+        self.assertEqual(obj, None)
 
     def test_genus_nocreate_noupdate_noexisting_possible(self):
         # do not create if not existing
@@ -1427,7 +1427,7 @@
                            'ht-rank': 'familia',
                            'ht-epithet': 'Orchidaceae'},
             create=False)
-        self.assertEquals(obj, None)
+        self.assertEqual(obj, None)
 
     def test_genus_nocreate_noupdateeq_existing(self):
         ## retrieve same object, we only give the keys
@@ -1437,87 +1437,87 @@
                            'epithet': 'Maxillaria'},
             create=False, update=False)
         self.assertTrue(obj is not None)
-        self.assertEquals(obj.author, '')
+        self.assertEqual(obj.author, '')
 
     def test_genus_nocreate_noupdatediff_existing(self):
         ## do not update object with new data
         obj = Genus.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'rank': 'genus',
-                           'epithet': u'Maxillaria',
-                           'author': u'Schltr.'},
+                           'epithet': 'Maxillaria',
+                           'author': 'Schltr.'},
             create=False, update=False)
         self.assertTrue(obj is not None)
-        self.assertEquals(obj.author, '')
+        self.assertEqual(obj.author, '')
 
     def test_genus_nocreate_updatediff_existing(self):
         ## update object in self.session
         obj = Genus.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'rank': 'genus',
-                           'epithet': u'Maxillaria',
-                           'author': u'Schltr.'},
+                           'epithet': 'Maxillaria',
+                           'author': 'Schltr.'},
             create=False, update=True)
         self.assertTrue(obj is not None)
-        self.assertEquals(obj.author, u'Schltr.')
+        self.assertEqual(obj.author, 'Schltr.')
 
     def test_vernacular_name_as_dict(self):
         bra = self.session.query(Species).filter(Species.id == 21).first()
         vn_bra = self.session.query(VernacularName).filter(
-            VernacularName.language == u'agr',
+            VernacularName.language == 'agr',
             VernacularName.species == bra).all()
-        self.assertEquals(vn_bra[0].as_dict(),
+        self.assertEqual(vn_bra[0].as_dict(),
                           {'object': 'vernacular_name',
-                           'name': u'Toé',
-                           'language': u'agr',
+                           'name': 'Toé',
+                           'language': 'agr',
                            'species': 'Brugmansia arborea'})
         vn_bra = self.session.query(VernacularName).filter(
-            VernacularName.language == u'es',
+            VernacularName.language == 'es',
             VernacularName.species == bra).all()
-        self.assertEquals(vn_bra[0].as_dict(),
+        self.assertEqual(vn_bra[0].as_dict(),
                           {'object': 'vernacular_name',
-                           'name': u'Floripondio',
-                           'language': u'es',
+                           'name': 'Floripondio',
+                           'language': 'es',
                            'species': 'Brugmansia arborea'})
 
     def test_vernacular_name_nocreate_noupdate_noexisting(self):
         # do not create if not existing
         obj = VernacularName.retrieve_or_create(
-            self.session, {'object': u'vernacular_name',
-                           'language': u'nap',
-                           'species': u'Brugmansia arborea'},
+            self.session, {'object': 'vernacular_name',
+                           'language': 'nap',
+                           'species': 'Brugmansia arborea'},
             create=False)
-        self.assertEquals(obj, None)
+        self.assertEqual(obj, None)
 
     def test_vernacular_name_nocreate_noupdateeq_existing(self):
         ## retrieve same object, we only give the keys
         obj = VernacularName.retrieve_or_create(
-            self.session, {'object': u'vernacular_name',
-                           'language': u'agr',
-                           'species': u'Brugmansia arborea'},
+            self.session, {'object': 'vernacular_name',
+                           'language': 'agr',
+                           'species': 'Brugmansia arborea'},
             create=False, update=False)
         self.assertTrue(obj is not None)
-        self.assertEquals(obj.name, 'Toé')
+        self.assertEqual(obj.name, 'Toé')
 
     def test_vernacular_name_nocreate_noupdatediff_existing(self):
         ## do not update object with new data
         obj = VernacularName.retrieve_or_create(
             self.session, {'object': 'vernacular_name',
-                           'language': u'agr',
-                           'name': u'wronge',
-                           'species': u'Brugmansia arborea'},
-            create=False, update=False)
-        self.assertEquals(obj.name, 'Toé')
+                           'language': 'agr',
+                           'name': 'wronge',
+                           'species': 'Brugmansia arborea'},
+            create=False, update=False)
+        self.assertEqual(obj.name, 'Toé')
 
     def test_vernacular_name_nocreate_updatediff_existing(self):
         ## update object in self.session
         obj = VernacularName.retrieve_or_create(
             self.session, {'object': 'vernacular_name',
-                           'language': u'agr',
-                           'name': u'wronge',
-                           'species': u'Brugmansia arborea'},
+                           'language': 'agr',
+                           'name': 'wronge',
+                           'species': 'Brugmansia arborea'},
             create=False, update=True)
-        self.assertEquals(obj.name, 'wronge')
+        self.assertEqual(obj.name, 'wronge')
 
 
 class CitesStatus_test(PlantTestCase):
@@ -1527,39 +1527,39 @@
         obj = Genus.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'rank': 'genus',
-                           'epithet': u'Maxillaria'},
-            create=False, update=False)
-        self.assertEquals(obj.cites, u'II')
+                           'epithet': 'Maxillaria'},
+            create=False, update=False)
+        self.assertEqual(obj.cites, 'II')
         obj = Genus.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'rank': 'genus',
-                           'epithet': u'Laelia'},
-            create=False, update=False)
-        self.assertEquals(obj.cites, u'II')
+                           'epithet': 'Laelia'},
+            create=False, update=False)
+        self.assertEqual(obj.cites, 'II')
         obj = Species.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'genus',
-                           'ht-epithet': u'Paphiopedilum',
+                           'ht-epithet': 'Paphiopedilum',
                            'rank': 'species',
-                           'epithet': u'adductum'},
-            create=False, update=False)
-        self.assertEquals(obj.cites, u'I')
+                           'epithet': 'adductum'},
+            create=False, update=False)
+        self.assertEqual(obj.cites, 'I')
         obj = Species.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'genus',
-                           'ht-epithet': u'Laelia',
+                           'ht-epithet': 'Laelia',
                            'rank': 'species',
-                           'epithet': u'lobata'},
-            create=False, update=False)
-        self.assertEquals(obj.cites, u'I')
+                           'epithet': 'lobata'},
+            create=False, update=False)
+        self.assertEqual(obj.cites, 'I')
         obj = Species.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'genus',
-                           'ht-epithet': u'Laelia',
+                           'ht-epithet': 'Laelia',
                            'rank': 'species',
-                           'epithet': u'grandiflora'},
-            create=False, update=False)
-        self.assertEquals(obj.cites, u'II')
+                           'epithet': 'grandiflora'},
+            create=False, update=False)
+        self.assertEqual(obj.cites, 'II')
 
 
 class GenusHybridMarker_test(PlantTestCase):
@@ -1567,47 +1567,47 @@
     def test_intergeneric_hybrid_not_hybrid(self):
         gen = Genus.retrieve_or_create(
             self.session, {'ht-rank': 'family',
-                           'ht-epithet': u'Orchidaceae',
+                           'ht-epithet': 'Orchidaceae',
                            'rank': 'genus',
-                           'epithet': u'Cattleya'})
-        self.assertEquals(gen.hybrid_marker, u'')
-        self.assertEquals(gen.hybrid_epithet, u'Cattleya')
+                           'epithet': 'Cattleya'})
+        self.assertEqual(gen.hybrid_marker, '')
+        self.assertEqual(gen.hybrid_epithet, 'Cattleya')
 
     def test_intergeneric_hybrid_mult(self):
         gen = Genus.retrieve_or_create(
             self.session, {'ht-rank': 'family',
-                           'ht-epithet': u'Orchidaceae',
+                           'ht-epithet': 'Orchidaceae',
                            'rank': 'genus',
-                           'epithet': u'×Brassocattleya'})
-        self.assertEquals(gen.hybrid_marker, u'×')
-        self.assertEquals(gen.hybrid_epithet, u'Brassocattleya')
+                           'epithet': '×Brassocattleya'})
+        self.assertEqual(gen.hybrid_marker, '×')
+        self.assertEqual(gen.hybrid_epithet, 'Brassocattleya')
 
     def test_intergeneric_hybrid_x_becomes_mult(self):
         gen = Genus.retrieve_or_create(
             self.session, {'ht-rank': 'family',
-                           'ht-epithet': u'Orchidaceae',
+                           'ht-epithet': 'Orchidaceae',
                            'rank': 'genus',
-                           'epithet': u'xVascostylis'})
-        self.assertEquals(gen.hybrid_marker, u'×')
-        self.assertEquals(gen.hybrid_epithet, u'Vascostylis')
+                           'epithet': 'xVascostylis'})
+        self.assertEqual(gen.hybrid_marker, '×')
+        self.assertEqual(gen.hybrid_epithet, 'Vascostylis')
 
     def test_hybrid_formula_H(self):
         gen = Genus.retrieve_or_create(
             self.session, {'ht-rank': 'family',
-                           'ht-epithet': u'Orchidaceae',
+                           'ht-epithet': 'Orchidaceae',
                            'rank': 'genus',
-                           'epithet': u'Miltonia × Odontoglossum × Cochlioda'})
-        self.assertEquals(gen.hybrid_marker, u'H')
-        self.assertEquals(gen.hybrid_epithet, u'Miltonia × Odontoglossum × Cochlioda')
+                           'epithet': 'Miltonia × Odontoglossum × Cochlioda'})
+        self.assertEqual(gen.hybrid_marker, 'H')
+        self.assertEqual(gen.hybrid_epithet, 'Miltonia × Odontoglossum × Cochlioda')
 
     def test_intergeneric_graft_hybrid_plus(self):
         gen = Genus.retrieve_or_create(
             self.session, {'ht-rank': 'family',
-                           'ht-epithet': u'Rosaceae',
+                           'ht-epithet': 'Rosaceae',
                            'rank': 'genus',
-                           'epithet': u'+Crataegomespilus'})
-        self.assertEquals(gen.hybrid_marker, u'+')
-        self.assertEquals(gen.hybrid_epithet, u'Crataegomespilus')
+                           'epithet': '+Crataegomespilus'})
+        self.assertEqual(gen.hybrid_marker, '+')
+        self.assertEqual(gen.hybrid_epithet, 'Crataegomespilus')
 
 
 class SpeciesInfraspecificProp(PlantTestCase):
@@ -1616,23 +1616,23 @@
         obj = Species.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'genus',
-                           'ht-epithet': u'Paphiopedilum',
+                           'ht-epithet': 'Paphiopedilum',
                            'rank': 'species',
-                           'epithet': u''})
-        obj.infrasp1 = u'Eva Weigner'
-        obj.infrasp1_rank = u'cv.'
-        self.assertEquals(obj.cultivar_epithet, u'Eva Weigner')
+                           'epithet': ''})
+        obj.infrasp1 = 'Eva Weigner'
+        obj.infrasp1_rank = 'cv.'
+        self.assertEqual(obj.cultivar_epithet, 'Eva Weigner')
 
     def test_cultivar_epithet_2(self):
         obj = Species.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'genus',
-                           'ht-epithet': u'Paphiopedilum',
+                           'ht-epithet': 'Paphiopedilum',
                            'rank': 'species',
-                           'epithet': u''})
-        obj.infrasp2 = u'Eva Weigner'
-        obj.infrasp2_rank = u'cv.'
-        self.assertEquals(obj.cultivar_epithet, u'Eva Weigner')
+                           'epithet': ''})
+        obj.infrasp2 = 'Eva Weigner'
+        obj.infrasp2_rank = 'cv.'
+        self.assertEqual(obj.cultivar_epithet, 'Eva Weigner')
 
     def include_cinnamomum_camphora(self):
         '''\
@@ -1643,41 +1643,41 @@
         Family.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'rank': 'family',
-                           'epithet': u'Lauraceae'})
+                           'epithet': 'Lauraceae'})
         self.cinnamomum = Genus.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'family',
-                           'ht-epithet': u'Lauraceae',
+                           'ht-epithet': 'Lauraceae',
                            'rank': 'genus',
-                           'epithet': u'Cinnamomum'})
+                           'epithet': 'Cinnamomum'})
         self.cinnamomum_camphora = Species.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'genus',
-                           'ht-epithet': u'Cinnamomum',
+                           'ht-epithet': 'Cinnamomum',
                            'rank': 'species',
-                           'epithet': u'camphora'})
+                           'epithet': 'camphora'})
 
     def test_infraspecific_1(self):
         self.include_cinnamomum_camphora()
         obj = Species(genus=self.cinnamomum,
-                      sp=u'camphora',
-                      infrasp1_rank=u'f.',
-                      infrasp1=u'linaloolifera',
-                      infrasp1_author=u'(Y.Fujita) Sugim.')
-        self.assertEquals(obj.infraspecific_rank, u'f.')
-        self.assertEquals(obj.infraspecific_epithet, u'linaloolifera')
-        self.assertEquals(obj.infraspecific_author, u'(Y.Fujita) Sugim.')
+                      sp='camphora',
+                      infrasp1_rank='f.',
+                      infrasp1='linaloolifera',
+                      infrasp1_author='(Y.Fujita) Sugim.')
+        self.assertEqual(obj.infraspecific_rank, 'f.')
+        self.assertEqual(obj.infraspecific_epithet, 'linaloolifera')
+        self.assertEqual(obj.infraspecific_author, '(Y.Fujita) Sugim.')
 
     def test_infraspecific_2(self):
         self.include_cinnamomum_camphora()
         obj = Species(genus=self.cinnamomum,
-                      sp=u'camphora',
-                      infrasp2_rank=u'f.',
-                      infrasp2=u'linaloolifera',
-                      infrasp2_author=u'(Y.Fujita) Sugim.')
-        self.assertEquals(obj.infraspecific_rank, u'f.')
-        self.assertEquals(obj.infraspecific_epithet, u'linaloolifera')
-        self.assertEquals(obj.infraspecific_author, u'(Y.Fujita) Sugim.')
+                      sp='camphora',
+                      infrasp2_rank='f.',
+                      infrasp2='linaloolifera',
+                      infrasp2_author='(Y.Fujita) Sugim.')
+        self.assertEqual(obj.infraspecific_rank, 'f.')
+        self.assertEqual(obj.infraspecific_epithet, 'linaloolifera')
+        self.assertEqual(obj.infraspecific_author, '(Y.Fujita) Sugim.')
 
     def include_gleditsia_triacanthos(self):
         "Gleditsia triacanthos var. inermis 'Sunburst'."
@@ -1688,41 +1688,41 @@
         self.gleditsia = Genus.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'family',
-                           'ht-epithet': u'Fabaceae',
+                           'ht-epithet': 'Fabaceae',
                            'rank': 'genus',
-                           'epithet': u'Gleditsia'})
+                           'epithet': 'Gleditsia'})
         self.gleditsia_triacanthos = Species.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'genus',
-                           'ht-epithet': u'Gleditsia',
+                           'ht-epithet': 'Gleditsia',
                            'rank': 'species',
-                           'epithet': u'triacanthos'})
+                           'epithet': 'triacanthos'})
 
     def test_variety_and_cultivar_1(self):
         self.include_gleditsia_triacanthos()
         obj = Species(genus=self.gleditsia,
-                      sp=u'triacanthos',
-                      infrasp1_rank=u'var.',
-                      infrasp1=u'inermis',
-                      infrasp2=u'Sunburst',
-                      infrasp2_rank=u'cv.')
-        self.assertEquals(obj.infraspecific_rank, u'var.')
-        self.assertEquals(obj.infraspecific_epithet, u'inermis')
-        self.assertEquals(obj.infraspecific_author, u'')
-        self.assertEquals(obj.cultivar_epithet, u'Sunburst')
+                      sp='triacanthos',
+                      infrasp1_rank='var.',
+                      infrasp1='inermis',
+                      infrasp2='Sunburst',
+                      infrasp2_rank='cv.')
+        self.assertEqual(obj.infraspecific_rank, 'var.')
+        self.assertEqual(obj.infraspecific_epithet, 'inermis')
+        self.assertEqual(obj.infraspecific_author, '')
+        self.assertEqual(obj.cultivar_epithet, 'Sunburst')
 
     def test_variety_and_cultivar_2(self):
         self.include_gleditsia_triacanthos()
         obj = Species(genus=self.gleditsia,
-                      sp=u'triacanthos',
-                      infrasp2_rank=u'var.',
-                      infrasp2=u'inermis',
-                      infrasp1=u'Sunburst',
-                      infrasp1_rank=u'cv.')
-        self.assertEquals(obj.infraspecific_rank, u'var.')
-        self.assertEquals(obj.infraspecific_epithet, u'inermis')
-        self.assertEquals(obj.infraspecific_author, u'')
-        self.assertEquals(obj.cultivar_epithet, u'Sunburst')
+                      sp='triacanthos',
+                      infrasp2_rank='var.',
+                      infrasp2='inermis',
+                      infrasp1='Sunburst',
+                      infrasp1_rank='cv.')
+        self.assertEqual(obj.infraspecific_rank, 'var.')
+        self.assertEqual(obj.infraspecific_epithet, 'inermis')
+        self.assertEqual(obj.infraspecific_author, '')
+        self.assertEqual(obj.cultivar_epithet, 'Sunburst')
 
     def test_infraspecific_props_is_lowest_ranked(self):
         '''Saxifraga aizoon\
@@ -1734,58 +1734,58 @@
         self.genus = Genus.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'family',
-                           'ht-epithet': u'Saxifragaceae',
+                           'ht-epithet': 'Saxifragaceae',
                            'rank': 'genus',
-                           'epithet': u'Saxifraga'})
+                           'epithet': 'Saxifraga'})
         self.species = Species.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'genus',
-                           'ht-epithet': u'Saxifraga',
+                           'ht-epithet': 'Saxifraga',
                            'rank': 'species',
-                           'epithet': u'aizoon'})
+                           'epithet': 'aizoon'})
         subvar = Species(genus=self.genus,
-                         sp=u'aizoon',
-                         infrasp1_rank=u'var.',
-                         infrasp1=u'aizoon',
-                         infrasp2_rank=u'subvar.',
-                         infrasp2=u'brevifolia',
+                         sp='aizoon',
+                         infrasp1_rank='var.',
+                         infrasp1='aizoon',
+                         infrasp2_rank='subvar.',
+                         infrasp2='brevifolia',
                          )
         subf = Species(genus=self.genus,
-                       sp=u'aizoon',
-                       infrasp2_rank=u'var.',
-                       infrasp2=u'aizoon',
-                       infrasp1_rank=u'subvar.',
-                       infrasp1=u'brevifolia',
-                       infrasp3_rank=u'f.',
-                       infrasp3=u'multicaulis',
-                       infrasp4_rank=u'subf.',
-                       infrasp4=u'surculosa',
+                       sp='aizoon',
+                       infrasp2_rank='var.',
+                       infrasp2='aizoon',
+                       infrasp1_rank='subvar.',
+                       infrasp1='brevifolia',
+                       infrasp3_rank='f.',
+                       infrasp3='multicaulis',
+                       infrasp4_rank='subf.',
+                       infrasp4='surculosa',
                        )
-        self.assertEquals(subvar.infraspecific_rank, u'subvar.')
-        self.assertEquals(subvar.infraspecific_epithet, u'brevifolia')
-        self.assertEquals(subvar.infraspecific_author, u'')
-        self.assertEquals(subvar.cultivar_epithet, u'')
-        self.assertEquals(subf.infraspecific_rank, u'subf.')
-        self.assertEquals(subf.infraspecific_epithet, u'surculosa')
-        self.assertEquals(subf.infraspecific_author, u'')
-        self.assertEquals(subf.cultivar_epithet, u'')
+        self.assertEqual(subvar.infraspecific_rank, 'subvar.')
+        self.assertEqual(subvar.infraspecific_epithet, 'brevifolia')
+        self.assertEqual(subvar.infraspecific_author, '')
+        self.assertEqual(subvar.cultivar_epithet, '')
+        self.assertEqual(subf.infraspecific_rank, 'subf.')
+        self.assertEqual(subf.infraspecific_epithet, 'surculosa')
+        self.assertEqual(subf.infraspecific_author, '')
+        self.assertEqual(subf.cultivar_epithet, '')
         "Saxifraga aizoon var. aizoon subvar. brevifolia f. multicaulis "
         "cv. 'Bellissima'"
         cv = Species(genus=self.genus,
-                     sp=u'aizoon',
-                     infrasp4_rank=u'var.',
-                     infrasp4=u'aizoon',
-                     infrasp1_rank=u'subvar.',
-                     infrasp1=u'brevifolia',
-                     infrasp3_rank=u'f.',
-                     infrasp3=u'multicaulis',
-                     infrasp2_rank=u'cv.',
-                     infrasp2=u'Bellissima',
+                     sp='aizoon',
+                     infrasp4_rank='var.',
+                     infrasp4='aizoon',
+                     infrasp1_rank='subvar.',
+                     infrasp1='brevifolia',
+                     infrasp3_rank='f.',
+                     infrasp3='multicaulis',
+                     infrasp2_rank='cv.',
+                     infrasp2='Bellissima',
                      )
-        self.assertEquals(cv.infraspecific_rank, u'f.')
-        self.assertEquals(cv.infraspecific_epithet, u'multicaulis')
-        self.assertEquals(cv.infraspecific_author, u'')
-        self.assertEquals(cv.cultivar_epithet, u'Bellissima')
+        self.assertEqual(cv.infraspecific_rank, 'f.')
+        self.assertEqual(cv.infraspecific_epithet, 'multicaulis')
+        self.assertEqual(cv.infraspecific_author, '')
+        self.assertEqual(cv.cultivar_epithet, 'Bellissima')
 
 
 class SpeciesProperties_test(PlantTestCase):
@@ -1794,41 +1794,41 @@
     def test_species_note_nocreate_noupdate_noexisting(self):
         # do not create if not existing
         obj = SpeciesNote.retrieve_or_create(
-            self.session, {'object': u'species_note',
-                           'category': u'IUCN',
-                           'species': u'Laelia grandiflora'},
+            self.session, {'object': 'species_note',
+                           'category': 'IUCN',
+                           'species': 'Laelia grandiflora'},
             create=False)
-        self.assertEquals(obj, None)
+        self.assertEqual(obj, None)
 
     def test_species_note_nocreate_noupdateeq_existing(self):
         ## retrieve same object, we only give the keys
         obj = SpeciesNote.retrieve_or_create(
-            self.session, {'object': u'species_note',
-                           'category': u'IUCN',
-                           'species': u'Encyclia fragrans'},
+            self.session, {'object': 'species_note',
+                           'category': 'IUCN',
+                           'species': 'Encyclia fragrans'},
             create=False, update=False)
         self.assertTrue(obj is not None)
-        self.assertEquals(obj.note, u'LC')
+        self.assertEqual(obj.note, 'LC')
 
     def test_species_note_nocreate_noupdatediff_existing(self):
         ## do not update object with new data
         obj = SpeciesNote.retrieve_or_create(
-            self.session, {'object': u'species_note',
-                           'category': u'IUCN',
-                           'species': u'Encyclia fragrans',
-                           'note': u'EX'},
-            create=False, update=False)
-        self.assertEquals(obj.note, u'LC')
+            self.session, {'object': 'species_note',
+                           'category': 'IUCN',
+                           'species': 'Encyclia fragrans',
+                           'note': 'EX'},
+            create=False, update=False)
+        self.assertEqual(obj.note, 'LC')
 
     def test_species_note_nocreate_updatediff_existing(self):
         ## update object in self.session
         obj = SpeciesNote.retrieve_or_create(
-            self.session, {'object': u'species_note',
-                           'category': u'IUCN',
-                           'species': u'Encyclia fragrans',
-                           'note': u'EX'},
+            self.session, {'object': 'species_note',
+                           'category': 'IUCN',
+                           'species': 'Encyclia fragrans',
+                           'note': 'EX'},
             create=False, update=True)
-        self.assertEquals(obj.note, u'EX')
+        self.assertEqual(obj.note, 'EX')
 
 
 class AttributesStoredInNotes(PlantTestCase):
@@ -1837,79 +1837,79 @@
             self.session, {'object': 'taxon',
                            'ht-rank': 'genus',
                            'rank': 'species',
-                           'ht-epithet': u'Laelia',
-                           'epithet': u'lobata'},
-            create=False, update=False)
-        note = SpeciesNote(category=u'<coords>', note=u'{1: 1, 2: 2}')
+                           'ht-epithet': 'Laelia',
+                           'epithet': 'lobata'},
+            create=False, update=False)
+        note = SpeciesNote(category='<coords>', note='{1: 1, 2: 2}')
         note.species = obj
         self.session.commit()
-        self.assertEquals(obj.coords, {'1': 1, '2': 2})
+        self.assertEqual(obj.coords, {'1': 1, '2': 2})
 
     def test_very_sloppy_json_dictionary(self):
         obj = Species.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'genus',
                            'rank': 'species',
-                           'ht-epithet': u'Laelia',
-                           'epithet': u'lobata'},
-            create=False, update=False)
-        note = SpeciesNote(category=u'<coords>', note=u'lat:8.3,lon:-80.1')
+                           'ht-epithet': 'Laelia',
+                           'epithet': 'lobata'},
+            create=False, update=False)
+        note = SpeciesNote(category='<coords>', note='lat:8.3,lon:-80.1')
         note.species = obj
         self.session.commit()
-        self.assertEquals(obj.coords, {'lat': 8.3, 'lon': -80.1})
+        self.assertEqual(obj.coords, {'lat': 8.3, 'lon': -80.1})
 
     def test_very_very_sloppy_json_dictionary(self):
         obj = Species.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'genus',
                            'rank': 'species',
-                           'ht-epithet': u'Laelia',
-                           'epithet': u'lobata'},
-            create=False, update=False)
-        note = SpeciesNote(category=u'<coords>', note=u'lat:8.3;lon:-80.1;alt:1400.0')
+                           'ht-epithet': 'Laelia',
+                           'epithet': 'lobata'},
+            create=False, update=False)
+        note = SpeciesNote(category='<coords>', note='lat:8.3;lon:-80.1;alt:1400.0')
         note.species = obj
         self.session.commit()
-        self.assertEquals(obj.coords, {'lat': 8.3, 'lon': -80.1, 'alt': 1400.0})
+        self.assertEqual(obj.coords, {'lat': 8.3, 'lon': -80.1, 'alt': 1400.0})
 
     def test_atomic_value_interpreted(self):
         obj = Species.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'genus',
                            'rank': 'species',
-                           'ht-epithet': u'Laelia',
-                           'epithet': u'lobata'},
-            create=False, update=False)
-        self.assertEquals(obj.price, 19.50)
+                           'ht-epithet': 'Laelia',
+                           'epithet': 'lobata'},
+            create=False, update=False)
+        self.assertEqual(obj.price, 19.50)
 
     def test_atomic_value_verbatim(self):
         obj = Species.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'genus',
                            'rank': 'species',
-                           'ht-epithet': u'Laelia',
-                           'epithet': u'lobata'},
-            create=False, update=False)
-        self.assertEquals(obj.price_tag, '$19.50')
+                           'ht-epithet': 'Laelia',
+                           'epithet': 'lobata'},
+            create=False, update=False)
+        self.assertEqual(obj.price_tag, '$19.50')
 
     def test_list_value(self):
         obj = Species.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'genus',
                            'rank': 'species',
-                           'ht-epithet': u'Laelia',
-                           'epithet': u'lobata'},
-            create=False, update=False)
-        self.assertEquals(obj.list_var, ['abc', 'def'])
+                           'ht-epithet': 'Laelia',
+                           'epithet': 'lobata'},
+            create=False, update=False)
+        self.assertEqual(obj.list_var, ['abc', 'def'])
 
     def test_dict_value(self):
         obj = Species.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'genus',
                            'rank': 'species',
-                           'ht-epithet': u'Laelia',
-                           'epithet': u'lobata'},
-            create=False, update=False)
-        self.assertEquals(obj.dict_var, {'k': 'abc', 'l': 'def', 'm': 'xyz'})
+                           'ht-epithet': 'Laelia',
+                           'epithet': 'lobata'},
+            create=False, update=False)
+        self.assertEqual(obj.dict_var, {'k': 'abc', 'l': 'def', 'm': 'xyz'})
 
 
 class ConservationStatus_test(PlantTestCase):
@@ -1919,11 +1919,11 @@
         obj = Species.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'genus',
-                           'ht-epithet': u'Encyclia',
+                           'ht-epithet': 'Encyclia',
                            'rank': 'species',
-                           'epithet': u'fragrans'},
-            create=False, update=False)
-        self.assertEquals(obj.conservation, u'LC')
+                           'epithet': 'fragrans'},
+            create=False, update=False)
+        self.assertEqual(obj.conservation, 'LC')
 
 
 from editor import GenericModelViewPresenterEditor, MockView
@@ -1934,27 +1934,27 @@
         species = Species.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'genus',
-                           'ht-epithet': u'Paphiopedilum',
+                           'ht-epithet': 'Paphiopedilum',
                            'rank': 'species',
-                           'epithet': u'adductum'},
+                           'epithet': 'adductum'},
             create=False, update=False)
         presenter = GenericModelViewPresenterEditor(species, MockView())
-        species.author = u'wrong'
+        species.author = 'wrong'
         presenter.commit_changes()
-        species.author = u'Asher'
+        species.author = 'Asher'
         presenter.commit_changes()
 
     def test_cantinsertsametwice(self):
         'while binomial name in view matches database item, warn user'
 
         raise SkipTest('Not Implemented')  # presenter uses view internals
-        from species_editor import SpeciesEditorPresenter
+        from .species_editor import SpeciesEditorPresenter
         model = Species.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'genus',
-                           'ht-epithet': u'Laelia',
+                           'ht-epithet': 'Laelia',
                            'rank': 'species',
-                           'epithet': u'lobata'},
+                           'epithet': 'lobata'},
             create=False, update=False)
         presenter = SpeciesEditorPresenter(model, MockView())
         presenter.on_text_entry_changed('sp_species_entry', 'grandiflora')
@@ -1970,43 +1970,43 @@
         eCo = Species.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'genus',
-                           'ht-epithet': u'Maxillaria',
+                           'ht-epithet': 'Maxillaria',
                            'rank': 'species',
-                           'epithet': u'variabilis'},
+                           'epithet': 'variabilis'},
             create=False, update=False)
         model = Species.retrieve_or_create(
             self.session, {'object': 'taxon',
                            'ht-rank': 'genus',
-                           'ht-epithet': u'Laelia',
+                           'ht-epithet': 'Laelia',
                            'rank': 'species',
-                           'epithet': u'lobata'},
+                           'epithet': 'lobata'},
             create=False, update=False)
         first, second = eCo.search_view_markup_pair()
         self.assertTrue(remove_zws(first).startswith(
-            u'<i>Maxillaria</i> <i>variabilis</i>'))
+            '<i>Maxillaria</i> <i>variabilis</i>'))
         expect = '<i>Maxillaria</i> <i>variabilis</i> <span weight="light">'\
             'Bateman ex Lindl.</span><span foreground="#555555" size="small" '\
             'weight="light"> - synonym of <i>Encyclia</i> <i>cochleata</i> '\
             '(L.) Lemée</span>'
-        self.assertEquals(remove_zws(first), expect)
-        self.assertEquals(second, u'Orchidaceae -- SomeName, SomeName 2')
+        self.assertEqual(remove_zws(first), expect)
+        self.assertEqual(second, 'Orchidaceae -- SomeName, SomeName 2')
         first, second = model.search_view_markup_pair()
-        self.assertEquals(remove_zws(first), u'<i>Laelia</i> <i>lobata</i>')
-        self.assertEquals(second, u'Orchidaceae')
+        self.assertEqual(remove_zws(first), '<i>Laelia</i> <i>lobata</i>')
+        self.assertEqual(second, 'Orchidaceae')
 
     def test_vername_markup_func(self):
         vName = self.session.query(VernacularName).filter_by(id=1).one()
         first, second = vName.search_view_markup_pair()
-        self.assertEquals(remove_zws(second), u'<i>Maxillaria</i> <i>variabilis</i>')
-        self.assertEquals(first, u'SomeName')
+        self.assertEqual(remove_zws(second), '<i>Maxillaria</i> <i>variabilis</i>')
+        self.assertEqual(first, 'SomeName')
 
     def test_species_get_kids(self):
         mVa = self.session.query(Species).filter_by(id=1).one()
-        self.assertEquals(partial(db.natsort, 'accessions')(mVa), [])
+        self.assertEqual(partial(db.natsort, 'accessions')(mVa), [])
 
     def test_vernname_get_kids(self):
         vName = self.session.query(VernacularName).filter_by(id=1).one()
-        self.assertEquals(partial(db.natsort, 'species.accessions')(vName), [])
+        self.assertEqual(partial(db.natsort, 'species.accessions')(vName), [])
 
 import bauble.search
 class BaubleSearchSearchTest(BaubleTestCase):
--- ./bauble/plugins/plants/test_asktpl.py	(original)
+++ ./bauble/plugins/plants/test_asktpl.py	(refactored)
@@ -32,12 +32,12 @@
     }
     result = type('FooBar', (object,), {})()
     result.text = answers.get(x, "")
-    print x
+    print(x)
     return result
 
 requests.get = requests_get
 
-from ask_tpl import AskTPL, what_to_do_with_it
+from .ask_tpl import AskTPL, what_to_do_with_it
 
 class TestOne(BaubleTestCase):
 
@@ -46,25 +46,25 @@
         binomial = 'Mangifera indica'
         AskTPL(binomial, what_to_do_with_it, timeout=2).run()
         infolog = self.handler.messages['bauble.plugins.plants.ask_tpl']['info']
-        self.assertEquals(len(infolog), 1)
-        self.assertEquals(infolog[0], 'Mangifera indica L. (Anacardiaceae)')
+        self.assertEqual(len(infolog), 1)
+        self.assertEqual(infolog[0], 'Mangifera indica L. (Anacardiaceae)')
 
     def test_taxon_is_synonym(self):
         self.handler.reset()
         binomial = 'Iris florentina'
         AskTPL(binomial, what_to_do_with_it, timeout=2).run()
         infolog = self.handler.messages['bauble.plugins.plants.ask_tpl']['info']
-        self.assertEquals(len(infolog), 2)
-        self.assertEquals(infolog[0], 'Iris \xc3\x97florentina L. (Iridaceae)')
-        self.assertEquals(infolog[1], 'Iris \xc3\x97germanica L. (Iridaceae) - is its accepted form')
+        self.assertEqual(len(infolog), 2)
+        self.assertEqual(infolog[0], 'Iris \xc3\x97florentina L. (Iridaceae)')
+        self.assertEqual(infolog[1], 'Iris \xc3\x97germanica L. (Iridaceae) - is its accepted form')
 
     def test_empty_answer(self):
         self.handler.reset()
         binomial = 'Manducaria italica'
         AskTPL(binomial, what_to_do_with_it, timeout=2).run()
         infolog = self.handler.messages['bauble.plugins.plants.ask_tpl']['info']
-        self.assertEquals(len(infolog), 1)
-        self.assertEquals(infolog[0], 'nothing matches')
+        self.assertEqual(len(infolog), 1)
+        self.assertEqual(infolog[0], 'nothing matches')
 
     def test_do_not_run_same_query_twice(self):
         self.handler.reset()
--- ./bauble/plugins/report/__init__.py	(original)
+++ ./bauble/plugins/report/__init__.py	(refactored)
@@ -80,7 +80,7 @@
         session = db.Session()
     if not isinstance(objs, (tuple, list)):
         objs = [objs]
-    queries = map(lambda o: get_query_func(o, session), objs)
+    queries = [get_query_func(o, session) for o in objs]
     # TODO: what is the problem with the following form?
     # results = session.query(cls).order_by(None).union(*queries)
     unions = union(*[q.statement for q in queries])
@@ -372,7 +372,7 @@
         default = prefs[default_config_pref]
         try:
             self.set_names_combo(default)
-        except Exception, e:
+        except Exception as e:
             logger.debug("%s(%s)" % (type(e).__name__, e))
             self.set_names_combo(0)
 
@@ -479,7 +479,7 @@
         prefs[default_config_pref] = name  # set the default to the new name
         try:
             title, settings = formatters[name]
-        except (KeyError, TypeError), e:
+        except (KeyError, TypeError) as e:
             # TODO: show a dialog saying that you can't find whatever
             # you're looking for in the settings
             logger.debug("%s(%s)" % (type(e).__name__, e))
@@ -487,7 +487,7 @@
 
         try:
             self.set_formatter_combo(title)
-        except Exception, e:
+        except Exception as e:
             # TODO: show a dialog saying that you can't find whatever
             # you're looking for in the settings
             logger.debug("%s(%s)" % (type(e).__name__, e))
@@ -506,7 +506,7 @@
         name = self.view.widgets.names_combo.get_active_text()
         try:
             saved_name, settings = prefs[config_list_pref][name]
-        except KeyError, e:
+        except KeyError as e:
             logger.debug("%s(%s)" % (type(e).__name__, e))
             return
 
@@ -538,7 +538,7 @@
 
     def init_formatter_combo(self):
         plugins = []
-        for p in pluginmgr.plugins.values():
+        for p in list(pluginmgr.plugins.values()):
             if isinstance(p, FormatterPlugin):
                 logger.debug('recognized %s as a FormatterPlugin', p)
                 plugins.append(p)
@@ -571,10 +571,10 @@
             return
         try:
             model = Gtk.ListStore(str)
-            for cfg in configs.keys():
+            for cfg in list(configs.keys()):
                 model.append([cfg])
             combo.set_model(model)
-        except AttributeError, e:
+        except AttributeError as e:
             # no formatters
             logger.debug("%s(%s)" % (type(e).__name__, e))
             pass
@@ -658,7 +658,7 @@
                 ok = formatter.format([row[0] for row in model], **settings)
                 if ok:
                     break
-        except AssertionError, e:
+        except AssertionError as e:
             logger.debug("%s(%s)" % (type(e).__name__, e))
             logger.debug(traceback.format_exc())
             parent = None
@@ -667,7 +667,7 @@
 
             utils.message_details_dialog(str(e), traceback.format_exc(),
                                          Gtk.MessageType.ERROR, parent=parent)
-        except Exception, e:
+        except Exception as e:
             logger.debug(traceback.format_exc())
             utils.message_details_dialog(_('Formatting Error\n\n'
                                            '%(exception)s') %
--- ./bauble/plugins/report/test.py	(original)
+++ ./bauble/plugins/report/test.py	(refactored)
@@ -69,33 +69,33 @@
     def setUp(self):
         super(ReportTests, self).setUp()
         fctr = gctr = sctr = actr = pctr = 0
-        for f in xrange(2):
+        for f in range(2):
             fctr += 1
-            family = Family(id=fctr, family=u'fam%s' % fctr)
+            family = Family(id=fctr, family='fam%s' % fctr)
             self.session.add(family)
             for g in range(2):
                 gctr += 1
-                genus = Genus(id=gctr, family=family, genus=u'gen%s' % gctr)
+                genus = Genus(id=gctr, family=family, genus='gen%s' % gctr)
                 self.session.add(genus)
                 for s in range(2):
                     sctr += 1
-                    sp = Species(id=sctr, genus=genus, sp=u'sp%s' % sctr)
+                    sp = Species(id=sctr, genus=genus, sp='sp%s' % sctr)
                     vn = VernacularName(id=sctr, species=sp,
-                                        name=u'name%s' % sctr)
+                                        name='name%s' % sctr)
                     self.session.add_all([sp, vn])
                     for a in range(2):
                         actr += 1
-                        acc = Accession(id=actr, species=sp, code=u'%s' % actr)
-                        contact = Contact(id=actr, name=u'contact%s' % actr)
+                        acc = Accession(id=actr, species=sp, code='%s' % actr)
+                        contact = Contact(id=actr, name='contact%s' % actr)
                         source = Source(id=actr, source_detail=contact,
                                 accession=acc)
                         self.session.add_all([acc, source, contact])
                         for p in range(2):
                             pctr += 1
-                            loc = Location(id=pctr, code=u'%s' % pctr,
-                                           name=u'site%s' % pctr)
+                            loc = Location(id=pctr, code='%s' % pctr,
+                                           name='site%s' % pctr)
                             plant = Plant(id=pctr, accession=acc, location=loc,
-                                          code=u'%s' % pctr, quantity=1)
+                                          code='%s' % pctr, quantity=1)
                             #debug('fctr: %s, gctr: %s, actr: %s, pctr: %s' \
                             #      % (fctr, gctr, actr, pctr))
                             self.session.add_all([loc, plant])
@@ -107,7 +107,7 @@
     def test_no_objects_in_FamilyNote(self):
         family = self.session.query(Family).get(1)
         from bauble.plugins.plants.family import FamilyNote
-        fn = FamilyNote(family=family, note=u'empty')
+        fn = FamilyNote(family=family, note='empty')
         self.session.add(fn)
         self.session.flush()
 
@@ -126,7 +126,7 @@
 
         family = self.session.query(Family).get(1)
         ids = get_ids(get_species_pertinent_to([family]))
-        self.assertEquals(ids, range(1, 5))
+        self.assertEqual(ids, list(range(1, 5)))
 
     def test_get_species_pertinent_to_element(self):
         """
@@ -136,7 +136,7 @@
 
         family = self.session.query(Family).get(1)
         ids = get_ids(get_species_pertinent_to(family, self.session))
-        self.assertEquals(ids, range(1, 5))
+        self.assertEqual(ids, list(range(1, 5)))
 
     def test_get_species_pertinent_to_lists(self):
         """
@@ -146,52 +146,52 @@
 
         family = self.session.query(Family).get(1)
         ids = get_ids(get_species_pertinent_to([family], self.session))
-        self.assertEquals(ids, range(1, 5))
+        self.assertEqual(ids, list(range(1, 5)))
 
         family = self.session.query(Family).get(1)
         family2 = self.session.query(Family).get(2)
         ids = get_ids(
             get_species_pertinent_to([family, family2], self.session))
-        self.assertEquals(ids, range(1, 9))
+        self.assertEqual(ids, list(range(1, 9)))
 
         genus = self.session.query(Genus).get(1)
         ids = get_ids(get_species_pertinent_to([genus], self.session))
-        self.assertEquals(ids, [1, 2])
+        self.assertEqual(ids, [1, 2])
 
         species = self.session.query(Species).get(1)
         ids = get_ids(get_species_pertinent_to([species], self.session))
-        self.assertEquals(ids, [1])
+        self.assertEqual(ids, [1])
 
         accession = self.session.query(Accession).get(1)
         ids = get_ids(get_species_pertinent_to([accession], self.session))
-        self.assertEquals(ids, [1])
+        self.assertEqual(ids, [1])
 
         contact = self.session.query(Contact).get(1)
         ids = get_ids(get_species_pertinent_to(contact, self.session))
-        self.assertEquals(ids, [1])
+        self.assertEqual(ids, [1])
 
         plant = self.session.query(Plant).get(1)
         ids = get_ids(get_species_pertinent_to([plant], self.session))
-        self.assertEquals(ids, [1])
+        self.assertEqual(ids, [1])
 
         location = self.session.query(Location).get(1)
         ids = get_ids(get_species_pertinent_to([location], self.session))
-        self.assertEquals(ids, [1])
+        self.assertEqual(ids, [1])
 
         vn = self.session.query(VernacularName).get(1)
         ids = get_ids(get_species_pertinent_to([vn], self.session))
-        self.assertEquals(ids, [1])
+        self.assertEqual(ids, [1])
 
         tag_objects('test', [family, genus])
-        tag = self.session.query(Tag).filter_by(tag=u'test').one()
+        tag = self.session.query(Tag).filter_by(tag='test').one()
         ids = get_ids(get_species_pertinent_to([tag], self.session))
-        self.assertEquals(ids, range(1, 5))
+        self.assertEqual(ids, list(range(1, 5)))
 
         # now test all the objects
         ids = get_ids(get_species_pertinent_to(
             [family, genus, species, accession, plant, location],
             self.session))
-        self.assertEquals(ids, range(1, 5))
+        self.assertEqual(ids, list(range(1, 5)))
 
     def test_get_accessions_pertinent_to(self):
         """
@@ -201,25 +201,25 @@
 
         family = self.session.query(Family).get(1)
         ids = get_ids(get_accessions_pertinent_to([family], self.session))
-        self.assertEquals(ids, range(1, 9))
+        self.assertEqual(ids, list(range(1, 9)))
 
         family = self.session.query(Family).get(1)
         family2 = self.session.query(Family).get(1)
         ids = get_ids(get_accessions_pertinent_to(
             [family, family2], self.session))
-        self.assertEquals(ids, range(1, 9))
+        self.assertEqual(ids, list(range(1, 9)))
 
         genus = self.session.query(Genus).get(1)
         ids = get_ids(get_accessions_pertinent_to(genus, self.session))
-        self.assertEquals(ids, range(1, 5))
+        self.assertEqual(ids, list(range(1, 5)))
 
         species = self.session.query(Species).get(1)
         ids = get_ids(get_accessions_pertinent_to(species, self.session))
-        self.assertEquals(ids, [1, 2])
+        self.assertEqual(ids, [1, 2])
 
         accession = self.session.query(Accession).get(1)
         ids = get_ids(get_accessions_pertinent_to([accession], self.session))
-        self.assertEquals(ids, [1])
+        self.assertEqual(ids, [1])
 
         contact = self.session.query(Contact).get(1)
         ids = get_ids(get_accessions_pertinent_to(contact, self.session))
@@ -227,26 +227,26 @@
 
         plant = self.session.query(Plant).get(1)
         ids = get_ids(get_accessions_pertinent_to([plant], self.session))
-        self.assertEquals(ids, [1])
+        self.assertEqual(ids, [1])
 
         location = self.session.query(Location).get(1)
         ids = get_ids(get_accessions_pertinent_to([location], self.session))
-        self.assertEquals(ids, [1])
+        self.assertEqual(ids, [1])
 
         vn = self.session.query(VernacularName).get(1)
         ids = get_ids(get_accessions_pertinent_to([vn], self.session))
-        self.assertEquals(ids, [1, 2])
+        self.assertEqual(ids, [1, 2])
 
         tag_objects('test', [family, genus])
-        tag = self.session.query(Tag).filter_by(tag=u'test').one()
+        tag = self.session.query(Tag).filter_by(tag='test').one()
         ids = get_ids(get_accessions_pertinent_to([tag], self.session))
-        self.assertEquals(ids, range(1, 9))
+        self.assertEqual(ids, list(range(1, 9)))
 
         # now test all the objects
         ids = get_ids(get_accessions_pertinent_to(
             [family, genus, species, accession, plant, location],
             self.session))
-        self.assertEquals(ids, range(1, 9))
+        self.assertEqual(ids, list(range(1, 9)))
 
     def test_get_plants_pertinent_to(self):
         """
@@ -257,53 +257,53 @@
         # get plants from one family
         family = self.session.query(Family).get(1)
         ids = get_ids(get_plants_pertinent_to(family, self.session))
-        self.assertEquals(ids, range(1, 17))
+        self.assertEqual(ids, list(range(1, 17)))
 
         # get plants from multiple families
         family = self.session.query(Family).get(1)
         family2 = self.session.query(Family).get(2)
         ids = get_ids(get_plants_pertinent_to([family, family2], self.session))
-        self.assertEquals(ids, range(1, 33))
+        self.assertEqual(ids, list(range(1, 33)))
 
         genus = self.session.query(Genus).get(1)
         ids = get_ids(get_plants_pertinent_to(genus, self.session))
-        self.assertEquals(ids, range(1, 9))
+        self.assertEqual(ids, list(range(1, 9)))
 
         species = self.session.query(Species).get(1)
         ids = get_ids(get_plants_pertinent_to(species, self.session))
-        self.assertEquals(ids, range(1, 5))
+        self.assertEqual(ids, list(range(1, 5)))
 
         accession = self.session.query(Accession).get(1)
         ids = get_ids(get_plants_pertinent_to(accession, self.session))
-        self.assertEquals(ids, range(1, 3))
+        self.assertEqual(ids, list(range(1, 3)))
 
         contact = self.session.query(Contact).get(1)
         ids = get_ids(get_plants_pertinent_to(contact, self.session))
-        self.assertTrue(ids == range(1, 3), ids)
+        self.assertTrue(ids == list(range(1, 3)), ids)
 
         plant = self.session.query(Plant).get(1)
         ids = get_ids(get_plants_pertinent_to(plant, self.session))
-        self.assertEquals(ids, [1])
+        self.assertEqual(ids, [1])
 
         location = self.session.query(Location).get(1)
         plants = get_plants_pertinent_to([location], self.session)
         ids = sorted([p.id for p in plants])
-        self.assertEquals(ids, [1])
+        self.assertEqual(ids, [1])
 
         vn = self.session.query(VernacularName).get(1)
         ids = get_ids(get_plants_pertinent_to(vn, self.session))
-        self.assertEquals(ids, range(1, 5))
+        self.assertEqual(ids, list(range(1, 5)))
 
         tag_objects('test', [family, genus])
-        tag = self.session.query(Tag).filter_by(tag=u'test').one()
+        tag = self.session.query(Tag).filter_by(tag='test').one()
         ids = get_ids(get_plants_pertinent_to(tag, self.session))
-        self.assertEquals(ids, range(1, 17))
+        self.assertEqual(ids, list(range(1, 17)))
 
         # now test all the objects
         plants = get_plants_pertinent_to(
             [family, genus, species, accession, plant, location], self.session)
         ids = get_ids(plants)
-        self.assertEquals(ids, range(1, 17))
+        self.assertEqual(ids, list(range(1, 17)))
 
     def test_get_locations_pertinent_to(self):
         """
@@ -314,51 +314,51 @@
         # get locations from one family
         family = self.session.query(Family).get(1)
         ids = get_ids(get_locations_pertinent_to(family, self.session))
-        self.assertEquals(ids, range(1, 17))
+        self.assertEqual(ids, list(range(1, 17)))
 
         # get locations from multiple families
         family = self.session.query(Family).get(1)
         family2 = self.session.query(Family).get(2)
         ids = get_ids(get_locations_pertinent_to([family, family2],
             self.session))
-        self.assertEquals(ids, range(1, 33))
+        self.assertEqual(ids, list(range(1, 33)))
 
         genus = self.session.query(Genus).get(1)
         ids = get_ids(get_locations_pertinent_to(genus, self.session))
-        self.assertEquals(ids, range(1, 9))
+        self.assertEqual(ids, list(range(1, 9)))
 
         species = self.session.query(Species).get(1)
         ids = get_ids(get_locations_pertinent_to(species, self.session))
-        self.assertEquals(ids, range(1, 5))
+        self.assertEqual(ids, list(range(1, 5)))
 
         vn = self.session.query(VernacularName).get(1)
         ids = get_ids(get_locations_pertinent_to(vn, self.session))
-        self.assertEquals(ids, range(1, 5))
+        self.assertEqual(ids, list(range(1, 5)))
 
         plant = self.session.query(Plant).get(1)
         ids = get_ids(get_locations_pertinent_to(plant, self.session))
-        self.assertEquals(ids, [1])
+        self.assertEqual(ids, [1])
 
         accession = self.session.query(Accession).get(1)
         ids = get_ids(get_locations_pertinent_to(accession, self.session))
-        self.assertEquals(ids, range(1, 3))
+        self.assertEqual(ids, list(range(1, 3)))
 
         contact = self.session.query(Contact).get(1)
         ids = get_ids(get_locations_pertinent_to(contact, self.session))
-        self.assertTrue(ids == range(1, 3))
+        self.assertTrue(ids == list(range(1, 3)))
 
         location = self.session.query(Location).get(1)
         locations = get_locations_pertinent_to([location], self.session)
         ids = [l.id for l in locations]
-        self.assertEquals(ids, [1])
+        self.assertEqual(ids, [1])
 
         tag_objects('test', [family, genus])
-        tag = self.session.query(Tag).filter_by(tag=u'test').one()
+        tag = self.session.query(Tag).filter_by(tag='test').one()
         ids = get_ids(get_locations_pertinent_to(tag, self.session))
-        self.assertEquals(ids, range(1, 17))
+        self.assertEqual(ids, list(range(1, 17)))
 
         # now test all the objects
         locations = get_locations_pertinent_to(
             [family, genus, species, accession, plant, location, tag], self.session)
         ids = get_ids(locations)
-        self.assertEquals(ids, range(1, 17))
+        self.assertEqual(ids, list(range(1, 17)))
--- ./bauble/plugins/report/mako/__init__.py	(original)
+++ ./bauble/plugins/report/mako/__init__.py	(refactored)
@@ -42,39 +42,39 @@
 
 
 font = {
-    '\u200b': 0,
-    u'!': 20, u'A': 36, u'a': 31, u'á': 31, u'Á': 38,
-    u'"': 23, u'B': 34, u'b': 32, u'à': 31, u'À': 38,
-    u'#': 40, u'C': 35, u'c': 28, u'â': 31, u'Â': 38,
-    u'$': 32, u'D': 39, u'd': 31, u'å': 31, u'Å': 38,
-    u'%': 50, u'E': 32, u'e': 30, u'ä': 31, u'Ä': 38,
-    u'&': 46, u'F': 29, u'f': 18, u'ã': 31, u'Ã': 38, u'æ': 31, u'Æ': 38,
-    u"'": 13, u'G': 39, u'g': 31, u'ç': 28, u'Ç': 35,
-    u'(': 22, u'H': 38, u'h': 32, u'ð': 31, u'Ð': 39,
-    u')': 23, u'I': 11, u'i': 11, u'é': 30, u'É': 32,
-    u'*': 32, u'J': 22, u'j': 11, u'è': 30, u'È': 31,
-    u'+': 41, u'K': 35, u'k': 29, u'ê': 30, u'Ê': 32,
-    u',': 18, u'L': 28, u'l': 11, u'ë': 29, u'Ë': 32,
-    u'-': 41, u'M': 39, u'm': 52, u'í': 11, u'Í': 11, u'ì': 11, u'Ì': 11,
-    u'.': 18, u'N': 37, u'n': 31, u'î': 11, u'Î': 11,
-    u'/': 23, u'O': 40, u'o': 31, u'ï': 11, u'Ï': 11,
-    u'0': 32, u'P': 31, u'p': 32, u'ñ': 30, u'Ñ': 37,
-    u'1': 32, u'Q': 39, u'q': 32, u'ó': 31, u'Ó': 40,
-    u'2': 32, u'R': 35, u'r': 22, u'ò': 31, u'Ò': 40,
-    u'3': 32, u'S': 34, u's': 27, u'ô': 31, u'Ô': 40,
-    u'4': 32, u'T': 29, u't': 18, u'ö': 31, u'Ö': 40,
-    u'5': 32, u'U': 37, u'u': 32, u'õ': 31, u'Õ': 40,
-    u'6': 32, u'V': 36, u'v': 27, u'ø': 31, u'Ø': 40,
-    u'7': 32, u'W': 49, u'w': 41, u'ú': 32, u'Ú': 37,
-    u'8': 32, u'X': 34, u'x': 29, u'ù': 31, u'Ù': 36,
-    u'9': 32, u'Y': 31, u'y': 27, u'û': 32, u'Û': 37,
-    u':': 18, u'Z': 34, u'z': 26, u'ü': 32, u'Ü': 37,
-    u';': 18, u'[': 23, u'{': 32, u'ý': 29, u'Ý': 30,
-    u'<': 41, u'\\': 23, u'|': 23, u'ÿ': 30, u'Ÿ': 31,
-    u'=': 41, u']': 23, u'}': 32, u'ń': 31, u'Ń': 38,
-    u'>': 41, u'^': 40, u'~': 41, u'ł': 15, u'Ł': 27,
-    u'?': 27, u'_': 32, u' ': 18, u'č': 26, u'Č': 35,
-    u'@': 50, u'`': 32, u'×': 26, u'š': 26, u'Š': 35,
+    '\\u200b': 0,
+    '!': 20, 'A': 36, 'a': 31, 'á': 31, 'Á': 38,
+    '"': 23, 'B': 34, 'b': 32, 'à': 31, 'À': 38,
+    '#': 40, 'C': 35, 'c': 28, 'â': 31, 'Â': 38,
+    '$': 32, 'D': 39, 'd': 31, 'å': 31, 'Å': 38,
+    '%': 50, 'E': 32, 'e': 30, 'ä': 31, 'Ä': 38,
+    '&': 46, 'F': 29, 'f': 18, 'ã': 31, 'Ã': 38, 'æ': 31, 'Æ': 38,
+    "'": 13, 'G': 39, 'g': 31, 'ç': 28, 'Ç': 35,
+    '(': 22, 'H': 38, 'h': 32, 'ð': 31, 'Ð': 39,
+    ')': 23, 'I': 11, 'i': 11, 'é': 30, 'É': 32,
+    '*': 32, 'J': 22, 'j': 11, 'è': 30, 'È': 31,
+    '+': 41, 'K': 35, 'k': 29, 'ê': 30, 'Ê': 32,
+    ',': 18, 'L': 28, 'l': 11, 'ë': 29, 'Ë': 32,
+    '-': 41, 'M': 39, 'm': 52, 'í': 11, 'Í': 11, 'ì': 11, 'Ì': 11,
+    '.': 18, 'N': 37, 'n': 31, 'î': 11, 'Î': 11,
+    '/': 23, 'O': 40, 'o': 31, 'ï': 11, 'Ï': 11,
+    '0': 32, 'P': 31, 'p': 32, 'ñ': 30, 'Ñ': 37,
+    '1': 32, 'Q': 39, 'q': 32, 'ó': 31, 'Ó': 40,
+    '2': 32, 'R': 35, 'r': 22, 'ò': 31, 'Ò': 40,
+    '3': 32, 'S': 34, 's': 27, 'ô': 31, 'Ô': 40,
+    '4': 32, 'T': 29, 't': 18, 'ö': 31, 'Ö': 40,
+    '5': 32, 'U': 37, 'u': 32, 'õ': 31, 'Õ': 40,
+    '6': 32, 'V': 36, 'v': 27, 'ø': 31, 'Ø': 40,
+    '7': 32, 'W': 49, 'w': 41, 'ú': 32, 'Ú': 37,
+    '8': 32, 'X': 34, 'x': 29, 'ù': 31, 'Ù': 36,
+    '9': 32, 'Y': 31, 'y': 27, 'û': 32, 'Û': 37,
+    ':': 18, 'Z': 34, 'z': 26, 'ü': 32, 'Ü': 37,
+    ';': 18, '[': 23, '{': 32, 'ý': 29, 'Ý': 30,
+    '<': 41, '\\': 23, '|': 23, 'ÿ': 30, 'Ÿ': 31,
+    '=': 41, ']': 23, '}': 32, 'ń': 31, 'Ń': 38,
+    '>': 41, '^': 40, '~': 41, 'ł': 15, 'Ł': 27,
+    '?': 27, '_': 32, ' ': 18, 'č': 26, 'Č': 35,
+    '@': 50, '`': 32, '×': 26, 'š': 26, 'Š': 35,
     }
 
 
@@ -94,7 +94,7 @@
         return '', x, y
     for i in s:
         if i not in font:
-            i = u'?'
+            i = '?'
         glyph_wid = font[i] / 2.0
         glyph_ref = "s%d-u%04x" % (strokes, ord(i))
         result_list.append(
@@ -125,8 +125,8 @@
         return '', x, y
     s = '!' + s + '!'
     for i in s:
-        if i not in Code39.MAP.keys():
-            i = u' '
+        if i not in list(Code39.MAP.keys()):
+            i = ' '
         result_list.append(Code39.letter(i, height, translate=(cumulative_x, 0), colour=colour))
         cumulative_x += 16
     cumulative_x -= 1
@@ -203,7 +203,7 @@
                         'M %(8)s,0 %(8)s,H')
         format = format.replace('H', str(height))
         blacks = [i for i, x in enumerate(cls.MAP[letter]) if x=='b']
-        d = dict(zip((str(i) for i in range(10)), blacks))
+        d = dict(list(zip((str(i) for i in range(10)), blacks)))
         return format % d
 
     @classmethod
@@ -222,9 +222,9 @@
 class add_qr_functor:
     import pyqrcode
     def __init__(self):
-        import StringIO
+        import io
         import re
-        self.buffer = StringIO.StringIO()
+        self.buffer = io.StringIO()
         self.pattern = {
             'svg': re.compile('<svg.*height="([0-9]*)".*>(<path.*>)</svg>'),
             'ps': re.compile('.* ([0-9]*).*(^/M.*)%%EOF.*', re.MULTILINE | re.DOTALL),
@@ -303,22 +303,20 @@
         self.defaults = []
         options_box = self.widgets.mako_options_box
         # empty the options box
-        map(options_box.remove, options_box.get_children())
+        list(map(options_box.remove, options_box.get_children()))
         # which options does the template accept? (can be None)
         try:
             with open(self.widgets.template_chooser.get_filename()) as f:
                 # scan the header filtering lines starting with # OPTION
-                option_lines = filter(None,
-                                      [self.pattern.match(i.strip())
-                                       for i in f.readlines()])
+                option_lines = [_f for _f in [self.pattern.match(i.strip())
+                                       for i in f.readlines()] if _f]
         except TypeError:
             # win32 bug with get_filename first time around...
             try:
                 with open(kwargs.get('settings', {}).get('template')) as f:
                     # scan the header filtering lines starting with # OPTION
-                    option_lines = filter(None,
-                                          [self.pattern.match(i.strip())
-                                           for i in f.readlines()])
+                    option_lines = [_f for _f in [self.pattern.match(i.strip())
+                                           for i in f.readlines()] if _f]
             except IOError:
                 # self.update(kwargs.get('settings'))
                 option_lines = []
@@ -427,16 +425,15 @@
 
         # make sure the options dictionary is initialized at all
         with open(template_filename) as f:
-            option_lines = filter(None,
-                                  [MakoFormatterSettingsBox.pattern.match(i.strip())
-                                   for i in f.readlines()])
+            option_lines = [_f for _f in [MakoFormatterSettingsBox.pattern.match(i.strip())
+                                   for i in f.readlines()] if _f]
         option_fields = [i.groups() for i in option_lines]
         from bauble.plugins.report import options
         for fname, ftype, fdefault, ftooltip in option_fields:
             options.setdefault(fname, fdefault)
 
         session = db.Session()
-        values = map(session.merge, objs)
+        values = list(map(session.merge, objs))
         report = template.render(values=values)
         session.close()
         # assume the template is the same file type as the output file
--- ./bauble/plugins/report/mako/test.py	(original)
+++ ./bauble/plugins/report/mako/test.py	(refactored)
@@ -44,35 +44,35 @@
     def setUp(self, *args):
         super(MakoFormatterTests, self).setUp()
         fctr = gctr = sctr = actr = pctr = 0
-        for f in xrange(2):
+        for f in range(2):
             fctr+=1
-            family = Family(id=fctr, family=u'fam%s' % fctr)
+            family = Family(id=fctr, family='fam%s' % fctr)
             self.session.add(family)
             for g in range(2):
                 gctr+=1
-                genus = Genus(id=gctr, family=family, genus=u'gen%s' % gctr)
+                genus = Genus(id=gctr, family=family, genus='gen%s' % gctr)
                 self.session.add(genus)
                 for s in range(2):
                     sctr+=1
-                    sp = Species(id=sctr, genus=genus, sp=u'sp%s' % sctr)
+                    sp = Species(id=sctr, genus=genus, sp='sp%s' % sctr)
                     # TODO: why doesn't this geography, species
                     # distribution stuff seem to work
-                    geo = Geography(id=sctr, name=u'Mexico%s' % sctr)
+                    geo = Geography(id=sctr, name='Mexico%s' % sctr)
                     dist = SpeciesDistribution(geography_id=sctr)
                     sp.distribution.append(dist)
                     vn = VernacularName(id=sctr, species=sp,
-                                        name=u'name%s' % sctr)
+                                        name='name%s' % sctr)
                     self.session.add_all([sp, geo, dist, vn])
                     for a in range(2):
                         actr+=1
-                        acc = Accession(id=actr, species=sp, code=u'%s' % actr)
+                        acc = Accession(id=actr, species=sp, code='%s' % actr)
                         self.session.add(acc)
                         for p in range(2):
                             pctr+=1
-                            loc = Location(id=pctr, code=u'%s' % pctr,
-                                           name=u'site%s' % pctr)
+                            loc = Location(id=pctr, code='%s' % pctr,
+                                           name='site%s' % pctr)
                             plant = Plant(id=pctr, accession=acc, location=loc,
-                                          code=u'%s' % pctr, quantity=1)
+                                          code='%s' % pctr, quantity=1)
                             #debug('fctr: %s, gctr: %s, actr: %s, pctr: %s' \
                             #      % (fctr, gctr, actr, pctr))
                             self.session.add_all([loc, plant])
@@ -90,109 +90,109 @@
         for tn in MakoFormatterPlugin.templates:
             filename = os.path.join(td, tn)
             report = MakoFormatterPlugin.format(plants, template=filename)
-            self.assertTrue(isinstance(report, basestring))
+            self.assertTrue(isinstance(report, str))
 
 
 class SvgProductionTest(BaubleTestCase):
     def test_add_text_a(self):
         g, x, y = add_text(0, 0, 'a', 2)
-        self.assertEquals(y, 0)
-        self.assertEquals(x, 31)
-        self.assertEquals(g, '<g transform="translate(0.0, 0.0)scale(2)">\n'
+        self.assertEqual(y, 0)
+        self.assertEqual(x, 31)
+        self.assertEqual(g, '<g transform="translate(0.0, 0.0)scale(2)">\n'
                           '<use transform="translate(0,0)" xlink:href="#s1-u0061"/>\n'
                           '</g>')
 
     def test_add_text_tildes(self):
-        g, x, y = add_text(0, 0, u'áà', 2)
-        self.assertEquals(y, 0)
-        self.assertEquals(x, 62)
-        self.assertEquals(g, '<g transform="translate(0.0, 0.0)scale(2)">\n'
+        g, x, y = add_text(0, 0, 'áà', 2)
+        self.assertEqual(y, 0)
+        self.assertEqual(x, 62)
+        self.assertEqual(g, '<g transform="translate(0.0, 0.0)scale(2)">\n'
                           '<use transform="translate(0,0)" xlink:href="#s1-u00e1"/>\n'
                           '<use transform="translate(15.5,0)" xlink:href="#s1-u00e0"/>\n'
                           '</g>')
 
     def test_add_text_align_right(self):
-        g, x, y = add_text(0, 0, u'áà', 2, align=1)
-        self.assertEquals(y, 0)
-        self.assertEquals(x, 0)
-        self.assertEquals(g, '<g transform="translate(-62.0, 0.0)scale(2)">\n'
+        g, x, y = add_text(0, 0, 'áà', 2, align=1)
+        self.assertEqual(y, 0)
+        self.assertEqual(x, 0)
+        self.assertEqual(g, '<g transform="translate(-62.0, 0.0)scale(2)">\n'
                           '<use transform="translate(0,0)" xlink:href="#s1-u00e1"/>\n'
                           '<use transform="translate(15.5,0)" xlink:href="#s1-u00e0"/>\n'
                           '</g>')
 
     def test_add_text_align_right(self):
-        g, x, y = add_text(0, 0, u'áà', 2, align=0.5)
-        self.assertEquals(y, 0)
-        self.assertEquals(x, 31.0)
-        self.assertEquals(g, '<g transform="translate(-31.0, 0.0)scale(2)">\n'
+        g, x, y = add_text(0, 0, 'áà', 2, align=0.5)
+        self.assertEqual(y, 0)
+        self.assertEqual(x, 31.0)
+        self.assertEqual(g, '<g transform="translate(-31.0, 0.0)scale(2)">\n'
                           '<use transform="translate(0,0)" xlink:href="#s1-u00e1"/>\n'
                           '<use transform="translate(15.5,0)" xlink:href="#s1-u00e0"/>\n'
                           '</g>')
 
     def test_add_text_a_rotated_endpoint(self):
         g, x, y = add_text(0, 0, 'a', 2, align=0, rotate=0)
-        self.assertAlmostEquals(y, 0)
-        self.assertAlmostEquals(x, 31)
+        self.assertAlmostEqual(y, 0)
+        self.assertAlmostEqual(x, 31)
         g, x, y = add_text(0, 0, 'a', 2, align=0, rotate=90)
-        self.assertAlmostEquals(y, 31)
-        self.assertAlmostEquals(x, 0)
+        self.assertAlmostEqual(y, 31)
+        self.assertAlmostEqual(x, 0)
         g, x, y = add_text(0, 0, 'a', 2, align=0, rotate=-90)
-        self.assertAlmostEquals(y, -31)
-        self.assertAlmostEquals(x, 0)
+        self.assertAlmostEqual(y, -31)
+        self.assertAlmostEqual(x, 0)
         g, x, y = add_text(0, 0, 'a', 2, align=0, rotate=180)
-        self.assertAlmostEquals(y, 0)
-        self.assertAlmostEquals(x, -31)
+        self.assertAlmostEqual(y, 0)
+        self.assertAlmostEqual(x, -31)
 
     def test_add_text_a_rotated_aligned_endpoint(self):
         g, x, y = add_text(0, 0, 'a', 2, align=0.5, rotate=0)
-        self.assertAlmostEquals(y, 0)
-        self.assertAlmostEquals(x, 15.5)
+        self.assertAlmostEqual(y, 0)
+        self.assertAlmostEqual(x, 15.5)
         g, x, y = add_text(0, 0, 'a', 2, align=0.5, rotate=90)
-        self.assertAlmostEquals(y, 15.5)
-        self.assertAlmostEquals(x, 0)
+        self.assertAlmostEqual(y, 15.5)
+        self.assertAlmostEqual(x, 0)
         g, x, y = add_text(0, 0, 'a', 2, align=0.5, rotate=-90)
-        self.assertAlmostEquals(y, -15.5)
-        self.assertAlmostEquals(x, 0)
+        self.assertAlmostEqual(y, -15.5)
+        self.assertAlmostEqual(x, 0)
         g, x, y = add_text(0, 0, 'a', 2, align=0.5, rotate=180)
-        self.assertAlmostEquals(y, 0)
-        self.assertAlmostEquals(x, -15.5)
+        self.assertAlmostEqual(y, 0)
+        self.assertAlmostEqual(x, -15.5)
 
     def test_add_text_a_rotated_glyph(self):
         g, x, y = add_text(0, 0, 'a', 2, align=0, rotate=0)
-        self.assertEquals(g, '<g transform="translate(0.0, 0.0)scale(2)">\n'
+        self.assertEqual(g, '<g transform="translate(0.0, 0.0)scale(2)">\n'
                           '<use transform="translate(0,0)" xlink:href="#s1-u0061"/>\n'
                           '</g>')
         g, x, y = add_text(0, 0, 'a', 2, align=0, rotate=90)
-        self.assertEquals(g, '<g transform="translate(0.0, 0.0)scale(2)rotate(90)">\n'
+        self.assertEqual(g, '<g transform="translate(0.0, 0.0)scale(2)rotate(90)">\n'
                           '<use transform="translate(0,0)" xlink:href="#s1-u0061"/>\n'
                           '</g>')
         g, x, y = add_text(0, 0, 'a', 2, align=0, rotate=-90)
-        self.assertEquals(g, '<g transform="translate(0.0, 0.0)scale(2)rotate(-90)">\n'
+        self.assertEqual(g, '<g transform="translate(0.0, 0.0)scale(2)rotate(-90)">\n'
                           '<use transform="translate(0,0)" xlink:href="#s1-u0061"/>\n'
                           '</g>')
         g, x, y = add_text(0, 0, 'a', 2, align=0, rotate=180)
-        self.assertEquals(g, '<g transform="translate(0.0, 0.0)scale(2)rotate(180)">\n'
+        self.assertEqual(g, '<g transform="translate(0.0, 0.0)scale(2)rotate(180)">\n'
                           '<use transform="translate(0,0)" xlink:href="#s1-u0061"/>\n'
                           '</g>')
 
     def test_add_text_a_rotated_aligned_glyph(self):
         g, x, y = add_text(0, 0, 'a', 2, align=0.5, rotate=0)
-        self.assertEquals(g, '<g transform="translate(-15.5, 0.0)scale(2)">\n'
+        self.assertEqual(g, '<g transform="translate(-15.5, 0.0)scale(2)">\n'
                           '<use transform="translate(0,0)" xlink:href="#s1-u0061"/>\n'
                           '</g>')
         g, x, y = add_text(0, 0, 'a', 2, align=0.5, rotate=90)
         g = g.replace('-0.0', '0.0')  # ignore sign on zero
-        self.assertEquals(g, '<g transform="translate(0.0, -15.5)scale(2)rotate(90)">\n'
+        self.assertEqual(g, '<g transform="translate(0.0, -15.5)scale(2)rotate(90)">\n'
                           '<use transform="translate(0,0)" xlink:href="#s1-u0061"/>\n'
                           '</g>')
         g, x, y = add_text(0, 0, 'a', 2, align=0.5, rotate=-90)
         g = g.replace('-0.0', '0.0')  # ignore sign on zero
-        self.assertEquals(g, '<g transform="translate(0.0, 15.5)scale(2)rotate(-90)">\n'
+        self.assertEqual(g, '<g transform="translate(0.0, 15.5)scale(2)rotate(-90)">\n'
                           '<use transform="translate(0,0)" xlink:href="#s1-u0061"/>\n'
                           '</g>')
         g, x, y = add_text(0, 0, 'a', 2, align=0.5, rotate=180)
         g = g.replace('-0.0', '0.0')  # ignore sign on zero
-        self.assertEquals(g, '<g transform="translate(15.5, 0.0)scale(2)rotate(180)">\n'
+        self.assertEqual(g, '<g transform="translate(15.5, 0.0)scale(2)rotate(180)">\n'
                           '<use transform="translate(0,0)" xlink:href="#s1-u0061"/>\n'
                           '</g>')
 
@@ -202,7 +202,7 @@
         # 0123456789abcde
         # | |   ||| ||| |
         g = Code39.path('0', 10)
-        self.assertEquals(g,
+        self.assertEqual(g,
                           'M 0,0 0,10 '
                           'M 2,10 2,0 '
                           'M 6,0 6,10 '
@@ -217,7 +217,7 @@
         # 0123456789abcde
         # |||   | | ||| |
         g = Code39.path('.', 10)
-        self.assertEquals(g,
+        self.assertEqual(g,
                           'M 0,0 0,10 '
                           'M 1,10 1,0 '
                           'M 2,0 2,10 '
@@ -232,7 +232,7 @@
         # 0123456789abcde
         # |||   | | ||| |
         g = Code39.path('.', 5)
-        self.assertEquals(g,
+        self.assertEqual(g,
                           'M 0,0 0,5 '
                           'M 1,5 1,0 '
                           'M 2,0 2,5 '
@@ -245,41 +245,41 @@
 
     def test_code39_letter_dot_5(self):
         g = Code39.letter('.', 5)
-        self.assertEquals(g,'<path d="M 0,0 0,5 M 1,5 1,0 M 2,0 2,5 M 6,5 6,0 M 8,0 8,5 M 10,5 10,0 M 11,0 11,5 M 12,5 12,0 M 14,0 14,5" style="stroke:#0000ff;stroke-width:1"/>')
+        self.assertEqual(g,'<path d="M 0,0 0,5 M 1,5 1,0 M 2,0 2,5 M 6,5 6,0 M 8,0 8,5 M 10,5 10,0 M 11,0 11,5 M 12,5 12,0 M 14,0 14,5" style="stroke:#0000ff;stroke-width:1"/>')
 
     def test_code39_translated_letter_dot_5(self):
         g = Code39.letter('.', 5, (5,8))
-        self.assertEquals(g,'<path transform="translate(5,8)" d="M 0,0 0,5 M 1,5 1,0 M 2,0 2,5 M 6,5 6,0 M 8,0 8,5 M 10,5 10,0 M 11,0 11,5 M 12,5 12,0 M 14,0 14,5" style="stroke:#0000ff;stroke-width:1"/>')
+        self.assertEqual(g,'<path transform="translate(5,8)" d="M 0,0 0,5 M 1,5 1,0 M 2,0 2,5 M 6,5 6,0 M 8,0 8,5 M 10,5 10,0 M 11,0 11,5 M 12,5 12,0 M 14,0 14,5" style="stroke:#0000ff;stroke-width:1"/>')
 
     def test_code39_text(self):
-        g, x, y = add_code39(0, 0, u'010810', unit=1, height=7)
-        self.assertEquals(y, 0)
-        self.assertEquals(x, 127)
-        self.assertEquals(g, '<g transform="translate(0,0)scale(1,1)translate(0,0)"><path transform="translate(0,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(16,0)" d="M 0,0 0,7 M 2,7 2,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(32,0)" d="M 0,0 0,7 M 1,7 1,0 M 2,0 2,7 M 4,7 4,0 M 8,0 8,7 M 10,7 10,0 M 12,0 12,7 M 13,7 13,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(48,0)" d="M 0,0 0,7 M 2,7 2,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(64,0)" d="M 0,0 0,7 M 1,7 1,0 M 2,0 2,7 M 4,7 4,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(80,0)" d="M 0,0 0,7 M 1,7 1,0 M 2,0 2,7 M 4,7 4,0 M 8,0 8,7 M 10,7 10,0 M 12,0 12,7 M 13,7 13,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(96,0)" d="M 0,0 0,7 M 2,7 2,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(112,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/></g>')
+        g, x, y = add_code39(0, 0, '010810', unit=1, height=7)
+        self.assertEqual(y, 0)
+        self.assertEqual(x, 127)
+        self.assertEqual(g, '<g transform="translate(0,0)scale(1,1)translate(0,0)"><path transform="translate(0,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(16,0)" d="M 0,0 0,7 M 2,7 2,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(32,0)" d="M 0,0 0,7 M 1,7 1,0 M 2,0 2,7 M 4,7 4,0 M 8,0 8,7 M 10,7 10,0 M 12,0 12,7 M 13,7 13,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(48,0)" d="M 0,0 0,7 M 2,7 2,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(64,0)" d="M 0,0 0,7 M 1,7 1,0 M 2,0 2,7 M 4,7 4,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(80,0)" d="M 0,0 0,7 M 1,7 1,0 M 2,0 2,7 M 4,7 4,0 M 8,0 8,7 M 10,7 10,0 M 12,0 12,7 M 13,7 13,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(96,0)" d="M 0,0 0,7 M 2,7 2,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(112,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/></g>')
 
     def test_code39_text_centre(self):
-        g, x, y = add_code39(0, 0, u'0', unit=1, height=7, align=0.5)
-        self.assertEquals(y, 0)
-        self.assertEquals(g, '<g transform="translate(0,0)scale(1,1)translate(-23.5,0)"><path transform="translate(0,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(16,0)" d="M 0,0 0,7 M 2,7 2,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(32,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/></g>')
-        self.assertEquals(x, 23.5)
+        g, x, y = add_code39(0, 0, '0', unit=1, height=7, align=0.5)
+        self.assertEqual(y, 0)
+        self.assertEqual(g, '<g transform="translate(0,0)scale(1,1)translate(-23.5,0)"><path transform="translate(0,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(16,0)" d="M 0,0 0,7 M 2,7 2,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(32,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/></g>')
+        self.assertEqual(x, 23.5)
 
     def test_code39_text_left(self):
-        g, x, y = add_code39(0, 0, u'0', unit=1, height=7, align=0)
-        self.assertEquals(y, 0)
-        self.assertEquals(g, '<g transform="translate(0,0)scale(1,1)translate(0,0)"><path transform="translate(0,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(16,0)" d="M 0,0 0,7 M 2,7 2,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(32,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/></g>')
-        self.assertEquals(x, 47)
+        g, x, y = add_code39(0, 0, '0', unit=1, height=7, align=0)
+        self.assertEqual(y, 0)
+        self.assertEqual(g, '<g transform="translate(0,0)scale(1,1)translate(0,0)"><path transform="translate(0,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(16,0)" d="M 0,0 0,7 M 2,7 2,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(32,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/></g>')
+        self.assertEqual(x, 47)
 
     def test_code39_text_right(self):
-        g, x, y = add_code39(0, 0, u'0', unit=1, height=7, align=1)
-        self.assertEquals(y, 0)
-        self.assertEquals(g, '<g transform="translate(0,0)scale(1,1)translate(-47,0)"><path transform="translate(0,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(16,0)" d="M 0,0 0,7 M 2,7 2,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(32,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/></g>')
-        self.assertEquals(x, 0)
+        g, x, y = add_code39(0, 0, '0', unit=1, height=7, align=1)
+        self.assertEqual(y, 0)
+        self.assertEqual(g, '<g transform="translate(0,0)scale(1,1)translate(-47,0)"><path transform="translate(0,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(16,0)" d="M 0,0 0,7 M 2,7 2,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(32,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/></g>')
+        self.assertEqual(x, 0)
 
     def test_code39_shortblack(self):
-        g, x, y = add_code39(0, 0, u'M+/-%', unit=1, height=7, align=0)
-        self.assertEquals(y, 0)
-        self.assertEquals(g, '<g transform="translate(0,0)scale(1,1)translate(0,0)"><path transform="translate(0,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(16,0)" d="M 0,0 0,7 M 1,7 1,0 M 2,0 2,7 M 4,7 4,0 M 5,0 5,7 M 6,7 6,0 M 8,0 8,7 M 10,7 10,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(32,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 10,7 10,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(48,0)" d="M 0,0 0,7 M 4,7 4,0 M 8,0 8,7 M 10,7 10,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(64,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 8,7 8,0 M 9,0 9,7 M 10,7 10,0 M 12,0 12,7 M 13,7 13,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(80,0)" d="M 0,0 0,7 M 2,7 2,0 M 6,0 6,7 M 10,7 10,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(96,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/></g>')
-        self.assertEquals(x, 111)
+        g, x, y = add_code39(0, 0, 'M+/-%', unit=1, height=7, align=0)
+        self.assertEqual(y, 0)
+        self.assertEqual(g, '<g transform="translate(0,0)scale(1,1)translate(0,0)"><path transform="translate(0,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(16,0)" d="M 0,0 0,7 M 1,7 1,0 M 2,0 2,7 M 4,7 4,0 M 5,0 5,7 M 6,7 6,0 M 8,0 8,7 M 10,7 10,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(32,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 10,7 10,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(48,0)" d="M 0,0 0,7 M 4,7 4,0 M 8,0 8,7 M 10,7 10,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(64,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 8,7 8,0 M 9,0 9,7 M 10,7 10,0 M 12,0 12,7 M 13,7 13,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(80,0)" d="M 0,0 0,7 M 2,7 2,0 M 6,0 6,7 M 10,7 10,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/><path transform="translate(96,0)" d="M 0,0 0,7 M 4,7 4,0 M 6,0 6,7 M 7,7 7,0 M 8,0 8,7 M 10,7 10,0 M 11,0 11,7 M 12,7 12,0 M 14,0 14,7" style="stroke:#0000ff;stroke-width:1"/></g>')
+        self.assertEqual(x, 111)
 
 
 class QRCodeTests(BaubleTestCase):
@@ -287,32 +287,32 @@
     def test_can_get_qr_as_string(self):
         g = add_qr(0, 0, 'test')
         parts = g.split('\n')
-        self.assertEquals(len(parts), 1)
-        self.assertEquals(parts[0], self.path)
+        self.assertEqual(len(parts), 1)
+        self.assertEqual(parts[0], self.path)
 
     def test_can_get_qr_as_string_translated(self):
         g = add_qr(30, 10, 'test')
         parts = g.split('\n')
-        self.assertEquals(len(parts), 3)
-        self.assertEquals(parts[0], '<g transform="translate(30,10)">')
-        self.assertEquals(parts[1], self.path)
-        self.assertEquals(parts[2], '</g>')
+        self.assertEqual(len(parts), 3)
+        self.assertEqual(parts[0], '<g transform="translate(30,10)">')
+        self.assertEqual(parts[1], self.path)
+        self.assertEqual(parts[2], '</g>')
 
     def test_can_get_qr_as_string_translated_framed(self):
         g = add_qr(30, 10, 'http://ghini.readthedocs.io/en/ghini-1.0-dev/', side=30)
         parts = g.split('\n')
-        self.assertEquals(len(parts), 3)
-        self.assertEquals(parts[0], '<g transform="translate(30,10)scale(0.731707317073)">')
-        self.assertEquals(parts[2], '</g>')
+        self.assertEqual(len(parts), 3)
+        self.assertEqual(parts[0], '<g transform="translate(30,10)scale(0.731707317073)">')
+        self.assertEqual(parts[2], '</g>')
 
         g = add_qr(30, 10, '2014.0018.2', side=30)
         parts = g.split('\n')
-        self.assertEquals(len(parts), 3)
-        self.assertEquals(parts[0], '<g transform="translate(30,10)scale(1.2)">')
-        self.assertEquals(parts[2], '</g>')
+        self.assertEqual(len(parts), 3)
+        self.assertEqual(parts[0], '<g transform="translate(30,10)scale(1.2)">')
+        self.assertEqual(parts[2], '</g>')
 
         g = add_qr(30, 10, '2014.0018', side=30)
         parts = g.split('\n')
-        self.assertEquals(len(parts), 3)
-        self.assertEquals(parts[0], '<g transform="translate(30,10)scale(1.42857142857)">')
-        self.assertEquals(parts[2], '</g>')
+        self.assertEqual(len(parts), 3)
+        self.assertEqual(parts[0], '<g transform="translate(30,10)scale(1.42857142857)">')
+        self.assertEqual(parts[2], '</g>')
--- ./bauble/plugins/tag/__init__.py	(original)
+++ ./bauble/plugins/tag/__init__.py	(refactored)
@@ -70,7 +70,7 @@
         self.show_active_tag()
 
     def show_active_tag(self):
-        for c in self.item_list.values():
+        for c in list(self.item_list.values()):
             c.set_image(None)
         widget = self.item_list.get(self.active_tag_name)
         if widget:
@@ -233,7 +233,7 @@
         obj = session.query(Tag).get(tag.id)
         session.delete(obj)
         session.commit()
-    except Exception, e:
+    except Exception as e:
         msg = _('Could not delete.\n\n%s') % utils.xml_safe(e)
         utils.message_details_dialog(msg, traceback.format_exc(),
                                      type=Gtk.MessageType.ERROR)
@@ -344,7 +344,7 @@
         session = db.Session()
         try:
             query = session.query(Tag)
-            tag = query.filter_by(tag=unicode(tag_name)).one()
+            tag = query.filter_by(tag=str(tag_name)).one()
             session.delete(tag)
             session.commit()
             model.remove(row_iter)
@@ -352,7 +352,7 @@
             view = bauble.gui.get_view()
             if hasattr(view, 'update'):
                 view.update()
-        except Exception, e:
+        except Exception as e:
             utils.message_details_dialog(utils.xml_safe(str(e)),
                                          traceback.format_exc(),
                                          Gtk.MessageType.ERROR)
@@ -367,7 +367,7 @@
         # we remove the old columns and create new ones each time the
         # tag editor is started since we have to connect and
         # disconnect the toggled signal each time
-        map(self.tag_tree.remove_column, self.tag_tree.get_columns())
+        list(map(self.tag_tree.remove_column, self.tag_tree.get_columns()))
         columns = self.build_tag_tree_columns()
         for col in columns:
             self.tag_tree.append_column(col)
@@ -565,15 +565,15 @@
                                 module_name.split('.')[1:])
             cls = getattr(module, cls_name)
             kids.append((cls, obj.obj_id))
-        except KeyError, e:
+        except KeyError as e:
             logger.warning('KeyError -- tag.get_tagged_objects(%s): %s'
                            % (tag, e))
             continue
-        except DBAPIError, e:
+        except DBAPIError as e:
             logger.warning('DBAPIError -- tag.get_tagged_objects(%s): %s'
                            % (tag, e))
             continue
-        except AttributeError, e:
+        except AttributeError as e:
             logger.warning('AttributeError -- tag.get_tagged_objects(%s): %s'
                            % (tag, e))
             logger.warning('Could not get the object for %s.%s(%s)'
@@ -589,7 +589,7 @@
     session = db.Session()
     try:
         tag = session.query(Tag).filter_by(tag=name).one()
-    except InvalidRequestError, e:
+    except InvalidRequestError as e:
         logger.debug("%s - %s" % (type(e), e))
         tag = Tag(tag=name)
         session.add(tag)
@@ -614,7 +614,7 @@
     session = object_session(objs[0])
     try:
         tag = session.query(Tag).filter_by(tag=name).one()
-    except Exception, e:
+    except Exception as e:
         logger.info("Can't remove non existing tag from non-empty list of objects"
                     "%s - %s" % (type(e), e))
         return
@@ -629,7 +629,7 @@
 
 
 # create the classname stored in the tagged_obj table
-_classname = lambda x: unicode('%s.%s', 'utf-8') % (
+_classname = lambda x: str('%s.%s', 'utf-8') % (
     type(x).__module__, type(x).__name__)
 
 
@@ -650,7 +650,7 @@
     session = object_session(objects[0])
     try:
         tag = session.query(Tag).filter_by(tag=name).one()
-    except InvalidRequestError, e:
+    except InvalidRequestError as e:
         logger.debug("%s - %s" % (type(e), e))
         tag = Tag(tag=name)
         session.add(tag)
--- ./bauble/plugins/tag/test.py	(original)
+++ ./bauble/plugins/tag/test.py	(refactored)
@@ -31,6 +31,7 @@
 import bauble.utils as utils
 from functools import partial
 from gi.repository import Gtk
+import importlib
 
 
 def test_duplicate_ids():
@@ -49,35 +50,35 @@
     def test_no_tags(self):
         m = tag_plugin.tags_menu_manager.build_menu()
         self.assertTrue(isinstance(m, Gtk.Menu))
-        self.assertEquals(len(m.get_children()), 1)
-        self.assertEquals(m.get_children()[0].get_label(), _('Tag Selection'))
+        self.assertEqual(len(m.get_children()), 1)
+        self.assertEqual(m.get_children()[0].get_label(), _('Tag Selection'))
 
     def test_one_tag(self):
-        tagname = u'some_tag'
-        t = Tag(tag=tagname, description=u'description')
+        tagname = 'some_tag'
+        t = Tag(tag=tagname, description='description')
         self.session.add(t)
         self.session.flush()
         m = tag_plugin.tags_menu_manager.build_menu()
         self.assertTrue(isinstance(m, Gtk.Menu))
-        self.assertEquals(len(m.get_children()), 6)
+        self.assertEqual(len(m.get_children()), 6)
         self.assertTrue(m.get_children()[1], Gtk.SeparatorMenuItem)
-        self.assertEquals(m.get_children()[2].get_label(), tagname)
+        self.assertEqual(m.get_children()[2].get_label(), tagname)
         self.assertTrue(m.get_children()[3], Gtk.SeparatorMenuItem)
 
     def test_more_tags(self):
-        tagname = u'%s-some_tag'
-        t1 = Tag(tag=tagname % 1, description=u'description')
-        t2 = Tag(tag=tagname % 3, description=u'description')
-        t3 = Tag(tag=tagname % 2, description=u'description')
-        t4 = Tag(tag=tagname % 0, description=u'description')
-        t5 = Tag(tag=tagname % 4, description=u'description')
+        tagname = '%s-some_tag'
+        t1 = Tag(tag=tagname % 1, description='description')
+        t2 = Tag(tag=tagname % 3, description='description')
+        t3 = Tag(tag=tagname % 2, description='description')
+        t4 = Tag(tag=tagname % 0, description='description')
+        t5 = Tag(tag=tagname % 4, description='description')
         self.session.add_all([t1, t2, t3, t4, t5])
         self.session.flush()
         m = tag_plugin.tags_menu_manager.build_menu()
         self.assertTrue(isinstance(m, Gtk.Menu))
-        self.assertEquals(len(m.get_children()), 10)
+        self.assertEqual(len(m.get_children()), 10)
         for i in range(5):
-            self.assertEquals(m.get_children()[i + 2].get_label(), tagname % i)
+            self.assertEqual(m.get_children()[i + 2].get_label(), tagname % i)
 
 
 class TagTests(BaubleTestCase):
@@ -89,7 +90,7 @@
 
     def setUp(self):
         super(TagTests, self).setUp()
-        self.family = Family(family=u'family')
+        self.family = Family(family='family')
         self.session.add(self.family)
         self.session.commit()
 
@@ -100,35 +101,35 @@
         """
         Test Tag.__str__ method
         """
-        name = u'test'
+        name = 'test'
         tag = Tag(tag=name)
-        self.assertEquals(str(tag), name)
+        self.assertEqual(str(tag), name)
 
     def test_create_named_empty_tag(self):
-        name = u'name123'
+        name = 'name123'
         r = self.session.query(Tag).filter_by(tag=name).all()
-        self.assertEquals(len(r), 0)
+        self.assertEqual(len(r), 0)
         tag_plugin.create_named_empty_tag(name)
         r = self.session.query(Tag).filter_by(tag=name).all()
-        self.assertEquals(len(r), 1)
+        self.assertEqual(len(r), 1)
         t0 = r[0]
-        self.assertEquals(t0.tag, name)
+        self.assertEqual(t0.tag, name)
         tag_plugin.create_named_empty_tag(name)
         t1 = self.session.query(Tag).filter_by(tag=name).one()
-        self.assertEquals(t0, t1)
+        self.assertEqual(t0, t1)
 
     def test_tag_nothing(self):
-        t = Tag(tag=u'some_tag', description=u'description')
+        t = Tag(tag='some_tag', description='description')
         self.session.add(t)
         self.session.flush()
         t.tag_objects([])
-        self.assertEquals(t.objects, [])
-        self.assertEquals(t.search_view_markup_pair(),
-                          (u'some_tag - <span weight="light">tagging nothing</span>',
+        self.assertEqual(t.objects, [])
+        self.assertEqual(t.search_view_markup_pair(),
+                          ('some_tag - <span weight="light">tagging nothing</span>',
                            '(Tag) - <span weight="light">description</span>'))
 
     def test_tag_objects(self):
-        family2 = Family(family=u'family2')
+        family2 = Family(family='family2')
         self.session.add(family2)
         self.session.commit()
         family1_id = self.family.id
@@ -137,15 +138,15 @@
 
         # we do not offer gettin object by string
         # get object by tag
-        tag = self.session.query(Tag).filter_by(tag=u'test').one()
+        tag = self.session.query(Tag).filter_by(tag='test').one()
         tagged_objs = tag.objects
         sorted_pairs = sorted([(type(o), o.id) for o in tagged_objs])
-        self.assertEquals(sorted([(Family, family1_id),
+        self.assertEqual(sorted([(Family, family1_id),
                                   (Family, family2_id)]),
                           sorted_pairs)
 
         tag_plugin.tag_objects('test', [self.family, family2])
-        self.assertEquals(tag.objects, [self.family, family2])
+        self.assertEqual(tag.objects, [self.family, family2])
 
         #
         # first untag one, then both
@@ -153,9 +154,9 @@
         tag_plugin.untag_objects('test', [self.family])
 
         # get object by tag
-        tag = self.session.query(Tag).filter_by(tag=u'test').one()
+        tag = self.session.query(Tag).filter_by(tag='test').one()
         tagged_objs = tag.objects
-        self.assertEquals(tagged_objs, [family2])
+        self.assertEqual(tagged_objs, [family2])
 
         #
         # first untag one, then both
@@ -163,13 +164,13 @@
         tag_plugin.untag_objects('test', [self.family, family2])
 
         # get object by tag
-        tag = self.session.query(Tag).filter_by(tag=u'test').one()
+        tag = self.session.query(Tag).filter_by(tag='test').one()
         tagged_objs = tag.objects
-        self.assertEquals(tagged_objs, [])
+        self.assertEqual(tagged_objs, [])
 
     def test_is_tagging(self):
-        family2 = Family(family=u'family2')
-        t1 = Tag(tag=u'test1')
+        family2 = Family(family='family2')
+        t1 = Tag(tag='test1')
         self.session.add_all([family2, t1])
         self.session.flush()
         self.assertFalse(t1.is_tagging(family2))
@@ -180,28 +181,28 @@
         self.assertTrue(t1.is_tagging(self.family))
 
     def test_search_view_markup_pair(self):
-        family2 = Family(family=u'family2')
-        t1 = Tag(tag=u'test1')
-        t2 = Tag(tag=u'test2')
+        family2 = Family(family='family2')
+        t1 = Tag(tag='test1')
+        t2 = Tag(tag='test2')
         self.session.add_all([family2, t1, t2])
         self.session.flush()
         t1.tag_objects([self.family, family2])
         t2.tag_objects([self.family])
-        self.assertEquals(t1.search_view_markup_pair(),
+        self.assertEqual(t1.search_view_markup_pair(),
                           ('test1 - <span weight="light">tagging 2 objects of type Family</span>',
                            '(Tag) - <span weight="light"></span>'))
-        self.assertEquals(t2.search_view_markup_pair(),
+        self.assertEqual(t2.search_view_markup_pair(),
                           ('test2 - <span weight="light">tagging 1 objects of type Family</span>',
                            '(Tag) - <span weight="light"></span>'))
         t2.tag_objects([t1])
         self.session.flush()
-        self.assertEquals(t2.search_view_markup_pair(),
+        self.assertEqual(t2.search_view_markup_pair(),
                           ('test2 - <span weight="light">tagging 2 objects of 2 different types: Family, Tag</span>',
                            '(Tag) - <span weight="light"></span>'))
 
     def test_remove_callback_no_confirm(self):
         # T_0
-        f5 = Tag(tag=u'Arecaceae')
+        f5 = Tag(tag='Arecaceae')
         self.session.add(f5)
         self.session.flush()
         self.invoked = []
@@ -216,20 +217,20 @@
         self.session.flush()
 
         # effect
-        print self.invoked
+        print(self.invoked)
         self.assertFalse('message_details_dialog' in
                          [f for (f, m) in self.invoked])
-        self.assertTrue(('yes_no_dialog', u'Are you sure you want to '
+        self.assertTrue(('yes_no_dialog', 'Are you sure you want to '
                          'remove Tag: Arecaceae?')
                         in self.invoked)
-        self.assertEquals(result, None)
-        q = self.session.query(Tag).filter_by(tag=u"Arecaceae")
+        self.assertEqual(result, None)
+        q = self.session.query(Tag).filter_by(tag="Arecaceae")
         matching = q.all()
-        self.assertEquals(matching, [f5])
+        self.assertEqual(matching, [f5])
 
     def test_remove_callback_confirm(self):
         # T_0
-        f5 = Tag(tag=u'Arecaceae')
+        f5 = Tag(tag='Arecaceae')
         self.session.add(f5)
         self.session.flush()
         self.invoked = []
@@ -246,26 +247,26 @@
         self.session.flush()
 
         # effect
-        print self.invoked
+        print(self.invoked)
         self.assertTrue('_reset_tags_menu' in
                          [f for (f, m) in self.invoked])
-        self.assertTrue(('yes_no_dialog', u'Are you sure you want to '
+        self.assertTrue(('yes_no_dialog', 'Are you sure you want to '
                          'remove Tag: Arecaceae?')
                         in self.invoked)
-        self.assertEquals(result, True)
-        q = self.session.query(Tag).filter_by(tag=u"Arecaceae")
+        self.assertEqual(result, True)
+        q = self.session.query(Tag).filter_by(tag="Arecaceae")
         matching = q.all()
-        self.assertEquals(matching, [])
+        self.assertEqual(matching, [])
 
 
 class GetTagIdsTests(BaubleTestCase):
 
     def setUp(self):
         super(GetTagIdsTests, self).setUp()
-        self.fam1 = Family(family=u'Fabaceae')
-        self.fam2 = Family(family=u'Poaceae')
-        self.fam3 = Family(family=u'Solanaceae')
-        self.fam4 = Family(family=u'Caricaceae')
+        self.fam1 = Family(family='Fabaceae')
+        self.fam2 = Family(family='Poaceae')
+        self.fam3 = Family(family='Solanaceae')
+        self.fam4 = Family(family='Caricaceae')
         self.session.add_all([self.fam1, self.fam2, self.fam3, self.fam4])
         self.session.commit()
         tag_plugin.tag_objects('test1', [self.fam1, self.fam2])
@@ -281,36 +282,36 @@
 
     def test_get_tag_ids1(self):
         s_all, s_some, s_none = tag_plugin.get_tag_ids([self.fam1, self.fam2])
-        self.assertEquals(s_all, set([1]))
-        self.assertEquals(s_some, set([2, 3]))
+        self.assertEqual(s_all, set([1]))
+        self.assertEqual(s_some, set([2, 3]))
 
     def test_get_tag_ids2(self):
         s_all, s_some, s_none = tag_plugin.get_tag_ids([self.fam1])
-        self.assertEquals(s_all, set([1, 2]))
-        self.assertEquals(s_some, set([]))
+        self.assertEqual(s_all, set([1, 2]))
+        self.assertEqual(s_some, set([]))
 
     def test_get_tag_ids3(self):
         s_all, s_some, s_none = tag_plugin.get_tag_ids([self.fam2])
         test_id = set([1, 3])
-        self.assertEquals(s_all, test_id)
-        self.assertEquals(s_some, set([]))
+        self.assertEqual(s_all, test_id)
+        self.assertEqual(s_some, set([]))
 
     def test_get_tag_ids4(self):
         s_all, s_some, s_none = tag_plugin.get_tag_ids([self.fam3])
         test_id = set([3])
-        self.assertEquals(s_all, test_id)
-        self.assertEquals(s_some, set([]))
+        self.assertEqual(s_all, test_id)
+        self.assertEqual(s_some, set([]))
 
     def test_get_tag_ids5(self):
         s_all, s_some, s_none = tag_plugin.get_tag_ids([self.fam1, self.fam3])
         test_id = set([])
-        self.assertEquals(s_all, test_id)
-        self.assertEquals(s_some, set([1, 2, 3]))
+        self.assertEqual(s_all, test_id)
+        self.assertEqual(s_some, set([1, 2, 3]))
 
     def test_get_tag_ids6(self):
         s_all, s_some, s_none = tag_plugin.get_tag_ids([self.fam1, self.fam4])
-        self.assertEquals(s_all, set([]))
-        self.assertEquals(s_some, set([1, 2]))
+        self.assertEqual(s_all, set([]))
+        self.assertEqual(s_some, set([1, 2]))
 
     def test_get_tag_ids7(self):
         self.session.query(Tag).delete()
@@ -320,8 +321,8 @@
         tag_plugin.tag_objects('test3', [self.fam2, self.fam4])
         self.session.commit()
         s_all, s_some, s_none = tag_plugin.get_tag_ids([self.fam1, self.fam2, self.fam3, self.fam4])
-        self.assertEquals(s_all, set([]))
-        self.assertEquals(s_some, set([1, 2, 3]))
+        self.assertEqual(s_all, set([]))
+        self.assertEqual(s_some, set([1, 2, 3]))
 
 
 import bauble.db as db
@@ -370,15 +371,15 @@
         model = Tag()
         view = MockTagView()
         presenter = TagEditorPresenter(model, view)
-        view.widget_set_value('tag_name_entry', u'1234')
+        view.widget_set_value('tag_name_entry', '1234')
         presenter.on_text_entry_changed('tag_name_entry')
-        self.assertEquals(presenter.model.tag, u'1234')
+        self.assertEqual(presenter.model.tag, '1234')
 
     def test_when_user_inserts_existing_name_warning_ok_deactivated(self):
         session = db.Session()
 
         # prepare data in database
-        obj = Tag(tag=u'1234')
+        obj = Tag(tag='1234')
         session.add(obj)
         session.commit()
         session.close()
@@ -390,8 +391,8 @@
         session.add(obj)  # is in session
         presenter = TagEditorPresenter(obj, view)
         self.assertTrue(not view.sensitive)  # not changed
-        presenter.on_unique_text_entry_changed('tag_name_entry', u'1234')
-        self.assertEquals(obj.tag, u'1234')
+        presenter.on_unique_text_entry_changed('tag_name_entry', '1234')
+        self.assertEqual(obj.tag, '1234')
         self.assertTrue(view.is_dirty())
         self.assertTrue(not view.sensitive)  # unacceptable change
         self.assertTrue(presenter.has_problems())
@@ -400,7 +401,7 @@
         model = Tag()
         view = MockTagView()
         presenter = TagEditorPresenter(model, view)
-        for widget, field in presenter.widget_to_field_map.items():
+        for widget, field in list(presenter.widget_to_field_map.items()):
             self.assertTrue(hasattr(model, field), field)
             presenter.view.widget_get_value(widget)
 
@@ -409,9 +410,9 @@
         view = MockTagView()
         presenter = TagEditorPresenter(model, view)
         self.assertTrue(not view.sensitive)  # not changed
-        view.widget_set_value('tag_name_entry', u'1234')
+        view.widget_set_value('tag_name_entry', '1234')
         presenter.on_text_entry_changed('tag_name_entry')
-        self.assertEquals(presenter.model.tag, u'1234')
+        self.assertEqual(presenter.model.tag, '1234')
         self.assertTrue(view.sensitive)  # changed
 
     def test_when_user_edits_description_description_is_memorized(self):
@@ -421,23 +422,23 @@
         session = db.Session()
 
         # prepare data in database
-        obj = Tag(tag=u'1234')
+        obj = Tag(tag='1234')
         session.add(obj)
         view = MockTagView()
         presenter = TagEditorPresenter(obj, view)
         self.assertFalse(view.widget_get_value("tag_name_entry"))
         presenter.refresh_view()
-        self.assertEquals(view.widget_get_value("tag_name_entry"), u'1234')
+        self.assertEqual(view.widget_get_value("tag_name_entry"), '1234')
 
     def test_if_asked_presenter_initializes_view(self):
         session = db.Session()
 
         # prepare data in database
-        obj = Tag(tag=u'1234')
+        obj = Tag(tag='1234')
         session.add(obj)
         view = MockTagView()
         TagEditorPresenter(obj, view, refresh_view=True)
-        self.assertEquals(view.widget_get_value("tag_name_entry"), u'1234')
+        self.assertEqual(view.widget_get_value("tag_name_entry"), '1234')
 
 
 class AttachedToTests(BaubleTestCase):
@@ -449,29 +450,29 @@
 
     def setUp(self):
         super(AttachedToTests, self).setUp()
-        obj1 = Tag(tag=u'medicinal')
-        obj2 = Tag(tag=u'maderable')
-        obj3 = Tag(tag=u'frutal')
-        fam = Family(family=u'Solanaceae')
+        obj1 = Tag(tag='medicinal')
+        obj2 = Tag(tag='maderable')
+        obj3 = Tag(tag='frutal')
+        fam = Family(family='Solanaceae')
         self.session.add_all([obj1, obj2, obj3, fam])
         self.session.commit()
 
     def test_attached_tags_empty(self):
         fam = self.session.query(Family).one()
-        self.assertEquals(Tag.attached_to(fam), [])
+        self.assertEqual(Tag.attached_to(fam), [])
 
     def test_attached_tags_singleton(self):
         fam = self.session.query(Family).one()
-        obj2 = self.session.query(Tag).filter(Tag.tag == u'maderable').one()
+        obj2 = self.session.query(Tag).filter(Tag.tag == 'maderable').one()
         tag_plugin.tag_objects(obj2, [fam])
-        self.assertEquals(Tag.attached_to(fam), [obj2])
+        self.assertEqual(Tag.attached_to(fam), [obj2])
 
     def test_attached_tags_many(self):
         fam = self.session.query(Family).one()
         tags = self.session.query(Tag).all()
         for t in tags:
             tag_plugin.tag_objects(t, [fam])
-        self.assertEquals(Tag.attached_to(fam), tags)
+        self.assertEqual(Tag.attached_to(fam), tags)
 
 
 class TagInfoBoxTest(BaubleTestCase):
@@ -479,31 +480,31 @@
         ib = TagInfoBox()
 
     def test_update_infobox_from_empty_tag(self):
-        t = Tag(tag=u'name', description=u'description')
+        t = Tag(tag='name', description='description')
         ib = TagInfoBox()
         ib.update(t)
-        self.assertEquals(ib.widgets.ib_description_label.get_text(), t.description)
-        self.assertEquals(ib.widgets.ib_name_label.get_text(), t.tag)
-        self.assertEquals(ib.general.table_cells, [])
+        self.assertEqual(ib.widgets.ib_description_label.get_text(), t.description)
+        self.assertEqual(ib.widgets.ib_name_label.get_text(), t.tag)
+        self.assertEqual(ib.general.table_cells, [])
 
     def test_update_infobox_from_tagging_tag(self):
-        t = Tag(tag=u'name', description=u'description')
-        x = Tag(tag=u'objectx', description=u'none')
-        y = Tag(tag=u'objecty', description=u'none')
-        z = Tag(tag=u'objectz', description=u'none')
+        t = Tag(tag='name', description='description')
+        x = Tag(tag='objectx', description='none')
+        y = Tag(tag='objecty', description='none')
+        z = Tag(tag='objectz', description='none')
         self.session.add_all([t, x, y, z])
         self.session.commit()
         t.tag_objects([x, y, z])
         ib = TagInfoBox()
-        self.assertEquals(ib.general.table_cells, [])
+        self.assertEqual(ib.general.table_cells, [])
         ib.update(t)
-        self.assertEquals(ib.widgets.ib_description_label.get_text(), t.description)
-        self.assertEquals(ib.widgets.ib_name_label.get_text(), t.tag)
-        self.assertEquals(len(ib.general.table_cells), 2)
-        self.assertEquals(ib.general.table_cells[0].get_text(), u'Tag')
-        self.assertEquals(type(ib.general.table_cells[1]), Gtk.EventBox)
+        self.assertEqual(ib.widgets.ib_description_label.get_text(), t.description)
+        self.assertEqual(ib.widgets.ib_name_label.get_text(), t.tag)
+        self.assertEqual(len(ib.general.table_cells), 2)
+        self.assertEqual(ib.general.table_cells[0].get_text(), 'Tag')
+        self.assertEqual(type(ib.general.table_cells[1]), Gtk.EventBox)
         label = ib.general.table_cells[1].get_children()[0]
-        self.assertEquals(label.get_text(), ' 3 ')
+        self.assertEqual(label.get_text(), ' 3 ')
 
 
 class TagCallbackTest(BaubleTestCase):
@@ -519,8 +520,8 @@
         import bauble
         bauble.gui = localgui = FakeGui()
         tag_plugin._on_add_tag_activated()
-        reload(bauble)
-        self.assertEquals(localgui.invoked[0],
+        importlib.reload(bauble)
+        self.assertEqual(localgui.invoked[0],
                           (('In order to tag an item you must first search for something and select one of the results.', ), {}))
 
     def test_on_add_tag_activated_search_view_empty_selection(self):
@@ -538,8 +539,8 @@
         bauble.gui = localgui = FakeGui()
         utils.message_dialog = bauble.gui.show_message_box
         tag_plugin._on_add_tag_activated()
-        reload(bauble)
-        reload(utils)
-        self.assertEquals(localgui.invoked[0],
+        importlib.reload(bauble)
+        importlib.reload(utils)
+        self.assertEqual(localgui.invoked[0],
                           (('Nothing selected', ), {}))
 
--- ./bauble/plugins/users/__init__.py	(original)
+++ ./bauble/plugins/users/__init__.py	(refactored)
@@ -133,7 +133,7 @@
         if password:
             stmt += ' PASSWORD \'%s\'' % password
         conn.execute(stmt)
-    except Exception, e:
+    except Exception as e:
         logger.error('users._create_role(): %s %s' % (type(e), utils.utf8(e)))
         trans.rollback()
         raise
@@ -162,7 +162,7 @@
             (bauble.db.engine.url.database, name)
         logger.debug(stmt)
         conn.execute(stmt)
-    except Exception, e:
+    except Exception as e:
         logger.error('users.create_user(): %s %s' % (type(e), utils.utf8(e)))
         trans.rollback()
         raise
@@ -261,7 +261,7 @@
             set_privilege(role, None)
         stmt = 'drop role %s;' % role
         conn.execute(stmt)
-    except Exception, e:
+    except Exception as e:
         logger.error("users.drop(): %s %s" % (type(e), utils.utf8(e)))
         trans.rollback()
         raise
@@ -426,7 +426,7 @@
         # grant privileges on the tables and sequences
         for table in bauble.db.metadata.sorted_tables:
             logger.debug('granting privileges on table %s' % table)
-            tbl_privs = filter(lambda x: x.lower() in _table_privs, privs)
+            tbl_privs = [x for x in privs if x.lower() in _table_privs]
             for priv in tbl_privs:
                 stmt = 'grant %s on %s to %s' % (priv, table.name, role)
                 if privilege == 'admin':
@@ -434,8 +434,7 @@
                 logger.debug(stmt)
                 conn.execute(stmt)
             for col in table.c:
-                seq_privs = filter(lambda x: x.lower() in __sequence_privs,
-                                   privs)
+                seq_privs = [x for x in privs if x.lower() in __sequence_privs]
                 for priv in seq_privs:
                     if has_implicit_sequence(col):
                         sequence_name = "%s_%s_seq" % (table.name, col.name)
@@ -446,7 +445,7 @@
                         if privilege == 'admin':
                             stmt += ' with grant option'
                         conn.execute(stmt)
-    except Exception, e:
+    except Exception as e:
         logger.error('users.set_privilege(): %s %s' % (type(e), utils.utf8(e)))
         trans.rollback()
         raise
@@ -475,7 +474,7 @@
     try:
         stmt = "alter role %s with encrypted password '%s'" % (user, password)
         conn.execute(stmt)
-    except Exception, e:
+    except Exception as e:
         logger.error('users.set_password(): %s %s' % (type(e), utils.utf8(e)))
         trans.rollback()
     else:
@@ -537,7 +536,7 @@
                 logger.debug('grant %s to %s' % (priv, role))
                 try:
                     set_privilege(role, priv)
-                except Exception, e:
+                except Exception as e:
                     utils.message_dialog(utils.utf8(e), Gtk.MessageType.ERROR,
                                          parent=self.get_window())
             return True
@@ -588,7 +587,7 @@
 
         try:
             drop(user, revoke=True)
-        except Exception, e:
+        except Exception as e:
             utils.message_dialog(utils.utf8(e), Gtk.MessageType.ERROR,
                                  parent=self.get_window())
         else:
@@ -655,7 +654,7 @@
             else:
                 try:
                     set_password(pwd1, user)
-                except Exception, e:
+                except Exception as e:
                     utils.message_dialog(utils.utf8(e), Gtk.MessageType.ERROR,
                                          parent=self.get_window())
 
@@ -684,7 +683,7 @@
             logger.debug('%s: %s' % (role, mode))
             if mode:
                 self.widgets[self.buttons[mode]].set_active(True)
-            not_modes = filter(lambda p: p != mode, self.buttons.keys())
+            not_modes = [p for p in list(self.buttons.keys()) if p != mode]
             for m in not_modes:
                 self.widgets[self.buttons[m]].props.active = False
 
@@ -720,7 +719,7 @@
         try:
             create_user(user)
             set_privilege(user, 'read')
-        except Exception, e:
+        except Exception as e:
             utils.message_dialog(utils.utf8(e), Gtk.MessageType.ERROR,
                                  parent=self.get_window())
             model.remove(model.get_iter(path))
--- ./bauble/plugins/users/test.py	(original)
+++ ./bauble/plugins/users/test.py	(refactored)
@@ -93,47 +93,47 @@
         # test adding a member to a group
         users.add_member(self.user, [self.group])
         members = users.get_members(self.group)
-        self.assert_(self.user in members, members)
+        self.assertTrue(self.user in members, members)
 
         # test removing a member from a group
         users.remove_member(self.user, [self.group])
         members = users.get_members(self.group)
-        self.assert_(self.user not in members, members)
+        self.assertTrue(self.user not in members, members)
 
     def test_has_privileges(self):
 
         # test setting admin privileges
         users.set_privilege(self.user, 'admin')
-        self.assert_(users.has_privileges(self.user, 'admin'),
+        self.assertTrue(users.has_privileges(self.user, 'admin'),
                      "%s doesn't have admin privileges" % self.user)
-        self.assert_(users.has_privileges(self.user, 'write'),
+        self.assertTrue(users.has_privileges(self.user, 'write'),
                      "%s doesnt' have write privileges" % self.user)
-        self.assert_(users.has_privileges(self.user, 'read'),
+        self.assertTrue(users.has_privileges(self.user, 'read'),
                      "%s doesn't have read privileges" % self.user)
 
         users.set_privilege(self.user, 'write')
-        self.assert_(not users.has_privileges(self.user, 'admin'),
+        self.assertTrue(not users.has_privileges(self.user, 'admin'),
                      "%s has admin privileges" % self.user)
-        self.assert_(users.has_privileges(self.user, 'write'),
+        self.assertTrue(users.has_privileges(self.user, 'write'),
                      "%s doesn't have write privileges" % self.user)
-        self.assert_(users.has_privileges(self.user, 'read'),
+        self.assertTrue(users.has_privileges(self.user, 'read'),
                      "%s doesn't have read privileges" % self.user)
 
         users.set_privilege(self.user, 'read')
-        self.assert_(not users.has_privileges(self.user, 'admin'),
+        self.assertTrue(not users.has_privileges(self.user, 'admin'),
                      "%s has admin privileges" % self.user)
-        self.assert_(not users.has_privileges(self.user, 'write'),
+        self.assertTrue(not users.has_privileges(self.user, 'write'),
                      "%s has write privileges" % self.user)
-        self.assert_(users.has_privileges(self.user, 'read'),
+        self.assertTrue(users.has_privileges(self.user, 'read'),
                      "%s doesn't have read privileges" % self.user)
 
         # revoke all
         users.set_privilege(self.user, None)
-        self.assert_(not users.has_privileges(self.user, 'admin'),
+        self.assertTrue(not users.has_privileges(self.user, 'admin'),
                      "%s has admin privileges" % self.user)
-        self.assert_(not users.has_privileges(self.user, 'write'),
+        self.assertTrue(not users.has_privileges(self.user, 'write'),
                      "%s has write privileges" % self.user)
-        self.assert_(not users.has_privileges(self.user, 'read'),
+        self.assertTrue(not users.has_privileges(self.user, 'read'),
                      "%s has read privileges" % self.user)
 
     def test_tool(self):
--- ./bauble/test/__init__.py	(original)
+++ ./bauble/test/__init__.py	(refactored)
@@ -91,8 +91,8 @@
         try:
             # we know we're connecting to an empty database
             db.open(uri, verify=False, show_error_dialogs=False)
-        except Exception, e:
-            print >>sys.stderr, e
+        except Exception as e:
+            print(e, file=sys.stderr)
         if not bauble.db.engine:
             raise BaubleError('not connected to a database')
         pluginmgr.load()
--- ./bauble/test/test_bauble.py	(original)
+++ ./bauble/test/test_bauble.py	(refactored)
@@ -51,7 +51,7 @@
             class Test(db.Base):
                 __tablename__ = 'test_enum_type'
                 id = Column(Integer, primary_key=True)
-                value = Column(Enum(values=['1', '2', '']), default=u'')
+                value = Column(Enum(values=['1', '2', '']), default='')
             self.__class__.Test = Test
             self.__class__.table = Test.__table__
             self.table.create(bind=db.engine)
@@ -68,13 +68,13 @@
         self.session.flush()
 
     def test_insert_by_value_ok(self):
-        t = self.Test(value=u'1')
+        t = self.Test(value='1')
         self.session.add(t)
         self.session.flush()
 
     def test_insert_by_value_wrong_value_seen_late(self):
         from sqlalchemy.exc import StatementError
-        t = self.Test(value=u'33')
+        t = self.Test(value='33')
         self.session.add(t)
         self.assertRaises(StatementError, self.session.flush)
 
@@ -83,7 +83,7 @@
             'test_table_' + name, (db.Base, ),
             {'__tablename__': 'test_enum_type_' + name,
              'id': Column(Integer, primary_key=True),
-             'value': Column(Enum(values=values, **kwargs), default=u''),
+             'value': Column(Enum(values=values, **kwargs), default=''),
              })
         self.table = self.Table.__table__
         self.table.create(bind=db.engine)
@@ -103,15 +103,15 @@
 
     def test_empty_to_none(self):
         self.function_creating_enum('seven', ['1', None], empty_to_none=True)
-        t = self.Table(value=u'1')
+        t = self.Table(value='1')
         self.session.add(t)
         t = self.Table(value='')
         self.session.add(t)
         self.session.flush()
         q = self.session.query(self.Table).filter_by(value='')
-        self.assertEquals(q.all(), [])
+        self.assertEqual(q.all(), [])
         q = self.session.query(self.Table).filter_by(value=None)
-        self.assertEquals(q.all(), [t])
+        self.assertEqual(q.all(), [t])
 
 
 class BaubleTests(BaubleTestCase):
@@ -125,21 +125,21 @@
         bauble.btypes.Date._yearfirst = False
         s = '12-30-2008'
         v = dt.process_bind_param(s, None)
-        self.assert_(v.month == 12 and v.day == 30 and v.year == 2008,
+        self.assertTrue(v.month == 12 and v.day == 30 and v.year == 2008,
                      '%s == %s' % (v, s))
 
         bauble.btypes.Date._dayfirst = True
         bauble.btypes.Date._yearfirst = False
         s = '30-12-2008'
         v = dt.process_bind_param(s, None)
-        self.assert_(v.month == 12 and v.day == 30 and v.year == 2008,
+        self.assertTrue(v.month == 12 and v.day == 30 and v.year == 2008,
                      '%s == %s' % (v, s))
 
         bauble.btypes.Date._dayfirst = False
         bauble.btypes.Date._yearfirst = True
         s = '2008-12-30'
         v = dt.process_bind_param(s, None)
-        self.assert_(v.month == 12 and v.day == 30 and v.year == 2008,
+        self.assertTrue(v.month == 12 and v.day == 30 and v.year == 2008,
                      '%s == %s' % (v, s))
 
         # TODO: python-dateutil 1.4.1 has a bug where dayfirst=True,
@@ -169,39 +169,39 @@
         s = '2008-12-1 11:50:01.001-05:00'
         result = '2008-12-01 11:50:01.001000-05:00'
         v = dt.process_bind_param(s, None)
-        self.assert_(str(v) == result, '%s == %s' % (v, result))
+        self.assertTrue(str(v) == result, '%s == %s' % (v, result))
 
         # test with positive timezone
         s = '2008-12-1 11:50:01.001+05:00'
         result = '2008-12-01 11:50:01.001000+05:00'
         v = dt.process_bind_param(s, None)
-        self.assert_(str(v) == result, '%s == %s' % (v, result))
+        self.assertTrue(str(v) == result, '%s == %s' % (v, result))
 
         # test with no timezone
         s = '2008-12-1 11:50:01.001'
         result = '2008-12-01 11:50:01.001000'
         v = dt.process_bind_param(s, None)
-        self.assert_(str(v) == result, '%s == %s' % (v, result))
+        self.assertTrue(str(v) == result, '%s == %s' % (v, result))
 
         # test with no milliseconds
         s = '2008-12-1 11:50:01'
         result = '2008-12-01 11:50:01'
         v = dt.process_bind_param(s, None)
-        self.assert_(v.isoformat(' ') == result)
+        self.assertTrue(v.isoformat(' ') == result)
 
     def test_base_table(self):
         """
         Test db.Base is setup correctly
         """
-        m = meta.BaubleMeta(name=u'name', value=u'value')
+        m = meta.BaubleMeta(name='name', value='value')
         self.session.add(m)
         self.session.commit()
-        m = self.session.query(meta.BaubleMeta).filter_by(name=u'name').first()
+        m = self.session.query(meta.BaubleMeta).filter_by(name='name').first()
 
         # test that _created and _last_updated were created correctly
-        self.assert_(hasattr(m, '_created')
+        self.assertTrue(hasattr(m, '_created')
                      and isinstance(m._created, datetime.datetime))
-        self.assert_(hasattr(m, '_last_updated')
+        self.assertTrue(hasattr(m, '_last_updated')
                      and isinstance(m._last_updated, datetime.datetime))
 
         # test that created does not change when the value is updated
@@ -211,13 +211,13 @@
         # sleep for one second before committing since the DateTime
         # column only has one second granularity
         time.sleep(1.1)
-        m.value = u'value2'
+        m.value = 'value2'
         self.session.commit()
         self.session.expire(m)
-        self.assert_(isinstance(m._created, datetime.datetime))
-        self.assert_(m._created == created)
-        self.assert_(isinstance(m._last_updated, datetime.datetime))
-        self.assert_(m._last_updated != last_updated)
+        self.assertTrue(isinstance(m._created, datetime.datetime))
+        self.assertTrue(m._created == created)
+        self.assertTrue(isinstance(m._last_updated, datetime.datetime))
+        self.assertTrue(m._last_updated != last_updated)
 
     def test_duplicate_ids(self):
         """
@@ -229,7 +229,7 @@
         files = glob.glob(os.path.join(head, '*.glade'))
         for f in files:
             ids = check_dupids(f)
-            self.assert_(ids == [], "%s has duplicate ids: %s" % (f, str(ids)))
+            self.assertTrue(ids == [], "%s has duplicate ids: %s" % (f, str(ids)))
 
 
 class HistoryTests(BaubleTestCase):
@@ -239,14 +239,14 @@
         Test the HistoryMapperExtension
         """
         from bauble.plugins.plants import Family
-        f = Family(family=u'Family')
+        f = Family(family='Family')
         self.session.add(f)
         self.session.commit()
         history = self.session.query(db.History).\
             order_by(db.History.timestamp.desc()).first()
         assert history.table_name == 'family' and history.operation == 'insert'
 
-        f.family = u'Family2'
+        f.family = 'Family2'
         self.session.commit()
         history = self.session.query(db.History).\
             order_by(db.History.timestamp.desc()).first()
@@ -299,22 +299,22 @@
 ''')
         view = GenericEditorView(fn, None, 'handler-defining-view')
         presenter = HandlerDefiningPresenter(model, view)
-        self.assertEquals(
+        self.assertEqual(
             len(presenter.view._GenericEditorView__attached_signals), natural_number_for_dialog_box + 1)
         presenter.on_tag_desc_textbuffer_changed()  # avoid uncounted line!
 
 
 class GlobalFunctionsTests(unittest.TestCase):
     def test_newer_version_on_github(self):
-        import StringIO
+        import io
         from bauble.connmgr import newer_version_on_github
-        stream = StringIO.StringIO('version = "1.0.0"  # comment')
+        stream = io.StringIO('version = "1.0.0"  # comment')
         self.assertFalse(newer_version_on_github(stream) and True or False)
-        stream = StringIO.StringIO('version = "1.0.99999"  # comment')
+        stream = io.StringIO('version = "1.0.99999"  # comment')
         self.assertTrue(newer_version_on_github(stream) and True or False)
-        stream = StringIO.StringIO('version = "1.0.99999"  # comment')
-        self.assertEquals(newer_version_on_github(stream), '1.0.99999')
-        stream = StringIO.StringIO('version = "1.099999"  # comment')
+        stream = io.StringIO('version = "1.0.99999"  # comment')
+        self.assertEqual(newer_version_on_github(stream), '1.0.99999')
+        stream = io.StringIO('version = "1.099999"  # comment')
         self.assertFalse(newer_version_on_github(stream) and True or False)
-        stream = StringIO.StringIO('version = "1.0.99999-dev"  # comment')
+        stream = io.StringIO('version = "1.0.99999-dev"  # comment')
         self.assertFalse(newer_version_on_github(stream) and True or False)
--- ./bauble/test/test_connmgr.py	(original)
+++ ./bauble/test/test_connmgr.py	(refactored)
@@ -48,7 +48,7 @@
         view = MockView(combos={'name_combo': [],
                                 'type_combo': []})
         presenter = ConnMgrPresenter(view)
-        self.assertEquals(presenter.view, view)
+        self.assertEqual(presenter.view, view)
 
     def test_no_connections_then_message(self):
         view = MockView(combos={'name_combo': [],
@@ -131,9 +131,9 @@
                      'file': 'btuu.db'}}
         prefs.prefs[bauble.conn_default_pref] = 'nugkui'
         presenter = ConnMgrPresenter(view)
-        self.assertEquals(presenter.connection_name, 'nugkui')
+        self.assertEqual(presenter.connection_name, 'nugkui')
         params = presenter.connections[presenter.connection_name]
-        self.assertEquals(params['default'], True)
+        self.assertEqual(params['default'], True)
         self.assertTrue(view.widget_get_value('usedefaults_chkbx'))
 
     def test_two_connection_initialize_default_second(self):
@@ -150,9 +150,9 @@
                      'file': 'btuu.db'}}
         prefs.prefs[bauble.conn_default_pref] = 'bruu'
         presenter = ConnMgrPresenter(view)
-        self.assertEquals(presenter.connection_name, 'btuu')
+        self.assertEqual(presenter.connection_name, 'btuu')
         params = presenter.connections[presenter.connection_name]
-        self.assertEquals(params['default'], False)
+        self.assertEqual(params['default'], False)
         self.assertFalse(view.widget_get_value('usedefaults_chkbx'))
 
     def test_two_connection_on_remove_confirm_positive(self):
@@ -187,7 +187,7 @@
                        'file': 'nugkui.db'}}
         prefs.prefs[bauble.conn_default_pref] = 'nugkui'
         presenter = ConnMgrPresenter(view)
-        self.assertEquals(presenter.connection_name, 'nugkui')
+        self.assertEqual(presenter.connection_name, 'nugkui')
         self.assertTrue(presenter.view.widget_get_visible(
             'expander'))
         self.assertFalse(presenter.view.widget_get_visible(
@@ -205,7 +205,7 @@
                          'type': 'PostgreSQL'}}
         prefs.prefs[bauble.conn_default_pref] = 'quisquis'
         presenter = ConnMgrPresenter(view)
-        self.assertEquals(presenter.connection_name, 'quisquis')
+        self.assertEqual(presenter.connection_name, 'quisquis')
         self.assertTrue(presenter.view.widget_get_visible(
             'expander'))
         self.assertTrue(presenter.view.widget_get_visible(
@@ -227,7 +227,7 @@
                          'type': 'Oracle'}}
         prefs.prefs[bauble.conn_default_pref] = 'quisquis'
         presenter = ConnMgrPresenter(view)
-        self.assertEquals(presenter.connection_name, 'quisquis')
+        self.assertEqual(presenter.connection_name, 'quisquis')
         self.assertTrue(presenter.view.widget_get_visible(
             'expander'))
         self.assertTrue(presenter.view.widget_get_visible(
@@ -255,7 +255,7 @@
         prefs.prefs[bauble.conn_default_pref] = 'nonce'
         presenter = ConnMgrPresenter(view)
         as_list = presenter.connection_names
-        self.assertEquals(presenter.connection_name, as_list[0])
+        self.assertEqual(presenter.connection_name, as_list[0])
 
     def test_when_user_selects_different_type(self):
         view = MockView(combos={'name_combo': [],
@@ -274,7 +274,7 @@
                          'user': 'pg'}}
         presenter = ConnMgrPresenter(view)
         # T_0
-        self.assertEquals(presenter.connection_name, 'nugkui')
+        self.assertEqual(presenter.connection_name, 'nugkui')
         self.assertTrue(presenter.view.widget_get_visible(
             'sqlite_parambox'))
         # action
@@ -282,9 +282,9 @@
         presenter.dbtype = 'PostgreSQL'  # who to trigger this in tests?
         presenter.on_name_combo_changed('name_combo')
         # result
-        self.assertEquals(presenter.connection_name, 'quisquis')
+        self.assertEqual(presenter.connection_name, 'quisquis')
         presenter.refresh_view()  # in reality this is triggered by gtk view
-        self.assertEquals(presenter.dbtype, 'PostgreSQL')
+        self.assertEqual(presenter.dbtype, 'PostgreSQL')
         ## if the above succeeds, the following is riggered by the view!
         #presenter.on_combo_changed('type_combo', 'PostgreSQL')
         # T_1
@@ -356,7 +356,7 @@
                   'default': False,
                   'file': '/tmp/test.db',
                   'pictures': '/tmp/'}
-        self.assertEquals(presenter.parameters_to_uri(params),
+        self.assertEqual(presenter.parameters_to_uri(params),
                           'sqlite:////tmp/test.db')
         params = {'type': 'PostgreSQL',
                   'passwd': False,
@@ -364,7 +364,7 @@
                   'db': 'quisquis',
                   'host': 'localhost',
                   'user': 'pg'}
-        self.assertEquals(presenter.parameters_to_uri(params),
+        self.assertEqual(presenter.parameters_to_uri(params),
                           'postgresql://pg@localhost/quisquis')
         params = {'type': 'PostgreSQL',
                   'passwd': True,
@@ -373,7 +373,7 @@
                   'host': 'localhost',
                   'user': 'pg'}
         view.reply_entry_dialog.append('secret')
-        self.assertEquals(presenter.parameters_to_uri(params),
+        self.assertEqual(presenter.parameters_to_uri(params),
                           'postgresql://pg:secret@localhost/quisquis')
         params = {'type': 'PostgreSQL',
                   'passwd': False,
@@ -382,7 +382,7 @@
                   'db': 'quisquis',
                   'host': 'localhost',
                   'user': 'pg'}
-        self.assertEquals(presenter.parameters_to_uri(params),
+        self.assertEqual(presenter.parameters_to_uri(params),
                           'postgresql://pg@localhost:9876/quisquis')
         params = {'type': 'PostgreSQL',
                   'passwd': True,
@@ -392,7 +392,7 @@
                   'host': 'localhost',
                   'user': 'pg'}
         view.reply_entry_dialog.append('secret')
-        self.assertEquals(presenter.parameters_to_uri(params),
+        self.assertEqual(presenter.parameters_to_uri(params),
                           'postgresql://pg:secret@localhost:9876/quisquis')
         params = {'type': 'PostgreSQL',
                   'passwd': False,
@@ -402,7 +402,7 @@
                   'db': 'quisquis',
                   'host': 'localhost',
                   'user': 'pg'}
-        self.assertEquals(presenter.parameters_to_uri(params),
+        self.assertEqual(presenter.parameters_to_uri(params),
                           'postgresql://pg@localhost/quisquis?'
                           'is_this_possible=no&why_do_we_test=because')
 
@@ -418,8 +418,8 @@
                          'host': 'localhost',
                          'user': 'pg'}}
         presenter = ConnMgrPresenter(view)
-        self.assertEquals(presenter.connection_name, 'quisquis')
-        self.assertEquals(presenter.dbtype, 'PostgreSQL')
+        self.assertEqual(presenter.connection_name, 'quisquis')
+        self.assertEqual(presenter.dbtype, 'PostgreSQL')
         ## we need trigger all signals that would go by gtk
         p = presenter.connections[presenter.connection_name]
         presenter.view.widget_set_value('database_entry', p['db'])
@@ -428,7 +428,7 @@
         presenter.on_text_entry_changed('user_entry')
         presenter.view.widget_set_value('host_entry', p['host'])
         presenter.on_text_entry_changed('host_entry')
-        self.assertEquals(presenter.connection_uri,
+        self.assertEqual(presenter.connection_uri,
                           'postgresql://pg@localhost/quisquis')
 
 
@@ -482,7 +482,7 @@
                         in presenter.view.invoked_detailed)
         self.assertTrue(('widget_set_value', ['name_combo', 'new_conn', ()])
                         in presenter.view.invoked_detailed)
-        print presenter.view.invoked_detailed
+        print(presenter.view.invoked_detailed)
         raise SkipTest("related to issue #194")
 
 
@@ -503,9 +503,9 @@
         for iter, name in enumerate(bauble.connmgr.dbtypes):
             bauble.connmgr.type_combo_cell_data_func(
                 None, renderer, bauble.connmgr.dbtypes, iter)
-            self.assertEquals(renderer['sensitive'],
+            self.assertEqual(renderer['sensitive'],
                               name in bauble.connmgr.working_dbtypes)
-            self.assertEquals(renderer['text'], name)
+            self.assertEqual(renderer['text'], name)
 
         bauble.connmgr.working_dbtypes, bauble.connmgr.dbtypes = wt, at
 
@@ -523,7 +523,7 @@
         presenter = ConnMgrPresenter(view)
         presenter.on_file_btnbrowse_clicked()
         presenter.on_text_entry_changed('file_entry')
-        self.assertEquals(presenter.filename, 'chosen')
+        self.assertEqual(presenter.filename, 'chosen')
 
     def test_file_not_chosen(self):
         view = MockView(combos={'name_combo': [],
@@ -532,7 +532,7 @@
         presenter = ConnMgrPresenter(view)
         presenter.filename = 'previously'
         presenter.on_file_btnbrowse_clicked()
-        self.assertEquals(presenter.filename, 'previously')
+        self.assertEqual(presenter.filename, 'previously')
 
     def test_pictureroot_chosen(self):
         view = MockView(combos={'name_combo': [],
@@ -541,7 +541,7 @@
         presenter = ConnMgrPresenter(view)
         presenter.on_pictureroot_btnbrowse_clicked()
         presenter.on_text_entry_changed('pictureroot_entry')
-        self.assertEquals(presenter.pictureroot, 'chosen')
+        self.assertEqual(presenter.pictureroot, 'chosen')
 
     def test_pictureroot_not_chosen(self):
         view = MockView(combos={'name_combo': [],
@@ -550,7 +550,7 @@
         presenter = ConnMgrPresenter(view)
         presenter.pictureroot = 'previously'
         presenter.on_pictureroot_btnbrowse_clicked()
-        self.assertEquals(presenter.pictureroot, 'previously')
+        self.assertEqual(presenter.pictureroot, 'previously')
 
     def test_pictureroot2_chosen(self):
         view = MockView(combos={'name_combo': [],
@@ -559,7 +559,7 @@
         presenter = ConnMgrPresenter(view)
         presenter.on_pictureroot2_btnbrowse_clicked()
         presenter.on_text_entry_changed('pictureroot2_entry')
-        self.assertEquals(presenter.pictureroot, 'chosen')
+        self.assertEqual(presenter.pictureroot, 'chosen')
 
     def test_pictureroot2_not_chosen(self):
         view = MockView(combos={'name_combo': [],
@@ -568,7 +568,7 @@
         presenter = ConnMgrPresenter(view)
         presenter.pictureroot = 'previously'
         presenter.on_pictureroot2_btnbrowse_clicked()
-        self.assertEquals(presenter.pictureroot, 'previously')
+        self.assertEqual(presenter.pictureroot, 'previously')
 
 
 class OnDialogResponseTests(BaubleTestCase):
@@ -600,7 +600,7 @@
         presenter.on_dialog_response(dialog, RESPONSE_OK)
         self.assertFalse('run_message_dialog' in view.invoked)
         self.assertTrue(dialog.hidden)
-        self.assertEquals(prefs.prefs[prefs.picture_root_pref], '/tmp/nugkui')
+        self.assertEqual(prefs.prefs[prefs.picture_root_pref], '/tmp/nugkui')
 
     def test_on_dialog_response_cancel(self):
         view = MockView(combos={'name_combo': [],
--- ./bauble/test/test_db.py	(original)
+++ ./bauble/test/test_db.py	(refactored)
@@ -29,8 +29,8 @@
 
 class GlobalFunctionsTests(BaubleTestCase):
     def test_get_next_code_first_this_year(self):
-        self.assertEquals(db.class_of_object("genus"),
+        self.assertEqual(db.class_of_object("genus"),
                           bauble.plugins.plants.genus.Genus)
-        self.assertEquals(db.class_of_object("accession_note"),
+        self.assertEqual(db.class_of_object("accession_note"),
                           bauble.plugins.garden.accession.AccessionNote)
-        self.assertEquals(db.class_of_object("not_existing"), None)
+        self.assertEqual(db.class_of_object("not_existing"), None)
--- ./bauble/test/test_editor.py	(original)
+++ ./bauble/test/test_editor.py	(refactored)
@@ -34,7 +34,7 @@
     def test_create_generic_view(self):
         filename = os.path.join(paths.lib_dir(), 'bauble.glade')
         view = GenericEditorView(filename)
-        print type(view.widgets)
+        print(type(view.widgets))
         self.assertTrue(type(view.widgets) is utils.BuilderWidgets)
 
     def test_set_title_ok(self):
@@ -42,7 +42,7 @@
         view = GenericEditorView(filename, root_widget_name='main_window')
         title = 'testing'
         view.set_title(title)
-        self.assertEquals(view.get_window().get_title(), title)
+        self.assertEqual(view.get_window().get_title(), title)
 
     def test_set_title_no_root(self):
         filename = os.path.join(paths.lib_dir(), 'bauble.glade')
@@ -102,22 +102,22 @@
 
     def test_date_parser_generic(self):
         import dateutil
-        print(help(dateutil.tz))
+        print((help(dateutil.tz)))
         target = parse_date('2019-01-18 18:20 +0500')
         result = parse_date('18 January 2019 18:20 +0500')
-        self.assertEquals(result, target)
+        self.assertEqual(result, target)
         result = parse_date('18:20, 18 January 2019 +0500')
-        self.assertEquals(result, target)
+        self.assertEqual(result, target)
         result = parse_date('18:20+0500, 18 January 2019')
-        self.assertEquals(result, target)
+        self.assertEqual(result, target)
         result = parse_date('18:20+0500, 18 Jan 2019')
-        self.assertEquals(result, target)
+        self.assertEqual(result, target)
         result = parse_date('18:20+0500, 2019-01-18')
-        self.assertEquals(result, target)
+        self.assertEqual(result, target)
         result = parse_date('18:20+0500, 1/18 2019')
-        self.assertEquals(result, target)
+        self.assertEqual(result, target)
         result = parse_date('18:20+0500, 18/1 2019')
-        self.assertEquals(result, target)
+        self.assertEqual(result, target)
 
     def test_date_parser_ambiguous(self):
         ## defaults to European: day, month, year - FAILS
@@ -125,13 +125,13 @@
         #self.assertEquals(result, datetime.datetime(2004, 1, 5, 0, 0))
         # explicit, American: month, day, year
         result = parse_date('5 1 4', dayfirst=False, yearfirst=False)
-        self.assertEquals(result, datetime.datetime(2004, 5, 1, 0, 0))
+        self.assertEqual(result, datetime.datetime(2004, 5, 1, 0, 0))
         # explicit, European: day, month, year
         result = parse_date('5 1 4', dayfirst=True, yearfirst=False)
-        self.assertEquals(result, datetime.datetime(2004, 1, 5, 0, 0))
+        self.assertEqual(result, datetime.datetime(2004, 1, 5, 0, 0))
         # explicit, Japanese: year, month, day (month, day, year)
         result = parse_date('5 1 4', dayfirst=False, yearfirst=True)
-        self.assertEquals(result, datetime.datetime(2005, 1, 4, 0, 0))
+        self.assertEqual(result, datetime.datetime(2005, 1, 4, 0, 0))
         ## explicit, illogical: year, day, month - FAILS
         #result = parse_date('5 1 4', dayfirst=True, yearfirst=True)
         #self.assertEquals(result, datetime.datetime(2005, 4, 1, 0, 0))
@@ -139,7 +139,7 @@
     def test_date_parser_365(self):
         target = datetime.datetime(2014, 1, 1, 20)
         result = parse_date('2014-01-01 20')
-        self.assertEquals(result, target)
+        self.assertEqual(result, target)
         target = parse_date('2014-01-01 20:00 +0000')
         result = parse_date('2014-01-01 20+0')
-        self.assertEquals(result, target)
+        self.assertEqual(result, target)
--- ./bauble/test/test_meta.py	(original)
+++ ./bauble/test/test_meta.py	(refactored)
@@ -35,23 +35,23 @@
         """
         # test the object isn't created if it doesn't exist and we
         # don't pass a default value
-        name = u'name'
+        name = 'name'
         obj = meta.get_default(name)
-        self.assert_(obj is None)
+        self.assertTrue(obj is None)
 
         # test that the obj is created if it doesn't exists and that
         # the default value is set
-        value = u'value'
+        value = 'value'
         meta.get_default(name, default=value)
         obj = self.session.query(meta.BaubleMeta).filter_by(name=name).one()
-        self.assert_(obj.value == value)
+        self.assertTrue(obj.value == value)
 
         # test that the value isn't changed if it already exists
-        value2 = u'value2'
+        value2 = 'value2'
         obj = meta.get_default(name, default=value2)
-        self.assert_(obj.value == value)
+        self.assertTrue(obj.value == value)
 
         # test that if we pass our own session when we are creating a
         # new value that the object is added to the session but not committed
-        obj = meta.get_default(u'name2', default=value, session=self.session)
-        self.assert_(obj in self.session.new)
+        obj = meta.get_default('name2', default=value, session=self.session)
+        self.assertTrue(obj in self.session.new)
--- ./bauble/test/test_pluginmgr.py	(original)
+++ ./bauble/test/test_pluginmgr.py	(refactored)
@@ -165,11 +165,11 @@
                 try:
                     csv.start([filenames], metadata=db.metadata,
                               force=True)
-                except Exception, e:
+                except Exception as e:
                     logger.error(e)
                     raise
                 from bauble.plugins.plants import Family
-                self.assertEquals(self.session.query(Family).count(), 1387)
+                self.assertEqual(self.session.query(Family).count(), 1387)
         pluginmgr.plugins[Dummy.__name__] = Dummy
         pluginmgr.install([Dummy])
 
@@ -193,8 +193,8 @@
         bauble.pluginmgr.plugins[B.__name__] = b
         bauble.pluginmgr.plugins[A.__name__] = a
         dep, unmet = bauble.pluginmgr._create_dependency_pairs([a, b, c])
-        self.assertEquals(dep, [(a, b), (b, c)])
-        self.assertEquals(unmet, {})
+        self.assertEqual(dep, [(a, b), (b, c)])
+        self.assertEqual(unmet, {})
 
     def test_create_dependency_pairs_missing_base(self):
         a, b, c = A(), B(), C()
@@ -204,8 +204,8 @@
         bauble.pluginmgr.plugins[C.__name__] = c
         bauble.pluginmgr.plugins[B.__name__] = b
         dep, unmet = bauble.pluginmgr._create_dependency_pairs([b, c])
-        self.assertEquals(dep, [(b, c)])
-        self.assertEquals(unmet, {'B': ['A']})
+        self.assertEqual(dep, [(b, c)])
+        self.assertEqual(unmet, {'B': ['A']})
 
 
 class StandalonePluginMgrTests(unittest.TestCase):
@@ -289,7 +289,7 @@
         db.open(uri, verify=False)
         db.create(False)
         bauble.pluginmgr.install((pA, pB, pC), force=True)
-        self.assert_(A.installed and B.installed and C.installed)
+        self.assertTrue(A.installed and B.installed and C.installed)
 
     def test_dependencies_BA(self):
         "test that loading B will also load A but not C"
@@ -350,8 +350,8 @@
 
         # test that adding works
         PluginRegistry.add(p)
-        self.assert_(PluginRegistry.exists(p))
+        self.assertTrue(PluginRegistry.exists(p))
 
         # test that removing works
         PluginRegistry.remove(p)
-        self.assert_(not PluginRegistry.exists(p))
+        self.assertTrue(not PluginRegistry.exists(p))
--- ./bauble/test/test_prefs.py	(original)
+++ ./bauble/test/test_prefs.py	(refactored)
@@ -36,7 +36,7 @@
         p = prefs._prefs(pname)
         p.init()
         with open(pname) as f:
-            self.assertEquals(f.read(), '')
+            self.assertEqual(f.read(), '')
 
     def test_assert_initial_values(self):
         handle, pname = mkstemp(suffix='.dict')
@@ -48,12 +48,12 @@
         self.assertTrue(prefs.parse_dayfirst_pref in p)
         self.assertTrue(prefs.parse_yearfirst_pref in p)
         self.assertTrue(prefs.units_pref in p)
-        self.assertEquals(p[prefs.config_version_pref], version_tuple[:2])
-        self.assertEquals(p[prefs.picture_root_pref], '')
-        self.assertEquals(p[prefs.date_format_pref], '%d-%m-%Y')
-        self.assertEquals(p[prefs.parse_dayfirst_pref], True)
-        self.assertEquals(p[prefs.parse_yearfirst_pref], False)
-        self.assertEquals(p[prefs.units_pref], 'metric')
+        self.assertEqual(p[prefs.config_version_pref], version_tuple[:2])
+        self.assertEqual(p[prefs.picture_root_pref], '')
+        self.assertEqual(p[prefs.date_format_pref], '%d-%m-%Y')
+        self.assertEqual(p[prefs.parse_dayfirst_pref], True)
+        self.assertEqual(p[prefs.parse_yearfirst_pref], False)
+        self.assertEqual(p[prefs.units_pref], 'metric')
 
     def test_not_saved_while_testing(self):
         handle, pname = mkstemp(suffix='.dict')
@@ -61,7 +61,7 @@
         p.init()
         p.save()
         with open(pname) as f:
-            self.assertEquals(f.read(), '')
+            self.assertEqual(f.read(), '')
 
     def test_can_force_save(self):
         handle, pname = mkstemp(suffix='.dict')
@@ -77,7 +77,7 @@
         p.init()
         self.assertFalse('not_there_yet.1' in p)
         self.assertIsNone(p['not_there_yet.1'])
-        self.assertEquals(p.get('not_there_yet.2', 33), 33)
+        self.assertEqual(p.get('not_there_yet.2', 33), 33)
         self.assertIsNone(p.get('not_there_yet.3', None))
         self.assertFalse('not_there_yet.1' in p)
         self.assertFalse('not_there_yet.2' in p)
@@ -91,8 +91,8 @@
         self.assertFalse('test.not_there_yet-1' in p)
         p['test.not_there_yet-1'] = 'all is a ball'
         self.assertTrue('test.not_there_yet-1' in p)
-        self.assertEquals(p['test.not_there_yet-1'], 'all is a ball')
-        self.assertEquals(p.get('test.not_there_yet-1', 33), 'all is a ball')
+        self.assertEqual(p['test.not_there_yet-1'], 'all is a ball')
+        self.assertEqual(p.get('test.not_there_yet-1', 33), 'all is a ball')
 
     def test_most_values_converted_to_string(self):
         handle, pname = mkstemp(suffix='.dict')
@@ -101,10 +101,10 @@
         self.assertFalse('test.not_there_yet-1' in p)
         p['test.not_there_yet-1'] = 1
         self.assertTrue('test.not_there_yet-1' in p)
-        self.assertEquals(p['test.not_there_yet-1'], '1')
+        self.assertEqual(p['test.not_there_yet-1'], '1')
         # is the following really useful?
         p['test.not_there_yet-3'] = None
-        self.assertEquals(p['test.not_there_yet-3'], 'None')
+        self.assertEqual(p['test.not_there_yet-3'], 'None')
 
     def test_boolean_values_stay_boolean(self):
         handle, pname = mkstemp(suffix='.dict')
@@ -112,9 +112,9 @@
         p.init()
         self.assertFalse('test.not_there_yet-1' in p)
         p['test.not_there_yet-1'] = True
-        self.assertEquals(p['test.not_there_yet-1'], True)
+        self.assertEqual(p['test.not_there_yet-1'], True)
         p['test.not_there_yet-2'] = False
-        self.assertEquals(p['test.not_there_yet-2'], False)
+        self.assertEqual(p['test.not_there_yet-2'], False)
 
     def test_saved_dictionary_like_ini_file(self):
         handle, pname = mkstemp(suffix='.dict')
--- ./bauble/test/test_search.py	(original)
+++ ./bauble/test/test_search.py	(refactored)
@@ -71,7 +71,7 @@
         s = 'domain=test'
         expected = "[domain = ['test']]"
         results = parser.domain_expression.parseString(s, parseAll=True)
-        self.assertEquals(results.getName(), 'domain_expression')
+        self.assertEqual(results.getName(), 'domain_expression')
         self.assertEqual(str(results), expected)
 
         s = 'domain==test'
@@ -103,10 +103,10 @@
         "recognizes integers or floats as floats"
 
         results = parser.value.parseString('123')
-        self.assertEquals(results.getName(), 'value')
-        self.assertEquals(results.value.express(), 123.0)
+        self.assertEqual(results.getName(), 'value')
+        self.assertEqual(results.value.express(), 123.0)
         results = parser.value.parseString('123.1')
-        self.assertEquals(results.value.express(), 123.1)
+        self.assertEqual(results.value.express(), 123.1)
 
     def test_bool_typed_no_arguments(self):
         "bool syntax needs at least one argument"
@@ -117,38 +117,38 @@
         "recognizes bool syntax"
 
         results = parser.value.parseString('|bool|0|')
-        self.assertEquals(results.getName(), 'value')
-        self.assertEquals(results.value.express(), False)
+        self.assertEqual(results.getName(), 'value')
+        self.assertEqual(results.value.express(), False)
 
         results = parser.value.parseString('|bool|0.0|')
-        self.assertEquals(results.getName(), 'value')
-        self.assertEquals(results.value.express(), False)
+        self.assertEqual(results.getName(), 'value')
+        self.assertEqual(results.value.express(), False)
 
         results = parser.value.parseString('|bool|false|')
-        self.assertEquals(results.getName(), 'value')
-        self.assertEquals(results.value.express(), False)
+        self.assertEqual(results.getName(), 'value')
+        self.assertEqual(results.value.express(), False)
 
         results = parser.value.parseString('|bool|FalsE|')
-        self.assertEquals(results.getName(), 'value')
-        self.assertEquals(results.value.express(), False)
+        self.assertEqual(results.getName(), 'value')
+        self.assertEqual(results.value.express(), False)
 
         for i in ['True', 'true', 'TRUE', '"anything not false"', '"1"', '1', '1.1']:
             results = parser.value.parseString('|bool|%s|' % i)
-            self.assertEquals(results.getName(), 'value')
-            self.assertEquals(results.value.express(), True)
+            self.assertEqual(results.getName(), 'value')
+            self.assertEqual(results.value.express(), True)
 
         for i in ['True', 'true', 'TRUE', '"anything not false"', '"1"', '1', '1.1']:
             results = parser.value.parseString('|bool|abc, %s, 3|' % i)
-            self.assertEquals(results.getName(), 'value')
-            self.assertEquals(results.value.express(), True)
+            self.assertEqual(results.getName(), 'value')
+            self.assertEqual(results.value.express(), True)
 
     def test_datetime_typed_values(self):
         "recognizes datetime syntax"
 
         from datetime import datetime
         results = parser.value.parseString('|datetime|1970,1,1|')
-        self.assertEquals(results.getName(), 'value')
-        self.assertEquals(results.value.express(), datetime(1970, 1, 1))
+        self.assertEqual(results.getName(), 'value')
+        self.assertEqual(results.value.express(), datetime(1970, 1, 1))
 
     def test_datetime_typed_values_offset(self):
         "recognizes datetime offset syntax"
@@ -157,11 +157,11 @@
         today = datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)
         yesterday = today - timedelta(1)
         results = parser.value.parseString('|datetime|0|')
-        self.assertEquals(results.getName(), 'value')
-        self.assertEquals(results.value.express(), today)
+        self.assertEqual(results.getName(), 'value')
+        self.assertEqual(results.value.express(), today)
         results = parser.value.parseString('|datetime|-1|')
-        self.assertEquals(results.getName(), 'value')
-        self.assertEquals(results.value.express(), yesterday)
+        self.assertEqual(results.getName(), 'value')
+        self.assertEqual(results.value.express(), yesterday)
 
     def test_value_token(self):
         "value should only return the first string or raise a parse exception"
@@ -170,29 +170,29 @@
         expected = 'test'
         for s in strings:
             results = parser.value.parseString(s, parseAll=True)
-            self.assertEquals(results.getName(), 'value')
-            self.assertEquals(results.value.express(), expected)
+            self.assertEqual(results.getName(), 'value')
+            self.assertEqual(results.value.express(), expected)
 
         strings = ['123.000', '123.', "123.0"]
         expected = 123.0
         for s in strings:
             results = parser.value.parseString(s)
-            self.assertEquals(results.getName(), 'value')
-            self.assertEquals(results.value.express(), expected)
+            self.assertEqual(results.getName(), 'value')
+            self.assertEqual(results.value.express(), expected)
 
         strings = ['"test1 test2"', "'test1 test2'"]
         expected = 'test1 test2'  # this is one string! :)
         for s in strings:
             results = parser.value.parseString(s, parseAll=True)
-            self.assertEquals(results.getName(), 'value')
-            self.assertEquals(results.value.express(), expected)
+            self.assertEqual(results.getName(), 'value')
+            self.assertEqual(results.value.express(), expected)
 
         strings = ['%.-_*', '"%.-_*"']
         expected = '%.-_*'
         for s in strings:
             results = parser.value.parseString(s, parseAll=True)
-            self.assertEquals(results.getName(), 'value')
-            self.assertEquals(results.value.express(), expected)
+            self.assertEqual(results.getName(), 'value')
+            self.assertEqual(results.value.express(), expected)
 
         # these should be invalid
         strings = ['test test', '"test', "test'", '$', ]
@@ -205,14 +205,14 @@
         env = None
         results = parser.statement.parseString("plant where accession.species."
                                                "id=44")
-        self.assertEquals(results.statement.content.filter.needs_join(env),
+        self.assertEqual(results.statement.content.filter.needs_join(env),
                           [['accession', 'species']])
         results = parser.statement.parseString("plant where accession.id=44")
-        self.assertEquals(results.statement.content.filter.needs_join(env),
+        self.assertEqual(results.statement.content.filter.needs_join(env),
                           [['accession']])
         results = parser.statement.parseString("plant where accession.id=4 OR "
                                                "accession.species.id=3")
-        self.assertEquals(results.statement.content.filter.needs_join(env),
+        self.assertEqual(results.statement.content.filter.needs_join(env),
                           [['accession'], ['accession', 'species']])
 
     def test_value_list_token(self):
@@ -225,27 +225,27 @@
         expected = [['test1', 'test2']]
         for s in strings:
             results = parser.value_list.parseString(s, parseAll=True)
-            self.assertEquals(results.getName(), 'value_list')
-            self.assertEquals(str(results), str(expected))
+            self.assertEqual(results.getName(), 'value_list')
+            self.assertEqual(str(results), str(expected))
 
         strings = ['test', '"test"', "'test'"]
         expected = [['test']]
         for s in strings:
             results = parser.value_list.parseString(s, parseAll=True)
-            self.assertEquals(results.getName(), 'value_list')
-            self.assertEquals(str(results), str(expected))
+            self.assertEqual(results.getName(), 'value_list')
+            self.assertEqual(str(results), str(expected))
 
         strings = ['test1 test2 test3', '"test1" test2 \'test3\'']
         expected = [['test1', 'test2', 'test3']]
         for s in strings:
             results = parser.value_list.parseString(s, parseAll=True)
-            self.assertEquals(str(results), str(expected))
+            self.assertEqual(str(results), str(expected))
 
         strings = ['"test1 test2", test3']
         expected = [['test1 test2', 'test3']]
         for s in strings:
             results = parser.value_list.parseString(s, parseAll=True)
-            self.assertEquals(str(results), str(expected))
+            self.assertEqual(str(results), str(expected))
 
         # these should be invalid
         strings = ['"test', "test'", "'test tes2", "1,2,3 4 5"]
@@ -264,8 +264,8 @@
         db.engine.execute('delete from family')
         from bauble.plugins.plants.family import Family
         from bauble.plugins.plants.genus import Genus
-        self.family = Family(family=u'family1', qualifier=u's. lat.')
-        self.genus = Genus(family=self.family, genus=u'genus1')
+        self.family = Family(family='family1', qualifier='s. lat.')
+        self.genus = Genus(family=self.family, genus='genus1')
         self.Family = Family
         self.Genus = Genus
         self.session.add_all([self.family, self.genus])
@@ -300,13 +300,13 @@
 
         # search for family by family name
         results = mapper_search.search('family1', self.session)
-        self.assertEquals(len(results), 1)
+        self.assertEqual(len(results), 1)
         f = list(results)[0]
         self.assertEqual(f.id, self.family.id)
 
         # search for genus by genus name
         results = mapper_search.search('genus1', self.session)
-        self.assertEquals(len(results), 1)
+        self.assertEqual(len(results), 1)
         g = list(results)[0]
         self.assertEqual(g.id, self.genus.id)
 
@@ -316,10 +316,10 @@
 
         # search for family by domain
         results = mapper_search.search('fam=family1', self.session)
-        self.assertEquals(len(results), 1)
+        self.assertEqual(len(results), 1)
         f = list(results)[0]
         self.assertTrue(isinstance(f, self.Family))
-        self.assertEquals(f.id, self.family.id)
+        self.assertEqual(f.id, self.family.id)
 
     def test_search_by_expression_genus_eq_1match(self):
         mapper_search = search.get_strategy('MapperSearch')
@@ -327,7 +327,7 @@
 
         # search for genus by domain
         results = mapper_search.search('gen=genus1', self.session)
-        self.assertEquals(len(results), 1)
+        self.assertEqual(len(results), 1)
         g = list(results)[0]
         self.assertTrue(isinstance(g, self.Genus))
         self.assertEqual(g.id, self.genus.id)
@@ -338,7 +338,7 @@
 
         # search for genus by domain
         results = mapper_search.search('genus=g', self.session)
-        self.assertEquals(len(results), 0)
+        self.assertEqual(len(results), 0)
 
     def test_search_by_expression_genus_eq_everything(self):
         mapper_search = search.get_strategy('MapperSearch')
@@ -346,7 +346,7 @@
 
         # search for genus by domain
         results = mapper_search.search('genus=*', self.session)
-        self.assertEquals(len(results), 1)
+        self.assertEqual(len(results), 1)
 
     def test_search_by_expression_genus_like_nomatch(self):
         mapper_search = search.get_strategy('MapperSearch')
@@ -354,43 +354,43 @@
 
         # search for genus by domain
         results = mapper_search.search('genus like gen', self.session)
-        self.assertEquals(len(results), 0)
+        self.assertEqual(len(results), 0)
         # search for genus by domain
         results = mapper_search.search('genus like nus%', self.session)
-        self.assertEquals(len(results), 0)
+        self.assertEqual(len(results), 0)
         # search for genus by domain
         results = mapper_search.search('genus like %gen', self.session)
-        self.assertEquals(len(results), 0)
+        self.assertEqual(len(results), 0)
 
     def test_search_by_expression_genus_like_contains_eq(self):
         mapper_search = search.get_strategy('MapperSearch')
         self.assertTrue(isinstance(mapper_search, search.MapperSearch))
         Family = self.Family
-        f2 = Family(family=u'family2')
-        f3 = Family(family=u'afamily3')
-        f4 = Family(family=u'fam4')
+        f2 = Family(family='family2')
+        f3 = Family(family='afamily3')
+        f4 = Family(family='fam4')
         self.session.add_all([f3, f2, f4])
         self.session.commit()
 
         # search for family by domain
         results = mapper_search.search('family contains fam', self.session)
-        self.assertEquals(len(results), 4)  # all do
+        self.assertEqual(len(results), 4)  # all do
         results = mapper_search.search('family like f%', self.session)
-        self.assertEquals(len(results), 3)  # three start by f
+        self.assertEqual(len(results), 3)  # three start by f
         results = mapper_search.search('family like af%', self.session)
-        self.assertEquals(len(results), 1)  # one starts by af
+        self.assertEqual(len(results), 1)  # one starts by af
         results = mapper_search.search('family like fam', self.session)
-        self.assertEquals(len(results), 0)
+        self.assertEqual(len(results), 0)
         results = mapper_search.search('family = fam', self.session)
-        self.assertEquals(len(results), 0)
+        self.assertEqual(len(results), 0)
         results = mapper_search.search('family = fam4', self.session)
-        self.assertEquals(len(results), 1)  # exact name match
+        self.assertEqual(len(results), 1)  # exact name match
         results = mapper_search.search('family = Fam4', self.session)
-        self.assertEquals(len(results), 0)  # = is case sensitive
+        self.assertEqual(len(results), 0)  # = is case sensitive
         results = mapper_search.search('family like Fam4', self.session)
-        self.assertEquals(len(results), 1)  # like is case insensitive
+        self.assertEqual(len(results), 1)  # like is case insensitive
         results = mapper_search.search('family contains FAM', self.session)
-        self.assertEquals(len(results), 4)  # they case insensitively do
+        self.assertEqual(len(results), 4)  # they case insensitively do
 
     def test_search_by_query11(self):
         "query with MapperSearch, single table, single test"
@@ -398,8 +398,8 @@
         # test does not depend on plugin functionality
         Family = self.Family
         Genus = self.Genus
-        family2 = Family(family=u'family2')
-        genus2 = Genus(family=family2, genus=u'genus2')
+        family2 = Family(family='family2')
+        genus2 = Genus(family=family2, genus='genus2')
         self.session.add_all([family2, genus2])
         self.session.commit()
 
@@ -409,7 +409,7 @@
         # search cls.column
         results = mapper_search.search('genus where genus=genus1',
                                        self.session)
-        self.assertEquals(len(results), 1)
+        self.assertEqual(len(results), 1)
         f = list(results)[0]
         self.assertTrue(isinstance(f, Genus))
         self.assertEqual(f.id, self.family.id)
@@ -420,12 +420,12 @@
         # test does not depend on plugin functionality
         Family = self.Family
         Genus = self.Genus
-        f2 = Family(family=u'family2')
-        g2 = Genus(family=f2, genus=u'genus2')
-        f3 = Family(family=u'fam3')
+        f2 = Family(family='family2')
+        g2 = Genus(family=f2, genus='genus2')
+        f3 = Family(family='fam3')
         # g3(homonym) is here just to have two matches on one value
-        g3 = Genus(family=f3, genus=u'genus2')
-        g4 = Genus(family=f3, genus=u'genus4')
+        g3 = Genus(family=f3, genus='genus2')
+        g4 = Genus(family=f3, genus='genus4')
         self.session.add_all([f2, g2, f3, g3, g4])
         self.session.commit()
 
@@ -435,7 +435,7 @@
         # search with or conditions
         s = 'genus where genus=genus2 OR genus=genus1'
         results = mapper_search.search(s, self.session)
-        self.assertEquals(sorted([r.id for r in results]),
+        self.assertEqual(sorted([r.id for r in results]),
                           [g.id for g in (self.genus, g2, g3)])
 
     def test_search_by_query13(self):
@@ -444,11 +444,11 @@
         # test does not depend on plugin functionality
         Family = self.Family
         Genus = self.Genus
-        family2 = Family(family=u'family2')
-        genus2 = Genus(family=family2, genus=u'genus2')
-        f3 = Family(family=u'fam3')
-        g3 = Genus(family=f3, genus=u'genus2')
-        g4 = Genus(family=f3, genus=u'genus4')
+        family2 = Family(family='family2')
+        genus2 = Genus(family=family2, genus='genus2')
+        f3 = Family(family='fam3')
+        g3 = Genus(family=f3, genus='genus2')
+        g4 = Genus(family=f3, genus='genus4')
         self.session.add_all([family2, genus2, f3, g3, g4])
         self.session.commit()
 
@@ -472,8 +472,8 @@
         # test does not depend on plugin functionality
         Family = self.Family
         Genus = self.Genus
-        family2 = Family(family=u'family2')
-        genus2 = Genus(family=family2, genus=u'genus2')
+        family2 = Family(family='family2')
+        genus2 = Genus(family=family2, genus='genus2')
         self.session.add_all([family2, genus2])
         self.session.commit()
 
@@ -483,15 +483,15 @@
         # search cls.parent.column
         results = mapper_search.search('genus where family.family=family1',
                                        self.session)
-        self.assertEquals(len(results), 1)
+        self.assertEqual(len(results), 1)
         g0 = list(results)[0]
         self.assertTrue(isinstance(g0, Genus))
-        self.assertEquals(g0.id, self.genus.id)
+        self.assertEqual(g0.id, self.genus.id)
 
         # search cls.children.column
         results = mapper_search.search('family where genera.genus=genus1',
                                        self.session)
-        self.assertEquals(len(results), 1)
+        self.assertEqual(len(results), 1)
         f = list(results)[0]
         self.assertEqual(len(results), 1)
         self.assertTrue(isinstance(f, Family))
@@ -503,10 +503,10 @@
         # test does not depend on plugin functionality
         Family = self.Family
         Genus = self.Genus
-        family2 = Family(family=u'family2')
-        g2 = Genus(family=family2, genus=u'genus2')
-        f3 = Family(family=u'fam3', qualifier=u's. lat.')
-        g3 = Genus(family=f3, genus=u'genus3')
+        family2 = Family(family='family2')
+        g2 = Genus(family=family2, genus='genus2')
+        f3 = Family(family='fam3', qualifier='s. lat.')
+        g3 = Genus(family=f3, genus='genus3')
         self.session.add_all([family2, g2, f3, g3])
         self.session.commit()
 
@@ -552,10 +552,10 @@
         # test does not depend on plugin functionality
         Family = self.Family
         Genus = self.Genus
-        family2 = Family(family=u'family2')
-        g2 = Genus(family=family2, genus=u'genus2')
-        f3 = Family(family=u'fam3', qualifier=u's. lat.')
-        g3 = Genus(family=f3, genus=u'genus3')
+        family2 = Family(family='family2')
+        g2 = Genus(family=family2, genus='genus2')
+        f3 = Family(family='fam3', qualifier='s. lat.')
+        g3 = Genus(family=f3, genus='genus3')
         self.session.add_all([family2, g2, f3, g3])
         self.session.commit()
 
@@ -585,10 +585,10 @@
         # test does not depend on plugin functionality
         Family = self.Family
         Genus = self.Genus
-        family2 = Family(family=u'family2')
-        g2 = Genus(family=family2, genus=u'genus2')
-        f3 = Family(family=u'fam3', qualifier=u's. lat.')
-        g3 = Genus(family=f3, genus=u'genus3')
+        family2 = Family(family='family2')
+        g2 = Genus(family=family2, genus='genus2')
+        f3 = Family(family='fam3', qualifier='s. lat.')
+        g3 = Genus(family=f3, genus='genus3')
         self.session.add_all([family2, g2, f3, g3])
         self.session.commit()
 
@@ -623,10 +623,10 @@
         # test does not depend on plugin functionality
         Family = self.Family
         Genus = self.Genus
-        family2 = Family(family=u'family2')
-        genus2 = Genus(family=family2, genus=u'genus2')
-        f3 = Family(family=u'fam3')
-        g3 = Genus(family=f3, genus=u'genus3')
+        family2 = Family(family='family2')
+        genus2 = Genus(family=family2, genus='genus2')
+        f3 = Family(family='fam3')
+        g3 = Genus(family=f3, genus='genus3')
         self.session.add_all([family2, genus2, f3, g3])
         self.session.commit()
 
@@ -646,14 +646,14 @@
         # test does not depend on plugin functionality
         Family = self.Family
         Genus = self.Genus
-        family2 = Family(family=u'family2')
-        family3 = Family(family=u'afamily3')
-        genus21 = Genus(family=family2, genus=u'genus21')
-        genus31 = Genus(family=family3, genus=u'genus31')
-        genus32 = Genus(family=family3, genus=u'genus32')
-        genus33 = Genus(family=family3, genus=u'genus33')
-        f3 = Family(family=u'fam3')
-        g3 = Genus(family=f3, genus=u'genus31')
+        family2 = Family(family='family2')
+        family3 = Family(family='afamily3')
+        genus21 = Genus(family=family2, genus='genus21')
+        genus31 = Genus(family=family3, genus='genus31')
+        genus32 = Genus(family=family3, genus='genus32')
+        genus33 = Genus(family=family3, genus='genus33')
+        f3 = Family(family='fam3')
+        g3 = Genus(family=f3, genus='genus31')
         self.session.add_all([family3, family2, genus21, genus31, genus32,
                               genus33, f3, g3])
         self.session.commit()
@@ -664,7 +664,7 @@
         # test partial string matches on a query
         s = 'genus where family.family like family%'
         results = mapper_search.search(s, self.session)
-        self.assertEquals(set(results), set([self.genus, genus21]))
+        self.assertEqual(set(results), set([self.genus, genus21]))
 
     def test_search_by_query22_underscore(self):
         """can use fields starting with an underscore"""
@@ -676,14 +676,14 @@
         from bauble.plugins.garden.accession import Accession
         from bauble.plugins.garden.location import Location
         from bauble.plugins.garden.plant import Plant
-        family2 = Family(family=u'family2')
-        g2 = Genus(family=family2, genus=u'genus2')
-        f3 = Family(family=u'fam3', qualifier=u's. lat.')
-        g3 = Genus(family=f3, genus=u'Ixora')
-        sp = Species(sp=u"coccinea", genus=g3)
-        ac = Accession(species=sp, code=u'1979.0001')
-        lc = Location(name=u'loc1', code=u'loc1')
-        pp = Plant(accession=ac, code=u'01', location=lc, quantity=1)
+        family2 = Family(family='family2')
+        g2 = Genus(family=family2, genus='genus2')
+        f3 = Family(family='fam3', qualifier='s. lat.')
+        g3 = Genus(family=f3, genus='Ixora')
+        sp = Species(sp="coccinea", genus=g3)
+        ac = Accession(species=sp, code='1979.0001')
+        lc = Location(name='loc1', code='loc1')
+        pp = Plant(accession=ac, code='01', location=lc, quantity=1)
         pp._last_updated = datetime.datetime(2009, 2, 13)
         self.session.add_all([family2, g2, f3, g3, sp, ac, lc, pp])
         self.session.commit()
@@ -707,12 +707,12 @@
         from bauble.plugins.garden.accession import Accession
         #from bauble.plugins.garden.location import Location
         #from bauble.plugins.garden.plant import Plant
-        family2 = Family(family=u'family2')
-        g2 = Genus(family=family2, genus=u'genus2')
-        f3 = Family(family=u'fam3', qualifier=u's. lat.')
-        g3 = Genus(family=f3, genus=u'Ixora')
-        sp = Species(sp=u"coccinea", genus=g3)
-        ac = Accession(species=sp, code=u'1979.0001')
+        family2 = Family(family='family2')
+        g2 = Genus(family=family2, genus='genus2')
+        f3 = Family(family='fam3', qualifier='s. lat.')
+        g3 = Genus(family=f3, genus='Ixora')
+        sp = Species(sp="coccinea", genus=g3)
+        ac = Accession(species=sp, code='1979.0001')
         self.session.add_all([family2, g2, f3, g3, sp, ac])
         self.session.commit()
 
@@ -730,11 +730,11 @@
         """SynonymSearch strategy gives all synonyms of given taxon."""
         Family = self.Family
         Genus = self.Genus
-        family2 = Family(family=u'family2')
-        g2 = Genus(family=family2, genus=u'genus2')
-        f3 = Family(family=u'fam3', qualifier=u's. lat.')
-        g3 = Genus(family=f3, genus=u'Ixora')
-        g4 = Genus(family=f3, genus=u'Schetti')
+        family2 = Family(family='family2')
+        g2 = Genus(family=family2, genus='genus2')
+        f3 = Family(family='fam3', qualifier='s. lat.')
+        g3 = Genus(family=f3, genus='Ixora')
+        g4 = Genus(family=f3, genus='Schetti')
         self.session.add_all([family2, g2, f3, g3, g4])
         g4.accepted = g3
         self.session.commit()
@@ -750,11 +750,11 @@
         """SynonymSearch strategy gives all synonyms of given taxon."""
         Family = self.Family
         Genus = self.Genus
-        family2 = Family(family=u'family2')
-        g2 = Genus(family=family2, genus=u'genus2')
-        f3 = Family(family=u'fam3', qualifier=u's. lat.')
-        g3 = Genus(family=f3, genus=u'Ixora')
-        g4 = Genus(family=f3, genus=u'Schetti')
+        family2 = Family(family='family2')
+        g2 = Genus(family=family2, genus='genus2')
+        f3 = Family(family='fam3', qualifier='s. lat.')
+        g3 = Genus(family=f3, genus='Ixora')
+        g4 = Genus(family=f3, genus='Schetti')
         self.session.add_all([family2, g2, f3, g3, g4])
         g4.accepted = g3
         self.session.commit()
@@ -773,12 +773,12 @@
         Genus = self.Genus
         from bauble.plugins.plants.species_model import Species
         from bauble.plugins.plants.species_model import VernacularName
-        family2 = Family(family=u'family2')
-        g2 = Genus(family=family2, genus=u'genus2')
-        f3 = Family(family=u'fam3', qualifier=u's. lat.')
-        g3 = Genus(family=f3, genus=u'Ixora')
-        sp = Species(sp=u"coccinea", genus=g3)
-        vn = VernacularName(name=u"coral rojo", language=u"es", species=sp)
+        family2 = Family(family='family2')
+        g2 = Genus(family=family2, genus='genus2')
+        f3 = Family(family='fam3', qualifier='s. lat.')
+        g3 = Genus(family=f3, genus='Ixora')
+        sp = Species(sp="coccinea", genus=g3)
+        vn = VernacularName(name="coral rojo", language="es", species=sp)
         self.session.add_all([family2, g2, f3, g3, sp, vn])
         self.session.commit()
 
@@ -800,11 +800,11 @@
         db.engine.execute('delete from family')
         from bauble.plugins.plants.family import Family
         from bauble.plugins.plants.genus import Genus
-        self.family = Family(family=u'family1', qualifier=u's. lat.', id=1)
-        self.g1 = Genus(family=self.family, genus=u'genus1', id=1)
-        self.g2 = Genus(family=self.family, genus=u'genus2', id=2)
-        self.g3 = Genus(family=self.family, genus=u'genus3', id=3)
-        self.g4 = Genus(family=self.family, genus=u'genus4', id=4)
+        self.family = Family(family='family1', qualifier='s. lat.', id=1)
+        self.g1 = Genus(family=self.family, genus='genus1', id=1)
+        self.g2 = Genus(family=self.family, genus='genus2', id=2)
+        self.g3 = Genus(family=self.family, genus='genus3', id=3)
+        self.g4 = Genus(family=self.family, genus='genus4', id=4)
         self.Family = Family
         self.Genus = Genus
         self.session.add_all([self.family, self.g1, self.g2, self.g3, self.g4])
@@ -862,17 +862,17 @@
         from bauble.plugins.plants.family import Family
         from bauble.plugins.plants.genus import Genus
         from bauble.plugins.plants.species import Species
-        f1 = Family(family=u'family1', qualifier=u's. lat.')
-        g1 = Genus(family=f1, genus=u'genus1')
-        f2 = Family(family=u'family2')
-        g2 = Genus(family=f2, genus=u'genus2')
-        f3 = Family(family=u'fam3', qualifier=u's. lat.')
-        g3 = Genus(family=f3, genus=u'Ixora')
-        sp = Species(sp=u"coccinea", genus=g3)
-        sp2 = Species(sp=u"peruviana", genus=g3)
-        sp3 = Species(sp=u"chinensis", genus=g3)
-        g4 = Genus(family=f3, genus=u'Pachystachys')
-        sp4 = Species(sp=u'coccinea', genus=g4)
+        f1 = Family(family='family1', qualifier='s. lat.')
+        g1 = Genus(family=f1, genus='genus1')
+        f2 = Family(family='family2')
+        g2 = Genus(family=f2, genus='genus2')
+        f3 = Family(family='fam3', qualifier='s. lat.')
+        g3 = Genus(family=f3, genus='Ixora')
+        sp = Species(sp="coccinea", genus=g3)
+        sp2 = Species(sp="peruviana", genus=g3)
+        sp3 = Species(sp="chinensis", genus=g3)
+        g4 = Genus(family=f3, genus='Pachystachys')
+        sp4 = Species(sp='coccinea', genus=g4)
         self.session.add_all([f1, f2, g1, g2, f3, g3, sp, sp2, sp3, g4, sp4])
         self.session.commit()
         self.ixora, self.ic, self.pc = g3, sp, sp4
@@ -918,9 +918,9 @@
 
         from bauble.plugins.plants.species import Species
         from bauble.plugins.plants.genus import Genus
-        g3 = self.session.query(Genus).filter(Genus.genus == u'Ixora').one()
-        sp5 = Species(sp=u"coccinea", genus=g3,
-                      infrasp1_rank=u'cv.', infrasp1=u'Nora Grant')
+        g3 = self.session.query(Genus).filter(Genus.genus == 'Ixora').one()
+        sp5 = Species(sp="coccinea", genus=g3,
+                      infrasp1_rank='cv.', infrasp1='Nora Grant')
         self.session.add_all([sp5])
         self.session.commit()
         s = 'Ixora coccinea'  # matches I.coccinea and Nora Grant
@@ -958,7 +958,7 @@
             root_widget_name='main_dialog')
         qb = search.QueryBuilder(view)
         qb.set_query('plant where id=0 or id=1 or id>10')
-        self.assertEquals(len(qb.expression_rows), 3)
+        self.assertEqual(len(qb.expression_rows), 3)
 
     def test_cansetenumquery(self):
         import os
@@ -969,7 +969,7 @@
             root_widget_name='main_dialog')
         qb = search.QueryBuilder(view)
         qb.set_query("accession where recvd_type = 'BBIL'")
-        self.assertEquals(len(qb.expression_rows), 1)
+        self.assertEqual(len(qb.expression_rows), 1)
 
 
 class BuildingSQLStatements(BaubleTestCase):
@@ -979,7 +979,7 @@
     def test_canfindspeciesfromgenus(self):
         'can find species from genus'
 
-        text = u'species where species.genus=genus1'
+        text = 'species where species.genus=genus1'
         sp = self.SearchParser()
         results = sp.parse_string(text)
         self.assertEqual(
@@ -1107,16 +1107,16 @@
         db.engine.execute('delete from genus_note')
         from bauble.plugins.plants.family import Family
         from bauble.plugins.plants.genus import Genus, GenusNote
-        self.family = Family(family=u'family1', qualifier=u's. lat.')
-        self.genus1 = Genus(family=self.family, genus=u'genus1')
-        self.genus2 = Genus(family=self.family, genus=u'genus2')
-        self.genus3 = Genus(family=self.family, genus=u'genus3')
-        self.genus4 = Genus(family=self.family, genus=u'genus4')
-        n1 = GenusNote(category=u'commentarii', note=u'olim', genus=self.genus1)
-        n2 = GenusNote(category=u'commentarii', note=u'erat', genus=self.genus1)
-        n3 = GenusNote(category=u'commentarii', note=u'verbum', genus=self.genus2)
-        n4 = GenusNote(category=u'test', note=u'olim', genus=self.genus3)
-        n5 = GenusNote(category=u'test', note=u'verbum', genus=self.genus3)
+        self.family = Family(family='family1', qualifier='s. lat.')
+        self.genus1 = Genus(family=self.family, genus='genus1')
+        self.genus2 = Genus(family=self.family, genus='genus2')
+        self.genus3 = Genus(family=self.family, genus='genus3')
+        self.genus4 = Genus(family=self.family, genus='genus4')
+        n1 = GenusNote(category='commentarii', note='olim', genus=self.genus1)
+        n2 = GenusNote(category='commentarii', note='erat', genus=self.genus1)
+        n3 = GenusNote(category='commentarii', note='verbum', genus=self.genus2)
+        n4 = GenusNote(category='test', note='olim', genus=self.genus3)
+        n5 = GenusNote(category='test', note='verbum', genus=self.genus3)
         self.session.add_all([self.family, self.genus1, self.genus2, self.genus3, self.genus4, n1, n2, n3, n4, n5])
         self.session.commit()
 
@@ -1183,34 +1183,34 @@
 class ParseTypedValue(BaubleTestCase):
     def test_parse_typed_value_floats(self):
         result = search.parse_typed_value('0.0')
-        self.assertEquals(result, 0.0)
+        self.assertEqual(result, 0.0)
         result = search.parse_typed_value('-4.0')
-        self.assertEquals(result, -4.0)
+        self.assertEqual(result, -4.0)
 
     def test_parse_typed_value_int(self):
         result = search.parse_typed_value('0')
-        self.assertEquals(result, 0)
+        self.assertEqual(result, 0)
         result = search.parse_typed_value('-4')
-        self.assertEquals(result, -4)
+        self.assertEqual(result, -4)
 
     def test_parse_typed_value_None(self):
         result = search.parse_typed_value('None')
-        self.assertEquals(result, None)
+        self.assertEqual(result, None)
 
     def test_parse_typed_value_empty_set(self):
         result = search.parse_typed_value('Empty')
-        self.assertEquals(type(result), search.EmptyToken)
+        self.assertEqual(type(result), search.EmptyToken)
 
     def test_parse_typed_value_fallback(self):
         result = search.parse_typed_value('whatever else')
-        self.assertEquals(result, 'whatever else')
+        self.assertEqual(result, 'whatever else')
 
 
 class EmptySetEqualityTest(unittest.TestCase):
     def test_EmptyToken_equals(self):
         et1 = search.EmptyToken()
         et2 = search.EmptyToken()
-        self.assertEquals(et1, et2)
+        self.assertEqual(et1, et2)
         self.assertTrue(et1 == et2)
         self.assertTrue(et1 == set())
 
@@ -1223,13 +1223,13 @@
 
     def test_EmptyToken_representation(self):
         et1 = search.EmptyToken()
-        self.assertEquals("%s" % et1, "Empty")
-        self.assertEquals(et1.express(), set())
+        self.assertEqual("%s" % et1, "Empty")
+        self.assertEqual(et1.express(), set())
 
     def test_NoneToken_representation(self):
         nt1 = search.NoneToken()
-        self.assertEquals("%s" % nt1, "(None<NoneType>)")
-        self.assertEquals(nt1.express(), None)
+        self.assertEqual("%s" % nt1, "(None<NoneType>)")
+        self.assertEqual(nt1.express(), None)
 
 
 class AggregatingFunctions(BaubleTestCase):
@@ -1244,21 +1244,21 @@
         db.engine.execute('delete from species')
         db.engine.execute('delete from accession')
         from bauble.plugins.plants import Family, Genus, Species
-        f1 = Family(family=u'Rutaceae', qualifier=u'')
-        g1 = Genus(family=f1, genus=u'Citrus')
-        sp1 = Species(sp=u"medica", genus=g1)
-        sp2 = Species(sp=u"maxima", genus=g1)
-        sp3 = Species(sp=u"aurantium", genus=g1)
-
-        f2 = Family(family=u'Sapotaceae')
-        g2 = Genus(family=f2, genus=u'Manilkara')
-        sp4 = Species(sp=u'zapota', genus=g2)
-        sp5 = Species(sp=u'zapotilla', genus=g2)
-        g3 = Genus(family=f2, genus=u'Pouteria')
-        sp6 = Species(sp=u'stipitata', genus=g3)
-
-        f3 = Family(family=u'Musaceae')
-        g4 = Genus(family=f3, genus=u'Musa')
+        f1 = Family(family='Rutaceae', qualifier='')
+        g1 = Genus(family=f1, genus='Citrus')
+        sp1 = Species(sp="medica", genus=g1)
+        sp2 = Species(sp="maxima", genus=g1)
+        sp3 = Species(sp="aurantium", genus=g1)
+
+        f2 = Family(family='Sapotaceae')
+        g2 = Genus(family=f2, genus='Manilkara')
+        sp4 = Species(sp='zapota', genus=g2)
+        sp5 = Species(sp='zapotilla', genus=g2)
+        g3 = Genus(family=f2, genus='Pouteria')
+        sp6 = Species(sp='stipitata', genus=g3)
+
+        f3 = Family(family='Musaceae')
+        g4 = Genus(family=f3, genus='Musa')
         self.session.add_all([f1, f2, f3, g1, g2, g3, g4,
                               sp1, sp2, sp3, sp4, sp5, sp6])
         self.session.commit()
--- ./bauble/test/test_utils.py	(original)
+++ ./bauble/test/test_utils.py	(refactored)
@@ -45,11 +45,11 @@
 
         cache = Cache(2)
         v = cache.get(1, partial(getter, 1))
-        self.assertEquals(v, 1)
-        self.assertEquals(invoked, [1])
+        self.assertEqual(v, 1)
+        self.assertEqual(invoked, [1])
         v = cache.get(1, partial(getter, 1))
-        self.assertEquals(v, 1)
-        self.assertEquals(invoked, [1])
+        self.assertEqual(v, 1)
+        self.assertEqual(invoked, [1])
 
     def test_respect_size(self):
         from bauble.utils import Cache
@@ -65,8 +65,8 @@
         cache.get(2, partial(getter, 2))
         cache.get(3, partial(getter, 3))
         cache.get(4, partial(getter, 4))
-        self.assertEquals(invoked, [1, 2, 3, 4])
-        self.assertEquals(sorted(cache.storage.keys()), [3, 4])
+        self.assertEqual(invoked, [1, 2, 3, 4])
+        self.assertEqual(sorted(cache.storage.keys()), [3, 4])
 
     def test_respect_timing(self):
         from bauble.utils import Cache
@@ -90,8 +90,8 @@
         cache.get(1, partial(getter, 1))
         sleep(0.01)
         cache.get(4, partial(getter, 4))
-        self.assertEquals(invoked, [1, 2, 3, 4])
-        self.assertEquals(sorted(cache.storage.keys()), [1, 4])
+        self.assertEqual(invoked, [1, 2, 3, 4])
+        self.assertEqual(sorted(cache.storage.keys()), [1, 4])
 
     def test_cache_on_hit(self):
         from bauble.utils import Cache
@@ -116,25 +116,25 @@
         cache.get(1, partial(getter, 1), on_hit=invoked.append)
         sleep(0.01)
         cache.get(4, partial(getter, 4), on_hit=invoked.append)
-        self.assertEquals(invoked, [1, 1, 1])
-        self.assertEquals(sorted(cache.storage.keys()), [1, 4])
+        self.assertEqual(invoked, [1, 1, 1])
+        self.assertEqual(sorted(cache.storage.keys()), [1, 4])
 
 
 class GlobalFuncs(TestCase):
     def test_safe_int_valid(self):
-        self.assertEquals(utils.safe_int('123'), 123)
+        self.assertEqual(utils.safe_int('123'), 123)
 
     def test_safe_int_valid_not(self):
-        self.assertEquals(utils.safe_int('123.2'), 0)
+        self.assertEqual(utils.safe_int('123.2'), 0)
 
     def test_safe_numeric_valid(self):
-        self.assertEquals(utils.safe_numeric('123'), 123)
+        self.assertEqual(utils.safe_numeric('123'), 123)
 
     def test_safe_numeric_valid_decimal(self):
-        self.assertEquals(utils.safe_numeric('123.2'), 123.2)
+        self.assertEqual(utils.safe_numeric('123.2'), 123.2)
 
     def test_safe_numeric_valid_not(self):
-        self.assertEquals(utils.safe_numeric('123a.2'), 0)
+        self.assertEqual(utils.safe_numeric('123a.2'), 0)
 
     def test_xml_safe_name(self):
         self.assertEqual(utils.xml_safe_name('abc'), 'abc')
@@ -142,146 +142,146 @@
         self.assertEqual(utils.xml_safe_name('{[ab]<c>}'), 'abc')
         self.assertEqual(utils.xml_safe_name(''), '_')
         self.assertEqual(utils.xml_safe_name(' '), '_')
-        self.assertEqual(utils.xml_safe_name(u'\u2069\ud8ff'), '_')
+        self.assertEqual(utils.xml_safe_name('\u2069\ud8ff'), '_')
         self.assertEqual(utils.xml_safe_name('123'), '_123')
         self.assertEqual(utils.xml_safe_name('<:>'), '_')
         self.assertEqual(utils.xml_safe_name('<picture>'), 'picture')
 
     def test_markup_italics(self):
-        self.assertEqual(utils.markup_italics('sp.'), u'sp.')
-        self.assertEqual(
-            utils.markup_italics('viminalis'), u'<i>viminalis</i>'
+        self.assertEqual(utils.markup_italics('sp.'), 'sp.')
+        self.assertEqual(
+            utils.markup_italics('viminalis'), '<i>viminalis</i>'
         )
         self.assertEqual(
             utils.markup_italics('crista-galli'),
-            u'<i>crista-galli</i>'
-        )
-        self.assertEqual(
-            utils.markup_italics(
-                u"lilliputiana \xd7 compacta \xd7 ampullacea"
-            ),
-            u'<i>lilliputiana</i> \xd7 <i>compacta</i> \xd7 <i>ampullacea</i>'
+            '<i>crista-galli</i>'
+        )
+        self.assertEqual(
+            utils.markup_italics(
+                "lilliputiana \xd7 compacta \xd7 ampullacea"
+            ),
+            '<i>lilliputiana</i> \xd7 <i>compacta</i> \xd7 <i>ampullacea</i>'
         )
         self.assertEqual(
             utils.markup_italics('sp. (Shute Harbour L.J.Webb+ 7916)'),
-            u'sp. (Shute Harbour L.J.Webb+ 7916)'
+            'sp. (Shute Harbour L.J.Webb+ 7916)'
         )
         self.assertEqual(
             utils.markup_italics('caerulea (Shute Harbour)'),
-            u'<i>caerulea</i> (Shute Harbour)'
-        )
-        self.assertEqual(
-            utils.markup_italics(
-                u"(carolinae \xd7 'Purple Star') \xd7 (compacta \xd7 sp.)"
-            ),
-            u"(<i>carolinae</i> \xd7 'Purple Star') \xd7 (<i>compacta</i> "
-            U"\xd7 sp.)"
-        )
-        self.assertEqual(
-            utils.markup_italics(
-                u"(('Gee Whizz' \xd7 'Fireball' \xd7 compacta) \xd7 "
-                u"'Purple Star') \xd7 lilliputiana"
-            ),
-            u"(('Gee Whizz' \xd7 'Fireball' \xd7 <i>compacta</i>) \xd7 "
-            u"'Purple Star') \xd7 <i>lilliputiana</i>"
-        )
-        self.assertEqual(
-            utils.markup_italics(
-                u"'Gee Whizz' \xd7 ('Fireball' \xd7 (compacta \xd7 "
-                u"'Purple Star')) \xd7 lilliputiana"
-            ),
-            u"'Gee Whizz' \xd7 ('Fireball' \xd7 (<i>compacta</i> \xd7 "
-            u"'Purple Star')) \xd7 <i>lilliputiana</i>"
-        )
-        self.assertEqual(
-            utils.markup_italics(u"carolinae \xd7 'Hot Wizz'"),
-            u"<i>carolinae</i> \xd7 'Hot Wizz'"
-        )
-        self.assertEqual(
-            utils.markup_italics(
-                u'sp. \xd7 sp. (South Molle Island J.P.GrestyAQ208995)'
-            ),
-            u'sp. \xd7 sp. (South Molle Island J.P.GrestyAQ208995)'
-        )
-        self.assertEqual(
-            utils.markup_italics(u"carolinae 'Tricolor' \xd7 compacta"),
-            u"<i>carolinae</i> 'Tricolor' \xd7 <i>compacta</i>"
-        )
-        self.assertEqual(
-            utils.markup_italics(u'carolinae \xd7 sp. (pink and red)'),
-            u'<i>carolinae</i> \xd7 sp. (pink and red)'
-        )
-        self.assertEqual(
-            utils.markup_italics(u"gymnocarpa \xd7 \xd7grandiflora"),
-            u'<i>gymnocarpa</i> \xd7 \xd7<i>grandiflora</i>'
-        )
-        self.assertEqual(
-            utils.markup_italics(u"gymnocarpa \xd7 \xd7 grandiflora"),
-            u'<i>gymnocarpa</i> \xd7 \xd7 <i>grandiflora</i>'
-        )
-        self.assertEqual(
-            utils.markup_italics(
-                u"wilsonii subsp. cryptophlebium \xd7 wilsonii subsp. wilsonii"
-            ),
-            u'<i>wilsonii</i> subsp. <i>cryptophlebium</i> \xd7 '
-            u'<i>wilsonii</i> subsp. <i>wilsonii</i>'
-        )
-        self.assertEqual(
-            utils.markup_italics(u"\xd7 grandiflora"),
-            u'\xd7 <i>grandiflora</i>'
-        )
-        self.assertEqual(
-            utils.markup_italics(u"\xd7grandiflora"),
-            u'\xd7<i>grandiflora</i>'
-        )
-        self.assertEqual(
-            utils.markup_italics(u'\u200bviminalis'),
-            u'\u200b<i>viminalis</i>'
-        )
-        self.assertEqual(
-            utils.markup_italics(
-                u"\u200b(carolinae \xd7 'Purple Star') \xd7 (compacta "
-                u"\xd7 sp.)"
-            ),
-            u"\u200b(<i>carolinae</i> \xd7 'Purple Star') \xd7 "
-            u"(<i>compacta</i> \xd7 sp.)"
-        )
-        self.assertEqual(
-            utils.markup_italics(u'\u200bcarolinae \xd7 sp. (pink and red)'),
-            u'\u200b<i>carolinae</i> \xd7 sp. (pink and red)'
-        )
-        self.assertEqual(
-            utils.markup_italics(
-                u"\u200bwilsonii subsp. cryptophlebium \xd7 wilsonii subsp. "
-                u"wilsonii"
-            ),
-            u'\u200b<i>wilsonii</i> subsp. <i>cryptophlebium</i> \xd7 '
-            u'<i>wilsonii</i> subsp. <i>wilsonii</i>'
-        )
-        self.assertEqual(
-            utils.markup_italics(u"\u200b\xd7 grandiflora"),
-            u'\u200b\xd7 <i>grandiflora</i>'
+            '<i>caerulea</i> (Shute Harbour)'
+        )
+        self.assertEqual(
+            utils.markup_italics(
+                "(carolinae \xd7 'Purple Star') \xd7 (compacta \xd7 sp.)"
+            ),
+            "(<i>carolinae</i> \xd7 'Purple Star') \xd7 (<i>compacta</i> "
+            "\xd7 sp.)"
+        )
+        self.assertEqual(
+            utils.markup_italics(
+                "(('Gee Whizz' \xd7 'Fireball' \xd7 compacta) \xd7 "
+                "'Purple Star') \xd7 lilliputiana"
+            ),
+            "(('Gee Whizz' \xd7 'Fireball' \xd7 <i>compacta</i>) \xd7 "
+            "'Purple Star') \xd7 <i>lilliputiana</i>"
+        )
+        self.assertEqual(
+            utils.markup_italics(
+                "'Gee Whizz' \xd7 ('Fireball' \xd7 (compacta \xd7 "
+                "'Purple Star')) \xd7 lilliputiana"
+            ),
+            "'Gee Whizz' \xd7 ('Fireball' \xd7 (<i>compacta</i> \xd7 "
+            "'Purple Star')) \xd7 <i>lilliputiana</i>"
+        )
+        self.assertEqual(
+            utils.markup_italics("carolinae \xd7 'Hot Wizz'"),
+            "<i>carolinae</i> \xd7 'Hot Wizz'"
+        )
+        self.assertEqual(
+            utils.markup_italics(
+                'sp. \xd7 sp. (South Molle Island J.P.GrestyAQ208995)'
+            ),
+            'sp. \xd7 sp. (South Molle Island J.P.GrestyAQ208995)'
+        )
+        self.assertEqual(
+            utils.markup_italics("carolinae 'Tricolor' \xd7 compacta"),
+            "<i>carolinae</i> 'Tricolor' \xd7 <i>compacta</i>"
+        )
+        self.assertEqual(
+            utils.markup_italics('carolinae \xd7 sp. (pink and red)'),
+            '<i>carolinae</i> \xd7 sp. (pink and red)'
+        )
+        self.assertEqual(
+            utils.markup_italics("gymnocarpa \xd7 \xd7grandiflora"),
+            '<i>gymnocarpa</i> \xd7 \xd7<i>grandiflora</i>'
+        )
+        self.assertEqual(
+            utils.markup_italics("gymnocarpa \xd7 \xd7 grandiflora"),
+            '<i>gymnocarpa</i> \xd7 \xd7 <i>grandiflora</i>'
+        )
+        self.assertEqual(
+            utils.markup_italics(
+                "wilsonii subsp. cryptophlebium \xd7 wilsonii subsp. wilsonii"
+            ),
+            '<i>wilsonii</i> subsp. <i>cryptophlebium</i> \xd7 '
+            '<i>wilsonii</i> subsp. <i>wilsonii</i>'
+        )
+        self.assertEqual(
+            utils.markup_italics("\xd7 grandiflora"),
+            '\xd7 <i>grandiflora</i>'
+        )
+        self.assertEqual(
+            utils.markup_italics("\xd7grandiflora"),
+            '\xd7<i>grandiflora</i>'
+        )
+        self.assertEqual(
+            utils.markup_italics('\u200bviminalis'),
+            '\u200b<i>viminalis</i>'
+        )
+        self.assertEqual(
+            utils.markup_italics(
+                "\u200b(carolinae \xd7 'Purple Star') \xd7 (compacta "
+                "\xd7 sp.)"
+            ),
+            "\u200b(<i>carolinae</i> \xd7 'Purple Star') \xd7 "
+            "(<i>compacta</i> \xd7 sp.)"
+        )
+        self.assertEqual(
+            utils.markup_italics('\u200bcarolinae \xd7 sp. (pink and red)'),
+            '\u200b<i>carolinae</i> \xd7 sp. (pink and red)'
+        )
+        self.assertEqual(
+            utils.markup_italics(
+                "\u200bwilsonii subsp. cryptophlebium \xd7 wilsonii subsp. "
+                "wilsonii"
+            ),
+            '\u200b<i>wilsonii</i> subsp. <i>cryptophlebium</i> \xd7 '
+            '<i>wilsonii</i> subsp. <i>wilsonii</i>'
+        )
+        self.assertEqual(
+            utils.markup_italics("\u200b\xd7 grandiflora"),
+            '\u200b\xd7 <i>grandiflora</i>'
         )
         # check tht junk doesn't crash it
         self.assertEqual(
             utils.markup_italics(
-                u'\ub0aaN\ua001\U00055483\u01d6\u059e/C\U00103e9aG|\U0010eb876'
-            ),
-            u'\ub0aaN\ua001\U00055483\u01d6\u059e/C\U00103e9aG|\U0010eb876'
+                '\ub0aaN\ua001\U00055483\u01d6\u059e/C\U00103e9aG|\U0010eb876'
+            ),
+            '\ub0aaN\ua001\U00055483\u01d6\u059e/C\U00103e9aG|\U0010eb876'
         )
         # check that mismatch brackets can produce something close to a desired
         # outcome.
         self.assertEqual(
             utils.markup_italics(
-                u"((carolinae \xd7 'Purple Star') \xd7 (compacta \xd7 sp.)"
-            ),
-            u"((<i>carolinae</i> \xd7 'Purple Star') \xd7 (compacta \xd7 sp.)"
-        )
-        self.assertEqual(
-            utils.markup_italics(
-                u"(carolinae \xd7 'Purple Star')) \xd7 (lilliputiana \xd7 "
-                u"compacta \xd7 sp.)"
-            ),
-            u"(<i>carolinae</i> \xd7 'Purple Star')) \xd7 (lilliputiana \xd7 "
-            u"<i>compacta</i> \xd7 sp.)"
-        )
+                "((carolinae \xd7 'Purple Star') \xd7 (compacta \xd7 sp.)"
+            ),
+            "((<i>carolinae</i> \xd7 'Purple Star') \xd7 (compacta \xd7 sp.)"
+        )
+        self.assertEqual(
+            utils.markup_italics(
+                "(carolinae \xd7 'Purple Star')) \xd7 (lilliputiana \xd7 "
+                "compacta \xd7 sp.)"
+            ),
+            "(<i>carolinae</i> \xd7 'Purple Star')) \xd7 (lilliputiana \xd7 "
+            "<i>compacta</i> \xd7 sp.)"
+        )
--- ./bauble/utils/__init__.py	(original)
+++ ./bauble/utils/__init__.py	(refactored)
@@ -84,7 +84,7 @@
         else:
             if len(self.storage) == self.size:
                 # remove the oldest entry
-                k = min(zip(self.storage.values(), self.storage.keys()))[1]
+                k = min(list(zip(list(self.storage.values()), list(self.storage.keys()))))[1]
                 del self.storage[k]
             value = getter()
         import time
@@ -121,9 +121,9 @@
         im.save(output, format='JPEG')
         im_data = output.getvalue()
         result = base64.b64encode(im_data)
-    except IOError, e:
+    except IOError as e:
         logger.warning("can't make thumbnail")
-    except Exception, e:
+    except Exception as e:
         logger.warning("unexpected exception making thumbnail: "
                        "(%s)%s" % (type(e), e))
     return result
@@ -165,14 +165,14 @@
                 image = Gtk.Image()
                 self.box.add(image)
             image.set_from_pixbuf(scaled_buf)
-        except GLib.GError, e:
+        except GLib.GError as e:
             logger.debug("picture %s caused GLib.GError %s" %
                          (self.url, e))
             text = _('picture file %s not found.') % self.url
             label = Gtk.Label()
             label.set_text(text)
             self.box.add(label)
-        except Exception, e:
+        except Exception as e:
             logger.warning("picture %s caused Exception %s:%s" %
                            (self.url, type(e), e))
             label = Gtk.Label()
@@ -188,7 +188,7 @@
             self.cache.get(
                 self.url, self.reader_function, on_hit=self.loader.write)
             self.loader.connect("closed", self.loader_notified)
-        except Exception, e:
+        except Exception as e:
             logger.debug("%s(%s) while loading image" % (type(e).__name__, e))
         self.loader.close()
 
@@ -201,10 +201,10 @@
 
     def read_global_url(self):
         self.loader.connect("area-prepared", self.loader_notified)
-        import urllib
+        import urllib.request, urllib.parse, urllib.error
         import contextlib
         pieces = []
-        with contextlib.closing(urllib.urlopen(self.url)) as f:
+        with contextlib.closing(urllib.request.urlopen(self.url)) as f:
             for piece in read_in_chunks(f, 4096):
                 self.loader.write(piece)
                 pieces.append(piece)
@@ -282,7 +282,7 @@
     def load(cls, filename):
         """
         """
-        if filename in cls.builders.keys():
+        if filename in list(cls.builders.keys()):
             return cls.builders[filename]
         b = Gtk.Builder()
         b.add_from_file(filename)
@@ -300,7 +300,7 @@
         '''
         :params filename: a Gtk.Builder XML UI file
         '''
-        if isinstance(ui, basestring):
+        if isinstance(ui, str):
             self.builder = Gtk.Builder()
             self.builder.add_from_file(ui)
         else:
@@ -393,7 +393,7 @@
     ncols = model.get_n_columns()
 
     def del_cb(model, path, iter, data=None):
-        for c in xrange(0, ncols):
+        for c in range(0, ncols):
             v = model.get_value(iter, c)
             del v
         del iter
@@ -771,7 +771,7 @@
         if values is None:
             values = []
         model = Gtk.ListStore(str)
-        map(lambda v: model.append([v]), values)
+        list(map(lambda v: model.append([v]), values))
 
     combo.clear()
     combo.set_model(model)
@@ -856,9 +856,9 @@
     :param date_func: the function that returns a string represention
       of the date
     """
-    if isinstance(entry, basestring):
+    if isinstance(entry, str):
         entry = view.widgets[entry]
-    if isinstance(button, basestring):
+    if isinstance(button, str):
         button = view.widgets[button]
     icon = os.path.join(paths.lib_dir(), 'images', 'calendar.png')
     image = Gtk.Image()
@@ -885,14 +885,14 @@
     object it will not try to decode it to converted it to <encoding>
     but will just return the original obj
     """
-    if isinstance(obj, basestring):
-        if not isinstance(obj, unicode):
-            obj = unicode(obj, encoding)
+    if isinstance(obj, str):
+        if not isinstance(obj, str):
+            obj = str(obj, encoding)
     else:
         try:
-            obj = unicode(obj, encoding)
+            obj = str(obj, encoding)
         except Exception:
-            obj = unicode(str(obj), encoding)
+            obj = str(str(obj), encoding)
     return obj
 
 
@@ -935,20 +935,20 @@
     if not uni:
         return '_'
 
-    start_char = (ur'[A-Z]|[_]|[a-z]|\xc0-\xd6]|[\xd8-\xf6]|[\xf8-\xff]|'
-                  ur'[\u0100-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|'
-                  ur'[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|'
-                  ur'[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|')
+    start_char = (r'[A-Z]|[_]|[a-z]|\xc0-\xd6]|[\xd8-\xf6]|[\xf8-\xff]|'
+                  r'[\u0100-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|'
+                  r'[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|'
+                  r'[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|')
     # depending on a ucs-2 or ucs-4 build python
-    start_char_ucs4 = start_char + ur'[\U00010000-\U000EFFFF]'
-    name_start_char_ucs4 = ur'(' + start_char_ucs4 + ur')'
-    name_char = (ur'(' + start_char_ucs4 +
-                 ur'|[-.0-9\xb7\u0337-\u036f\u203f-\u2040])')
-
-    start_char_ucs2 = start_char + ur'[\uD800-\uDBFF][\uDC00-\uDFFF]'
-    name_start_char_ucs2 = ur'(' + start_char_ucs2 + ur')'
-    name_char_ucs2 = (ur'(' + start_char_ucs2 +
-                      ur'|[-.0-9\xb7\u0337-\u036f\u203f-\u2040])')
+    start_char_ucs4 = start_char + r'[\U00010000-\U000EFFFF]'
+    name_start_char_ucs4 = r'(' + start_char_ucs4 + r')'
+    name_char = (r'(' + start_char_ucs4 +
+                 r'|[-.0-9\xb7\u0337-\u036f\u203f-\u2040])')
+
+    start_char_ucs2 = start_char + r'[\uD800-\uDBFF][\uDC00-\uDFFF]'
+    name_start_char_ucs2 = r'(' + start_char_ucs2 + r')'
+    name_char_ucs2 = (r'(' + start_char_ucs2 +
+                      r'|[-.0-9\xb7\u0337-\u036f\u203f-\u2040])')
     try:
         first_char = re.match(name_start_char_ucs4, uni[0])
     except re.error:
@@ -976,7 +976,7 @@
       cross/multipy symbol
     """
     # break apart the name parts
-    prts = tax.split(u"×")
+    prts = tax.split("×")
     len_prts = len(prts)
     left = right = find = found = 0
     result = []
@@ -993,26 +993,26 @@
             if found == find:
                 right = i + 1
         if right:
-            result.append(u''.join(
-                j for j in prts[left-1:right]).strip().replace('  ', u' × '))
+            result.append(''.join(
+                j for j in prts[left-1:right]).strip().replace('  ', ' × '))
             left = right = find = found = 0
         elif left == right == find == found == 0:
             result.append(prt)
         # what if we hit the end and still haven't found the matching bracket?
         # Just return what we can.
         elif i == len_prts - 1:
-            result.append(u''.join(
-                j for j in prts[left-1:]).strip().replace('  ', u' × '))
+            result.append(''.join(
+                j for j in prts[left-1:]).strip().replace('  ', ' × '))
 
     # if have a bracketed part remove the outer brackets and parse that else
     # return the part italicised
     italicize_part = lambda prt: (  # noqa: E731
-        u'({})'.format(markup_italics(prt[1:-1]))
+        '({})'.format(markup_italics(prt[1:-1]))
         if prt.startswith('(') and prt.endswith(')') else
         markup_italics(prt)
     )
     # recompile adding the cross symbols back
-    return u''.join([italicize_part(i) + u' × ' for i in result])[:-3]
+    return ''.join([italicize_part(i) + ' × ' for i in result])[:-3]
 
 
 def markup_italics(tax):
@@ -1022,9 +1022,9 @@
     :param tax: the taxon name as a unicode string
     """
     # store the zws to reapply later (if used)
-    if tax.startswith(u'\u200b'):
-        start = u'\u200b'
-        tax = tax.strip(u'\u200b')
+    if tax.startswith('\u200b'):
+        start = '\u200b'
+        tax = tax.strip('\u200b')
     else:
         start = ''
 
@@ -1032,54 +1032,54 @@
     result = ''
     # simple sp.
     if tax == 'sp.':
-        result = u'{}'.format(tax)
+        result = '{}'.format(tax)
     # simple species
     elif re.match(r'^[a-z-]+$', tax):
-        result = u'<i>{}</i>'.format(tax)
+        result = '<i>{}</i>'.format(tax)
     # simple species hybrids (lowercase words separated by a multiplication
     # symbol)
-    elif re.match(u'^[a-z-]+( × [a-z-]+)*$', tax):
-        result = u'<i>{}</i>'.format(tax).replace(u' × ', u'</i> × <i>')
+    elif re.match('^[a-z-]+( × [a-z-]+)*$', tax):
+        result = '<i>{}</i>'.format(tax).replace(' × ', '</i> × <i>')
     # simple cultivar (starts and ends with a ' and can be almost have anything
     # between (except further quote symbols or multiplication symbols
-    elif re.match(u"^'[^×\'\"]+'$", tax):
-        result = u'{}'.format(tax)
+    elif re.match("^'[^×\'\"]+'$", tax):
+        result = '{}'.format(tax)
     # simple infraspecific hybrid with nothospecies name
-    elif re.match(u'^×[a-z-]+$', tax):
-        result = u'{}<i>{}</i>'.format(tax[0], tax[1:])
+    elif re.match('^×[a-z-]+$', tax):
+        result = '{}<i>{}</i>'.format(tax[0], tax[1:])
     # simple provisory or descriptor sp.
-    elif re.match(u'^sp. \([^×]+\)$', tax):  # pylint: disable=line-too-long,anomalous-backslash-in-string; # noqa
-        result = u'{}'.format(tax)
+    elif re.match('^sp. \([^×]+\)$', tax):  # pylint: disable=line-too-long,anomalous-backslash-in-string; # noqa
+        result = '{}'.format(tax)
     # simple descriptor (brackets surrounding anything without a multiplication
     # symbol)
-    elif re.match(u'^\([^×]*\)$', tax):  # pylint: disable=line-too-long,anomalous-backslash-in-string; # noqa
-        result = u'{}'.format(tax)
+    elif re.match('^\([^×]*\)$', tax):  # pylint: disable=line-too-long,anomalous-backslash-in-string; # noqa
+        result = '{}'.format(tax)
 
     # recursive parts
     # species with descriptor (part with only lower letters + space + bracketed
     # section)
-    elif re.match(u'^[a-z-]+ \([^×]+\)$', tax):  # pylint: disable=line-too-long,anomalous-backslash-in-string; # noqa
-        result = u''.join(
-            [markup_italics(i) + u' ' for i in tax.split(' ', 1)]
+    elif re.match('^[a-z-]+ \([^×]+\)$', tax):  # pylint: disable=line-too-long,anomalous-backslash-in-string; # noqa
+        result = ''.join(
+            [markup_italics(i) + ' ' for i in tax.split(' ', 1)]
         )[:-1]
     # complex hybrids (contains brackets surounding 2 phrases seperated by a
     # multipy symbol) These need to be reduce to less and less complex hybrids.
-    elif re.search(u'\(.+×.+\)', tax):  # pylint: disable=line-too-long,anomalous-backslash-in-string; # noqa
-        result = u'{}'.format(complex_hyb(tax))
+    elif re.search('\(.+×.+\)', tax):  # pylint: disable=line-too-long,anomalous-backslash-in-string; # noqa
+        result = '{}'.format(complex_hyb(tax))
     # any other type of hybrid (i.e. cv to species, provisory to cv, etc..) try
     # breaking it apart and italicizing the parts
-    elif re.match(u'.+ × .+', tax):
-        parts = [i.strip() for i in tax.split(u' × ')]
-        result = u''.join([markup_italics(i) + u' × ' for i in parts])[:-3]
+    elif re.match('.+ × .+', tax):
+        parts = [i.strip() for i in tax.split(' × ')]
+        result = ''.join([markup_italics(i) + ' × ' for i in parts])[:-3]
     # anything else with spaces in it. Break them off one by one and try
     # identify the parts.
     elif ' ' in tax:
-        result = u''.join(
-            [markup_italics(i) + u' ' for i in tax.split(' ', 1)]
+        result = ''.join(
+            [markup_italics(i) + ' ' for i in tax.split(' ', 1)]
         )[:-1]
     # lastly, what to do if we just don't know... (infraspecific ranks etc.)
     else:
-        result = u'{}'.format(tax)
+        result = '{}'.format(tax)
 
     result = result.strip()
     return start + result
@@ -1204,7 +1204,7 @@
             stmt = "SELECT setval('%s', max(%s)+1) from %s;" \
                 % (sequence_name, column.name, column.table.name)
         conn.execute(stmt)
-    except Exception, e:
+    except Exception as e:
         logger.warning('bauble.utils.reset_sequence(): %s' % utf8(e))
         trans.rollback()
     else:
@@ -1310,7 +1310,7 @@
     token = None
     try:
         tokens = range_list.parseString(text)
-    except (AttributeError, ParseException), e:
+    except (AttributeError, ParseException) as e:
         logger.debug("%s(%s)" % (type(e).__name__, e))
         return []
     values = set()
@@ -1320,7 +1320,7 @@
             start = int(rng[0])
             end = int(rng[1]) + 1
             check(start < end, 'start must be less than end')
-            values.update(range(start, end))
+            values.update(list(range(start, end)))
         else:
             # get here if the token is an integer
             values.add(int(rng))
@@ -1333,7 +1333,7 @@
     """
     import inspect
     import gc
-    if isinstance(tipe, basestring):
+    if isinstance(tipe, str):
         return [o for o in gc.get_objects() if type(o).__name__ == tipe]
     elif inspect.isclass(tipe):
         return [o for o in gc.get_objects() if isinstance(o, tipe)]
@@ -1403,7 +1403,7 @@
 
     # Step 2 - find all roots (nodes with zero incoming arcs).
 
-    roots = [node for (node, nodeinfo) in graph.items() if nodeinfo[0] == 0]
+    roots = [node for (node, nodeinfo) in list(graph.items()) if nodeinfo[0] == 0]
 
     # step 3 - repeatedly emit a root and remove it from the graph. Removing
     # a node may convert some of the node's direct children into roots.
@@ -1433,7 +1433,7 @@
                 roots.append(child)
         del graph[root]
 
-    if len(graph.items()) != 0:
+    if len(list(graph.items())) != 0:
         # There is a loop in the input.
         return None
 
@@ -1660,7 +1660,7 @@
 
     table = obj.__table__
     invalid_columns = []
-    for column in filter(lambda c: c.name not in ignore_columns, table.c):
+    for column in [c for c in table.c if c.name not in ignore_columns]:
         v = getattr(obj, column.name)
         #debug('%s.%s = %s' % (table.name, column.name, v))
         if v is None and not column.nullable:
--- ./bauble/utils/desktop.py	(original)
+++ ./bauble/utils/desktop.py	(refactored)
@@ -118,7 +118,7 @@
         return opener.poll() == 0
 
 
-import commands
+import subprocess
 
 #
 # Private functions.
@@ -252,7 +252,7 @@
     desktop_in_use = use_desktop(desktop)
     cmd = None
     if desktop_in_use == "standard":
-        arg = "".join([os.environ["DESKTOP_LAUNCH"], commands.mkarg(url)])
+        arg = "".join([os.environ["DESKTOP_LAUNCH"], subprocess.mkarg(url)])
         return _run(arg, 1, wait)
 
     elif desktop_in_use == "Windows":
@@ -279,10 +279,10 @@
     try:
         if not cmd:
             # TODO: maybe we should tell the user to define DESKTOP_LAUNCH
-            raise OSError, _("Could not open %(url)s\n\n"
+            raise OSError(_("Could not open %(url)s\n\n"
                              "Unknown desktop environment: %(desktop)s\n\n") \
-                % dict(url=url, desktop=desktop_in_use)
-    except Exception, e:
+                % dict(url=url, desktop=desktop_in_use))
+    except Exception as e:
         if dialog_on_error:
             utils.message_dialog(utils.utf8(e))
         else:
--- ./bauble/utils/test.py	(original)
+++ ./bauble/utils/test.py	(refactored)
@@ -84,7 +84,7 @@
 
         root = model.get_iter_root()
         results = utils.search_tree_model(model[root], 'something')
-        self.assert_(sorted([model.get_path(r) for r in results]),
+        self.assertTrue(sorted([model.get_path(r) for r in results]),
                      sorted(to_find))
 
 
@@ -103,10 +103,10 @@
 
         import re
         assert re.match('&lt;.*?&gt;', utils.xml_safe(str(test())))
-        assert re.match('&lt;.*?&gt;', utils.xml_safe(unicode(test())))
+        assert re.match('&lt;.*?&gt;', utils.xml_safe(str(test())))
         assert utils.xml_safe('test string') == 'test string'
-        assert utils.xml_safe(u'test string') == u'test string'
-        assert utils.xml_safe(u'test< string') == u'test&lt; string'
+        assert utils.xml_safe('test string') == 'test string'
+        assert utils.xml_safe('test< string') == 'test&lt; string'
         assert utils.xml_safe('test< string') == 'test&lt; string'
 
 
@@ -131,23 +131,23 @@
     def test_get_urls(self):
         text = 'There a link in here: http://bauble.belizebotanic.org'
         urls = utils.get_urls(text)
-        self.assert_(urls == [(None, 'http://bauble.belizebotanic.org')], urls)
+        self.assertTrue(urls == [(None, 'http://bauble.belizebotanic.org')], urls)
 
         text = 'There a link in here: http://bauble.belizebotanic.org '\
                'and some text afterwards.'
         urls = utils.get_urls(text)
-        self.assert_(urls == [(None, 'http://bauble.belizebotanic.org')], urls)
+        self.assertTrue(urls == [(None, 'http://bauble.belizebotanic.org')], urls)
 
         text = 'There is a link here: http://bauble.belizebotanic.org '\
                'and here: https://belizebotanic.org and some text afterwards.'
         urls = utils.get_urls(text)
-        self.assert_(urls == [(None, 'http://bauble.belizebotanic.org'),
+        self.assertTrue(urls == [(None, 'http://bauble.belizebotanic.org'),
                               (None, 'https://belizebotanic.org')], urls)
 
         text = 'There a labeled link in here: '\
                '[BBG]http://bauble.belizebotanic.org and some text afterwards.'
         urls = utils.get_urls(text)
-        self.assert_(urls == [('BBG', 'http://bauble.belizebotanic.org')],
+        self.assertTrue(urls == [('BBG', 'http://bauble.belizebotanic.org')],
                      urls)
 
 
@@ -183,23 +183,23 @@
 
         # tables that depend on table 1 are 3, 4, 2
         depends = list(utils.find_dependent_tables(table1, metadata))
-        print 'table1: %s' % [table.name for table in depends]
-        self.assert_(list(depends) == [table2, table4, table3])
+        print('table1: %s' % [table.name for table in depends])
+        self.assertTrue(list(depends) == [table2, table4, table3])
 
         # tables that depend on table 2 are 3, 4
         depends = list(utils.find_dependent_tables(table2, metadata))
-        print 'table2: %s' % [table.name for table in depends]
-        self.assert_(depends == [table4, table3])
+        print('table2: %s' % [table.name for table in depends])
+        self.assertTrue(depends == [table4, table3])
 
         # no tables depend on table 3
         depends = list(utils.find_dependent_tables(table3, metadata))
-        print 'table3: %s' % [table.name for table in depends]
-        self.assert_(depends == [])
+        print('table3: %s' % [table.name for table in depends])
+        self.assertTrue(depends == [])
 
         # table that depend on table 4 are 3
         depends = list(utils.find_dependent_tables(table4, metadata))
-        print 'table4: %s' % [table.name for table in depends]
-        self.assert_(depends == [table3])
+        print('table4: %s' % [table.name for table in depends])
+        self.assertTrue(depends == [table3])
 
 
 class ResetSequenceTests(BaubleTestCase):
@@ -276,7 +276,7 @@
             table.insert().values(id=i).execute()
         utils.reset_sequence(table.c.id)
         currval = self.get_currval(table.c.id)
-        self.assert_(currval > rangemax, currval)
+        self.assertTrue(currval > rangemax, currval)
 
 from bauble.utils import topological_sort
 
@@ -292,18 +292,18 @@
         self.assertTrue('a' in r)
         self.assertTrue('b' in r)
         self.assertTrue('c' in r)
-        self.assertEquals(r.pop(), 'c')
-        self.assertEquals(r.pop(), 'b')
-        self.assertEquals(r.pop(), 'a')
+        self.assertEqual(r.pop(), 'c')
+        self.assertEqual(r.pop(), 'b')
+        self.assertEqual(r.pop(), 'a')
 
     def test_partial_dependencies(self):
         r = topological_sort(['b', 'e'], [('a', 'b'), ('b', 'c'), ('b', 'd')])
-        print r
+        print(r)
         self.assertTrue('e' in r)
         r.remove('e')
         any = set([r.pop(), r.pop()])
-        self.assertEquals(any, set(['c', 'd']))
-        self.assertEquals(r.pop(), 'b')
+        self.assertEqual(any, set(['c', 'd']))
+        self.assertEqual(r.pop(), 'b')
         #self.assertEquals(r, [])
 
     def test_empty_input_full_dependencies(self):
--- ./bauble/utils/web.py	(original)
+++ ./bauble/utils/web.py	(refactored)
@@ -54,7 +54,7 @@
     _space = "_"
     title = _("Search")
     tooltip = None
-    pt = re.compile(ur'%\(([a-z_\.]*)\)s')
+    pt = re.compile(r'%\(([a-z_\.]*)\)s')
 
     def __init__(self, title=_("Search"), tooltip=None):
         super(BaubleLinkButton, self).__init__("", self.title)
--- ./doc/conf.py	(original)
+++ ./doc/conf.py	(refactored)
@@ -57,9 +57,9 @@
 master_doc = 'index'
 
 # General information about the project.
-project = u'Ghini'
-copyright = u'2004-2017 bauble.classic & 2015-2017 ghini.desktop contributors'
-author = u'Mario Frasca'
+project = 'Ghini'
+copyright = '2004-2017 bauble.classic & 2015-2017 ghini.desktop contributors'
+author = 'Mario Frasca'
 
 # The version info for the project you're documenting, acts as replacement for
 # |version| and |release|, also used in various other places throughout the
@@ -234,8 +234,8 @@
 # (source start file, target name, title,
 #  author, documentclass [howto, manual, or own class]).
 latex_documents = [
-    (master_doc, 'Bauble.tex', u'Bauble Documentation',
-     u'Brett Adams', 'manual'),
+    (master_doc, 'Bauble.tex', 'Bauble Documentation',
+     'Brett Adams', 'manual'),
 ]
 
 # The name of an image file (relative to this directory) to place at the top of
@@ -264,7 +264,7 @@
 # One entry per manual page. List of tuples
 # (source start file, name, description, authors, manual section).
 man_pages = [
-    (master_doc, 'bauble', u'Bauble Documentation',
+    (master_doc, 'bauble', 'Bauble Documentation',
      [author], 1)
 ]
 
@@ -278,7 +278,7 @@
 # (source start file, target name, title, author,
 #  dir menu entry, description, category)
 texinfo_documents = [
-    (master_doc, 'Bauble', u'Bauble Documentation',
+    (master_doc, 'Bauble', 'Bauble Documentation',
      author, 'Bauble', 'One line description of project.',
      'Miscellaneous'),
 ]
--- ./scripts/bauble-upgrade-0.6-to-0.7.py	(original)
+++ ./scripts/bauble-upgrade-0.6-to-0.7.py	(refactored)
@@ -43,7 +43,7 @@
 
 # a directory full of CSV text files exported from Bauble 0.6
 src_path = None
-print args
+print(args)
 if len(args) == 0:
     src_path = os.getcwd()
 else:
@@ -63,14 +63,14 @@
 
 major, minor, rev = bauble.version
 if minor != 6:
-    print '** Error: This script will only upgrade from bauble 0.6'
+    print('** Error: This script will only upgrade from bauble 0.6')
     sys.exit(1)
 
 
 def quote(s):
     if s is None:
         return ''
-    elif isinstance(s, (str, unicode)):
+    elif isinstance(s, str):
         return '"%s"' % s
     return '%s' % s
 
@@ -85,13 +85,13 @@
 
 
 def migrate_idqual():
-    print 'migrating idqual'
+    print('migrating idqual')
     # select all species that have idqual set
     #species = species.select(id_qual != None)
     sp_results = select([species_table.c.id, species_table.c.id_qual],
                         species_table.c.id_qual != None).execute()
 #    print sp_results
-    acc_cols = accession_table.c.keys()
+    acc_cols = list(accession_table.c.keys())
     new_cols = acc_cols[:]
     new_cols.append('id_qual')
     rows = []
@@ -115,7 +115,7 @@
 
     # copy the species and remove the id_qaul column
     rows = []
-    sp_cols = species_table.c.keys()
+    sp_cols = list(species_table.c.keys())
     sp_cols.remove('id_qual')
     rows.append(sp_cols)
     for sp in species_table.select().execute():
@@ -173,5 +173,5 @@
              'plant_history.txt', 'vernacular_name.txt', 'donation.txt',
              'plant.txt']
 for f in copy_list:
-    print 'copying %s' % f
+    print('copying %s' % f)
     shutil.copy(os.path.join(src_path, f), dst_path)
--- ./scripts/bauble-upgrade-0.9-to-1.0.py	(original)
+++ ./scripts/bauble-upgrade-0.9-to-1.0.py	(refactored)
@@ -16,9 +16,9 @@
 
 import bauble
 if bauble.version_tuple[0] != '1' and bauble.version_tuple[1] != '0':
-    print "Bauble 1.0 must be installed"
-    print bauble.version
-    print bauble.version_tuple
+    print("Bauble 1.0 must be installed")
+    print(bauble.version)
+    print(bauble.version_tuple)
     sys.exit(1)
 
 import bauble.utils as utils
@@ -33,7 +33,7 @@
 (options, args) = parser.parse_args()
 
 if not args:
-    print parser.error('a directory with a dumped CSV files is required')
+    print(parser.error('a directory with a dumped CSV files is required'))
 
 
 
@@ -53,7 +53,7 @@
 if os.path.exists(dst_path) and options.force:
     shutil.rmtree(dst_path)
 elif os.path.exists(dst_path):
-    response = raw_input('%s exists.  Would you like to delete it? ' \
+    response = input('%s exists.  Would you like to delete it? ' \
                              % dst_path)
     if response in ('y', 'Y'):
         shutil.rmtree(dst_path)
@@ -172,8 +172,8 @@
         if line['sp_hybrid']:
             hybrid = True
             if line['infrasp_rank'] or line['infrasp_author']:
-                print '**', line['sp'], line['infrasp'], line['infrasp_rank'], \
-                    line['infrasp_author']
+                print('**', line['sp'], line['infrasp'], line['infrasp_rank'], \
+                    line['infrasp_author'])
             sp2 = line['infrasp']
             infrasp1 = None
         else:
@@ -413,7 +413,7 @@
     """
     Do nothing with the file, not even copy it.
     """
-    print '- skipping'
+    print('- skipping')
 
 
 file_map = {'accession.txt': do_accession,
@@ -446,9 +446,9 @@
 # for each text file in src_path call the appropriate entry in file_map
 for f in glob.glob(os.path.join(src_path, "*.txt")):
     basename = os.path.basename(f)
-    print basename
+    print(basename)
     if basename not in file_map:
-        print "** don't know what to do with: %s" % f
+        print("** don't know what to do with: %s" % f)
         sys.exit(1)
     if not file_map[basename]:
         shutil.copy(f, dst_path)
--- ./scripts/bgci_csv.py	(original)
+++ ./scripts/bgci_csv.py	(refactored)
@@ -60,14 +60,14 @@
 
 conn_str = ' '.join(connect_args)
 if options.verbose:
-    print conn_str
+    print(conn_str)
 conn = dbapi.connect(conn_str)
 cursor = conn.cursor()
 
 sql = "select distinct g.hybrid, g.genus, s.sp_hybrid, s.sp, s.infrasp_rank, s.infrasp from genus as g, species as s, accession as a, plant as p where s.genus_id = g.id and a.species_id = s.id and p.accession_id = a.id and p.acc_status='Living accession' and s.sp != 'sp' and s.sp != 'spp' and s.sp != 'sp.' and s.sp != 'spp.' order by g.genus, s.sp;"
 
 if options.verbose:
-    print '- %s' % sql
+    print('- %s' % sql)
 
 cursor.execute(sql)
 rows = cursor.fetchall()
@@ -82,15 +82,15 @@
         line.append(line[SP_INFRASP])
     else:
         line.append(None)
-    print ','.join(['%s' % (col or '') for col in line])
+    print(','.join(['%s' % (col or '') for col in line]))
 
 if options.verbose:
-    print '%s results' % cursor.rowcount
+    print('%s results' % cursor.rowcount)
 
 if options.verbose:
-    print '** Warning: the output from this file is not suitable for '\
+    print('** Warning: the output from this file is not suitable for '\
           'importing into the BGCI Plant Search when the verbose output (-v) '\
-          'option is enabled.'
+          'option is enabled.')
 
 def main():
     pass
--- ./scripts/bump_version.py	(original)
+++ ./scripts/bump_version.py	(refactored)
@@ -39,9 +39,9 @@
 
 
 def usage_and_exit(msg=None):
-    print >>sys.stderr, usage
+    print(usage, file=sys.stderr)
     if msg:
-        print >>sys.stderr, msg
+        print(msg, file=sys.stderr)
     sys.exit(1)
 
 if len(sys.argv) != 2:
@@ -90,17 +90,17 @@
     # TODO; make sure that there is only one instance of
     # version=some_version in a file...don't have to if we can add
     # :bump somewhere in the comment on the same line
-    if isinstance(rx, basestring):
+    if isinstance(rx, str):
         rx = re.compile(rx)
 
-    from StringIO import StringIO
+    from io import StringIO
     buf = StringIO()
     for line in open(filename, 'r'):
         match = rx.match(line)
         if match:
             s = rx.sub(r'\1%s\2', line)
             line = s % version
-            print ('%s: %s' % (filename, line)).strip()
+            print(('%s: %s' % (filename, line)).strip())
         buf.write(line)
 
     f = open(filename, 'w')
@@ -143,8 +143,8 @@
 bump_file(os.path.join(root_of_clone(), 'scripts/build-multiuser.nsi'), rx)
 
 # TODO: commit the changes
-print
-print('git commit -m "bumping_to_%s" '
+print()
+print(('git commit -m "bumping_to_%s" '
       'bauble/version.py '
       'doc/conf.py '
       'data/ghini.desktop '
@@ -152,7 +152,7 @@
       'scripts/installer.cfg '
       'scripts/build-multiuser.nsi '
       '.appveyor.yml'
-      % version)
-print
-print 'after appveyor creates the release, you can get the version tag with:'
-print 'git fetch'
+      % version))
+print()
+print('after appveyor creates the release, you can get the version tag with:')
+print('git fetch')
--- ./scripts/chklist2csv.py	(original)
+++ ./scripts/chklist2csv.py	(refactored)
@@ -77,7 +77,7 @@
         dict = {}
         #Joy: all the attributes in a class are already in __dict__
         privatePrefix = "_" + self.__class__.__name__
-        for elem in self.__dict__.keys():
+        for elem in list(self.__dict__.keys()):
             if elem.find(privatePrefix) == 0:
                 continue
                 #We discard private variables, which are automatically
@@ -88,7 +88,7 @@
                     #dict[elem] = self.__dict__[elem].encode("latin-1")
                     dict[elem] = self.__dict__[elem]
                 except Exception:
-                    print dict[elem]
+                    print(dict[elem])
 
                 #dict[elem] = str(self.__dict__[elem]).encode("latin-1")
         return dict
@@ -129,8 +129,8 @@
                    field(self.species_author) + ft + \
                    field(self.infrasp_rank)  + ft + \
                    field(self.infrasp) + ft + field(self.infrasp_author)
-        except UnicodeDecodeError, e:
-            print sys.stderr.write(e)
+        except UnicodeDecodeError as e:
+            print(sys.stderr.write(e))
             raise
 
         # there are no cultivars in the belize checklist
@@ -161,7 +161,7 @@
     gen_dict[line[2]] = line[0]
 
 # print out a first line since it will be skipped
-print plantname_columns
+print(plantname_columns)
 family = None
 for line in open(checklist_file).readlines():
     line = line.strip()
@@ -186,12 +186,12 @@
         continue # skip Prescottia sp. style names
     else:
         p.genus = int(gen_dict[p.genus])
-        print p.csv()
+        print(p.csv())
 
 
 if len(missing) > 0:
     sys.stderr.write("******* could not find the following genera *******\n")
-for gen, sp in missing.iteritems():
+for gen, sp in missing.items():
     sys.stderr.write('%s: %s\n' % (gen, sp))
 
 
--- ./scripts/csv2json.py	(original)
+++ ./scripts/csv2json.py	(refactored)
@@ -104,7 +104,7 @@
 
 
 import sys
-print("invoked with args:", sys.argv)
+print(("invoked with args:", sys.argv))
 
 #input_file_name = '/tmp/species.csv'
 input_file_name = sys.argv[1]
@@ -121,7 +121,7 @@
 family_name = re.compile(r'^[A-Z][a-z]*aceae$')
 
 for r in csv.reader(open(input_file_name)):
-    obj = dict(zip(header, [i.strip() for i in r]))
+    obj = dict(list(zip(header, [i.strip() for i in r])))
     for key in family_hidden:
         obj['family'] = ''
         if family_name.match(obj[key]):
@@ -145,7 +145,7 @@
             obj['lat'], obj['lon'] = float(obj[northing_key]), float(obj[easting_key])
     k.append(obj)
 
-print count, skipped
+print(count, skipped)
 
 # first produce the taxomomy
 
@@ -197,7 +197,7 @@
             return int(v)
         except:
             return 0
-    obj = dict((k, smart_int(v)) for (k, v) in obj.items())
+    obj = dict((k, smart_int(v)) for (k, v) in list(obj.items()))
     return accession_code_def % obj
 
 # now accessions, plants, and relative notes.
@@ -237,5 +237,5 @@
         out.write('[\n ')
         out.write(',\n '.join(formatted_json))
         out.write(']')
-except Exception, e:
-    print(type(e).__name__, e)
+except Exception as e:
+    print((type(e).__name__, e))
--- ./scripts/csvexporttojson.py	(original)
+++ ./scripts/csvexporttojson.py	(refactored)
@@ -86,9 +86,9 @@
     then we pull things out of the set and we produce the output.
     '''
 
-    import ConfigParser
+    import configparser
     import codecs
-    config = ConfigParser.RawConfigParser()
+    config = configparser.RawConfigParser()
     config.readfp(codecs.open(config_file, 'r', 'utf-8'))
 
     input_stream = codecs.open(args.input)
@@ -96,13 +96,13 @@
 
     r = csv.reader(input_stream)
 
-    header = r.next()
+    header = next(r)
     # we don't want to repeat items, so we are storing the objects in a set.
     # they must be tuples because they must be indexable.
     result = set()
     for line in r:
 
-        record = dict(zip(header, line))
+        record = dict(list(zip(header, line)))
 
         ## the following is still hard coded and should be done otherwise
         for k in ['Genero', 'Subtribu', 'Tribu',
--- ./scripts/csvplantlocation2json.py	(original)
+++ ./scripts/csvplantlocation2json.py	(refactored)
@@ -30,7 +30,7 @@
 result = []
 
 for r in csv.reader(open(input_file_name)):
-    obj = dict(zip(header, [i.strip() for i in r]))
+    obj = dict(list(zip(header, [i.strip() for i in r])))
     code = obj['Numeración']
     plant = {"accession": code, "code": "1", "location": "INV4", "object": "plant"}
     if obj['Condición fitosanitaria'] == 'Muerta':
--- ./scripts/dupid.py	(original)
+++ ./scripts/dupid.py	(refactored)
@@ -21,7 +21,7 @@
 
 
 if len(sys.argv) < filename_arg+1:
-    print '** you have to supply a filename'
+    print('** you have to supply a filename')
     sys.exit(1)
 
 
@@ -29,7 +29,7 @@
 ids = set()
 
 filename = sys.argv[filename_arg]
-print "duplicates in %s: " % filename
+print("duplicates in %s: " % filename)
 tree = etree.parse(filename)
 for el in tree.getiterator():
     elid = el.get('id')
@@ -42,9 +42,9 @@
                 newid = '%s%s' % (elid, str(random.randint(0, 99)))
             ids.add(newid)
             el.set('id', newid)
-            print '%s = %s' % (elid, newid)
+            print('%s = %s' % (elid, newid))
         else:
-            print elid
+            print(elid)
 if overwrite:
     tree.write('%s.dupid' % filename, encoding='utf8')
 
--- ./scripts/gen_model_doc.py	(original)
+++ ./scripts/gen_model_doc.py	(refactored)
@@ -33,7 +33,7 @@
 pluginmgr.init(True)
 
 def column_type_str(col):
-    print type(col)
+    print(type(col))
     if isinstance(col, sa.String):
         return 'string'
     elif isinstance(col, sa.Unicode):
@@ -79,47 +79,47 @@
 <ul>%s</ul>'''
 join_template = '''<li>%s</li>'''
 
-print html_head
+print(html_head)
 
 classes = {}
 for strategy in view.SearchView.search_strategies:
     if not isinstance(strategy, view.MapperSearch):
         continue
     domains = strategy._domains
-    for domain, detail in domains.iteritems():
+    for domain, detail in domains.items():
         dom, c = classes.setdefault(detail[0], ([], detail[1]))
         dom.append(domain)
-    for cls, data in classes.iteritems():
+    for cls, data in classes.items():
         mapper = class_mapper(cls)
-        print '<h1>%s</h1>' % mapper.local_table.name
+        print('<h1>%s</h1>' % mapper.local_table.name)
         domains, cols = data
-        print '<p>search domain(s): %s</p>' % ', '.join(domains)
-        print '<p>default search column(s): %s</p>' % ', '.join(cols)
+        print('<p>search domain(s): %s</p>' % ', '.join(domains))
+        print('<p>default search column(s): %s</p>' % ', '.join(cols))
 
-        print '<h2>Columns</h2>'
-        print '<ul>'
+        print('<h2>Columns</h2>')
+        print('<ul>')
         for column in mapper.c:
             if not column.name in ('_last_updated', '_created'):
-                print '<li>%s</li>' % column.name
-        print '</ul>'
+                print('<li>%s</li>' % column.name)
+        print('</ul>')
 
-        print '<h2>Relations</h2>'
-        print '<ul>'
+        print('<h2>Relations</h2>')
+        print('<ul>')
         for prop in mapper.iterate_properties:
             if isinstance(prop, ColumnProperty):
                 continue
             if prop.uselist:
-                print '<li>%s: list of %s</li>' %  (prop.key, prop.target.name)
+                print('<li>%s: list of %s</li>' %  (prop.key, prop.target.name))
             else:
-                print '<li>%s: a %s</li>' %  (prop.key, prop.target.name)
-        print '</ul>'
+                print('<li>%s: a %s</li>' %  (prop.key, prop.target.name))
+        print('</ul>')
 
-print html_tail
+print(html_tail)
 import sys
 sys.exit(1)
-print html_head
+print(html_head)
 
-print '<h1>Tables</h1>'
+print('<h1>Tables</h1>')
 for table in sorted(db.metadata.table_iterator(), key=lambda x: x.name):
     columns_str = ''
     for col in table.columns:
@@ -134,22 +134,22 @@
     if columns_str != '':
         columns_markup = columns_template % columns_str
 
-    print table_template % ({'table_name': table.name,
-			     'columns': columns_markup})
+    print(table_template % ({'table_name': table.name,
+			     'columns': columns_markup}))
 #                             'properties': properties_markup})
 #			     'joins': joins_markup})
 
 
-print '<br/><hr/><br/>'
-print '<h1>Mappers</h1>'
+print('<br/><hr/><br/>')
+print('<h1>Mappers</h1>')
 for mapper in sorted(_mapper_registry, key=lambda x: x.class_.__name__):
 
     # this str builder copied from the Mapper class
     #s = mapper.class_.__name__ + "->" + (mapper.entity_name is not None and "/%s" % mapper.entity_name or "") + (mapper.local_table and mapper.local_table.description or str(mapper.local_table)) + (mapper.non_primary and "|non-primary" or "")
     s = mapper.class_.__name__ + "->" + (mapper.local_table.name is not None and "/%s" % mapper.local_table.name or "") + (mapper.local_table and mapper.local_table.description or str(mapper.local_table)) + (mapper.non_primary and "|non-primary" or "")
-    print '<h2 class="name">%s</h2>' % s
-    print '<div class="details">'
-    print '<h3>Properties</h3>'
+    print('<h2 class="name">%s</h2>' % s)
+    print('<div class="details">')
+    print('<h3>Properties</h3>')
     props_str = ''
     for p in sorted(mapper.iterate_properties,
                     key=lambda x: isinstance(x, ColumnProperty)):
@@ -158,7 +158,7 @@
         else:
             props_str += '<li>%s</li>' % saxutils.escape(str(p))
     if props_str is not '':
-        print '<ul>%s</ul>' % props_str
-    print '</div>'
+        print('<ul>%s</ul>' % props_str)
+    print('</div>')
 
-print html_tail
+print(html_tail)
--- ./scripts/gen_search_doc.py	(original)
+++ ./scripts/gen_search_doc.py	(refactored)
@@ -66,11 +66,11 @@
             raise Exception('**Error')
         #s = '-- %s' % p.key
 
-    print '%s (%s table)' % (item.__name__ , mapper.local_table.name)
-    print ' * Columns:'
+    print('%s (%s table)' % (item.__name__ , mapper.local_table.name))
+    print(' * Columns:')
     for c in columns:
-        print '  |- %s' % c.key
-    print ' * Collections:'
+        print('  |- %s' % c.key)
+    print(' * Collections:')
     for c in collections:
-        print '  |- %s (collection of %s)'  % (c.key, c.mapper.class_.__name__)
-    print ''
+        print('  |- %s (collection of %s)'  % (c.key, c.mapper.class_.__name__))
+    print('')
--- ./scripts/get-authors.py	(original)
+++ ./scripts/get-authors.py	(refactored)
@@ -25,7 +25,7 @@
 # will query tropicos and generate a json file for the same species, but
 # with authorship. pipe the output to a different json file.
 
-from __future__ import print_function
+
 
 import sys
 import json
--- ./scripts/gettropicos.py	(original)
+++ ./scripts/gettropicos.py	(refactored)
@@ -36,4 +36,4 @@
 
 if __name__ == '__main__':
     import sys
-    print getTropicos(' '.join(sys.argv[1:]))
+    print(getTropicos(' '.join(sys.argv[1:])))
--- ./scripts/import_pyxl.py	(original)
+++ ./scripts/import_pyxl.py	(refactored)
@@ -61,4 +61,4 @@
 header = [sheet.cell(row=1, column=i+1).value for i in range(max_column)]
 
 for rn in range(1, sheet.max_row):
-    row = dict(zip(header, [sheet.cell(row=rn+1, column=i+1).value for i in range(max_column)]))
+    row = dict(list(zip(header, [sheet.cell(row=rn+1, column=i+1).value for i in range(max_column)])))
--- ./scripts/importgenera.py	(original)
+++ ./scripts/importgenera.py	(refactored)
@@ -47,12 +47,12 @@
 bauble.db.open(dburi, True, True)
 session = bauble.db.Session()
 
-q = session.query(Species).filter(Species.infrasp1 == u'sp')
-q = q.join(Genus).filter(Genus.epithet == u'Zzz')
+q = session.query(Species).filter(Species.infrasp1 == 'sp')
+q = q.join(Genus).filter(Genus.epithet == 'Zzz')
 zzz = q.one()
 
-q = session.query(Species).filter(Species.epithet == u'sp')
-q = q.join(Genus).filter(Genus.epithet == u'Zzz')
+q = session.query(Species).filter(Species.epithet == 'sp')
+q = q.join(Genus).filter(Genus.epithet == 'Zzz')
 zzzsp = q.one()
 
 import sys
@@ -62,7 +62,7 @@
 import fileinput, re
 for line in fileinput.input():
     sys.stdout.flush()
-    text = unicode(line.strip())
+    text = str(line.strip())
     if not text:
         continue  # skip any empty lines
 
@@ -74,12 +74,12 @@
     if genus_name:
         genus = session.query(Genus).filter(Genus.epithet == genus_name).one()
         try:
-            species = session.query(Species).filter(Species.genus == genus).filter(Species.infrasp1 == u'sp').first()
+            species = session.query(Species).filter(Species.genus == genus).filter(Species.infrasp1 == 'sp').first()
             if species is None:
                 raise Exception
             sys.stdout.write('+')
         except:
-            species = Species(genus=genus, sp=u'', infrasp1=u'sp')
+            species = Species(genus=genus, sp='', infrasp1='sp')
             session.add(species)
             sys.stdout.write('*')
             session.flush()
@@ -104,7 +104,7 @@
         conflicting.setdefault(species.str(), []).append((accession.code, accession.species.str()))
         sys.stdout.write('!')
 
-print
+print()
 session.commit()
-print conflicting
-print unknown
+print(conflicting)
+print(unknown)
--- ./scripts/importodk.py	(original)
+++ ./scripts/importodk.py	(refactored)
@@ -59,27 +59,27 @@
     try:
         keys['gn_epit'], keys['sp_epit'] = keys['species'].split(' ')
     except:
-        keys['gn_epit'], keys['sp_epit'] = (u'Zzz', u'sp')
+        keys['gn_epit'], keys['sp_epit'] = ('Zzz', 'sp')
 
     genus = session.query(Genus).filter(Genus.epithet == keys['gn_epit']).one()
     return genus
 
 
 def get_species(session, keys):
-    if keys['sp_epit'] == u'sp':
-        keys['infrasp1'], keys['sp_epit'] = u'sp', u''
+    if keys['sp_epit'] == 'sp':
+        keys['infrasp1'], keys['sp_epit'] = 'sp', ''
     else:
-        keys['infrasp1'] = u''
-
-    if keys['sp_epit'] == u'sp':
+        keys['infrasp1'] = ''
+
+    if keys['sp_epit'] == 'sp':
         try:
             species = session.query(Species).filter(
                 Species.genus == genus).filter(
-                Species.infrasp1 == u'sp').one()
+                Species.infrasp1 == 'sp').one()
             if species != zzz:  # no hace falta mencionarlo
                 sys.stdout.write('+')  # encontramos
         except:
-            species = Species(genus=genus, sp=u'', infrasp1=u'sp')
+            species = Species(genus=genus, sp='', infrasp1='sp')
             session.add(species)
             session.flush()
             sys.stdout.write('*')  # tuvimos que crear
@@ -90,7 +90,7 @@
                 Species.epithet == keys['sp_epit']).one()
             sys.stdout.write('+')  # encontramos
         except:
-            species = Species(genus=genus, sp=u'', epithet=keys['sp_epit'])
+            species = Species(genus=genus, sp='', epithet=keys['sp_epit'])
             session.add(species)
             session.flush()
             sys.stdout.write('*')  # tuvimos que crear
@@ -99,7 +99,7 @@
 
 def get_location(session, keys):
     try:
-        loc = session.query(Location).filter(bauble.utils.ilike(Location.code, unicode(keys['location']))).one()
+        loc = session.query(Location).filter(bauble.utils.ilike(Location.code, str(keys['location']))).one()
     except:
         loc = Location(code=keys['location'].upper())
         session.add(loc)
@@ -163,7 +163,7 @@
     plant['accession'] = accession['code']
     if item['location']:
         # case insensitive match on location code (use bauble.utils.ilike).
-        db_loc = session.query(Location).filter(bauble.utils.ilike(Location.code, unicode(item['location']))).first()
+        db_loc = session.query(Location).filter(bauble.utils.ilike(Location.code, str(item['location']))).first()
         if db_loc:
             plant['location'] = db_loc.code
         else:
@@ -174,23 +174,23 @@
         # TODO: retrieve species from session, or add one to it.
         item['species'] = item['species'].replace('.', '')
 
-        genus_epithet, species_epithet = (unicode(item['species']).split(u' ') + [u''])[:2]
+        genus_epithet, species_epithet = (str(item['species']).split(' ') + [''])[:2]
         if species_epithet == '':
-            species_epithet = u'sp'
-
-        accession['species'] = item['species'] = u"%s %s" % (genus_epithet, species_epithet)
+            species_epithet = 'sp'
+
+        accession['species'] = item['species'] = "%s %s" % (genus_epithet, species_epithet)
 
     # add a default quantity=1 for plants relative to new accessions,
     # add a default species=Zzz sp for new accessions,
     # ignore species=Zzz sp for already existing accessions.
     need_species = False
-    db_accession = session.query(Accession).filter(Accession.code == unicode(accession['code'])).first()
+    db_accession = session.query(Accession).filter(Accession.code == str(accession['code'])).first()
 
     if db_accession is None:  # this is a new accession
         plant['quantity'] = 1
-        item['species'] = item.get('species') or u'Zzz sp'
+        item['species'] = item.get('species') or 'Zzz sp'
         accession['species'] = item['species']
-        genus_epithet, species_epithet = (unicode(item['species']).split(u' ') + [u''])[:2]
+        genus_epithet, species_epithet = (str(item['species']).split(' ') + [''])[:2]
         need_species = True
 
     else:                     # this is an existing accession
@@ -228,8 +228,8 @@
     for pic_name in item.get('photo', []):
         try:
             url, md5 = item['media'][pic_name]
-        except Exception, e:
-            print type(e), e
+        except Exception as e:
+            print(type(e), e)
             continue
         pic_name = (item['acc_no_scan'] or item['acc_no_typed']) + ' ' + pic_name
         pic_full_name = os.path.join(pic_path, pic_name)
@@ -243,7 +243,7 @@
     # should create a change object, just like the Accession Editor
     pass
 
-for i in species_needed.values() + locations_needed.values():
+for i in list(species_needed.values()) + list(locations_needed.values()):
     objects.insert(0, i)
 
 with codecs.open(filename, "wb", "utf-8") as output:
--- ./scripts/importpictures.py	(original)
+++ ./scripts/importpictures.py	(refactored)
@@ -48,22 +48,22 @@
 bauble.db.open(dburi, True, True)
 session = bauble.db.Session()
 
-q = session.query(Species).filter(Species.infrasp1 == u'sp')
-q = q.join(Genus).filter(Genus.epithet == u'Zzz')
+q = session.query(Species).filter(Species.infrasp1 == 'sp')
+q = q.join(Genus).filter(Genus.epithet == 'Zzz')
 zzz = q.one()
 
-loc = session.query(Location).filter(Location.code == u'desconocid').one()
+loc = session.query(Location).filter(Location.code == 'desconocid').one()
 import sys
 
 with open("/tmp/plant-pictures.txt") as f:
     for text in f.readlines():
-        text = unicode(text.strip())
+        text = str(text.strip())
         acc_no = text[:6]
 
         try:
             q = session.query(Plant)
             q = q.join(Accession).filter(Accession.code == acc_no)
-            q = q.filter(Plant.code == u'1')
+            q = q.filter(Plant.code == '1')
             plant = q.one()
         except:
             try:
@@ -72,7 +72,7 @@
                 accession = Accession(species=zzz, code=acc_no)
                 session.add(accession)
                 sys.stdout.write('a')
-            plant = Plant(accession=accession, location=loc, quantity=1, code=u'1')
+            plant = Plant(accession=accession, location=loc, quantity=1, code='1')
             session.add(plant)
             sys.stdout.write('p')
             session.flush()
@@ -81,15 +81,15 @@
 
         q = session.query(Plant)
         q = q.join(Accession).filter(Accession.code == acc_no)
-        q = q.join(PlantNote).filter(PlantNote.category == u'<picture>')
+        q = q.join(PlantNote).filter(PlantNote.category == '<picture>')
         q = q.filter(PlantNote.note == text)
         if q.count() == 0:
             # we need to add this note to the plant
-            note = PlantNote(plant=plant, category=u'<picture>', note=text)
+            note = PlantNote(plant=plant, category='<picture>', note=text)
             session.add(note)
             sys.stdout.write('f')
         else:
             sys.stdout.write('.')
         sys.stdout.flush()
 session.commit()
-print
+print()
--- ./scripts/importpocketlog.py	(original)
+++ ./scripts/importpocketlog.py	(refactored)
@@ -51,27 +51,27 @@
     try:
         keys['gn_epit'], keys['sp_epit'] = keys['species'].split(' ')
     except:
-        keys['gn_epit'], keys['sp_epit'] = (u'Zzz', u'sp')
+        keys['gn_epit'], keys['sp_epit'] = ('Zzz', 'sp')
 
     genus = session.query(Genus).filter(Genus.epithet == keys['gn_epit']).one()
     return genus
 
 
 def get_species(session, keys):
-    if keys['sp_epit'] == u'sp':
-        keys['infrasp1'], keys['sp_epit'] = u'sp', u''
+    if keys['sp_epit'] == 'sp':
+        keys['infrasp1'], keys['sp_epit'] = 'sp', ''
     else:
-        keys['infrasp1'] = u''
+        keys['infrasp1'] = ''
 
-    if keys['sp_epit'] == u'':
+    if keys['sp_epit'] == '':
         try:
             species = session.query(Species).filter(
                 Species.genus == genus).filter(
-                Species.infrasp1 == u'sp').first()
+                Species.infrasp1 == 'sp').first()
             if species != zzz:  # no hace falta mencionarlo
                 sys.stdout.write('+')  # encontramos fictive species
         except:
-            species = Species(genus=genus, sp=u'', infrasp1=u'sp')
+            species = Species(genus=genus, sp='', infrasp1='sp')
             session.add(species)
             session.flush()
             sys.stdout.write('*')  # tuvimos que crear fictive species
@@ -79,11 +79,11 @@
         try:
             species = session.query(Species).filter(
                 Species.genus == genus).filter(
-                Species.infrasp1 == u'').filter(
+                Species.infrasp1 == '').filter(
                 Species.epithet == keys['sp_epit']).one()
             sys.stdout.write('+')  # encontramos Species
         except:
-            species = Species(genus=genus, sp=u'', epithet=keys['sp_epit'])
+            species = Species(genus=genus, sp='', epithet=keys['sp_epit'])
             session.add(species)
             session.flush()
             sys.stdout.write('*')  # tuvimos que crear Species
@@ -92,7 +92,7 @@
 
 def get_location(session, keys):
     try:
-        loc = session.query(Location).filter(bauble.utils.ilike(Location.code, unicode(keys['location']))).one()
+        loc = session.query(Location).filter(bauble.utils.ilike(Location.code, str(keys['location']))).one()
     except:
         loc = Location(code=keys['location'].upper())
         session.add(loc)
@@ -111,8 +111,8 @@
 bauble.db.open(dburi, True, True)
 session = bauble.db.Session()
 
-q = session.query(Species).filter(Species.infrasp1 == u'sp')
-q = q.join(Genus).filter(Genus.epithet == u'Zzz')
+q = session.query(Species).filter(Species.infrasp1 == 'sp')
+q = q.join(Genus).filter(Genus.epithet == 'Zzz')
 zzz = q.one()
 
 import csv
@@ -124,7 +124,7 @@
 import fileinput
 for line in fileinput.input():
     sys.stdout.flush()
-    obj = dict(zip(header, [i.strip() for i in unicode(line).split(':')]))
+    obj = dict(list(zip(header, [i.strip() for i in str(line).split(':')])))
     if len(obj) < 3:
         continue  # ignore blank lines
     obj.setdefault('species', 'Zzz sp')
@@ -140,33 +140,33 @@
     try:
         q = session.query(Plant)
         q = q.join(Accession).filter(Accession.code == obj['acc_code'])
-        q = q.filter(Plant.code == u'1')
+        q = q.filter(Plant.code == '1')
         plant = q.one()
         if plant.location != loc:
             plant.location = loc
             sys.stdout.write(':')  # we altered a plant location
         else:
             sys.stdout.write('.')  # we confirmed a plant location
-    except Exception, e:
+    except Exception as e:
         try:
             accession = session.query(Accession).filter(Accession.code == obj['acc_code']).one()
-        except Exception, e:
+        except Exception as e:
             accession = Accession(species=species, code=obj['acc_code'])
             session.add(accession)
             sys.stdout.write('a')  # we added a new accession
-        plant = Plant(accession=accession, location=loc, quantity=1, code=u'1')
+        plant = Plant(accession=accession, location=loc, quantity=1, code='1')
         session.add(plant)
         session.flush()
         sys.stdout.write('p')  # we added a new plant
     # operación perro - mark the plant as seen today
     q = session.query(PlantNote)
     q = q.filter(PlantNote.plant == plant)
-    q = q.filter(PlantNote.category == u'inventario')
+    q = q.filter(PlantNote.category == 'inventario')
     q = q.filter(PlantNote.note == obj['timestamp'][:8])
     if q.count() == 0:
-        note = PlantNote(plant=plant, category=u'inventario', note=obj['timestamp'][:8])
+        note = PlantNote(plant=plant, category='inventario', note=obj['timestamp'][:8])
         session.add(note)
         session.flush()
 
-print
+print()
 session.commit()
--- ./scripts/install_deps.py	(original)
+++ ./scripts/install_deps.py	(refactored)
@@ -17,13 +17,13 @@
 import sys
 
 if sys.platform != 'win32':
-    print "Error: This script is only for Win32"
+    print("Error: This script is only for Win32")
     sys.exit(1)
 
 import os
-import urllib
+import urllib.request, urllib.parse, urllib.error
 import zipfile
-import _winreg
+import winreg
 from optparse import OptionParser
 parser = OptionParser()
 parser.add_option('-r', '--redl', action='store_true', dest='redl',
@@ -72,7 +72,7 @@
     L = []
     while True:
         try:
-            name = _winreg.EnumKey(reg_key, index)
+            name = winreg.EnumKey(reg_key, index)
         except EnvironmentError:
             break
         index += 1
@@ -93,17 +93,17 @@
     """
     python_path = r'software\python\pythoncore'
     versions = {}
-    for reg_hive in (_winreg.HKEY_LOCAL_MACHINE,
-                      _winreg.HKEY_CURRENT_USER):
+    for reg_hive in (winreg.HKEY_LOCAL_MACHINE,
+                      winreg.HKEY_CURRENT_USER):
         try:
-            python_key = _winreg.OpenKey(reg_hive, python_path)
+            python_key = winreg.OpenKey(reg_hive, python_path)
         except EnvironmentError:
             continue
         for version_name in get_subkey_names(python_key):
-            key = _winreg.OpenKey(python_key, version_name)
-            modification_date = _winreg.QueryInfoKey(key)[2]
+            key = winreg.OpenKey(python_key, version_name)
+            modification_date = winreg.QueryInfoKey(key)[2]
             try:
-                install_path = _winreg.QueryValue(key, 'installpath')
+                install_path = winreg.QueryValue(key, 'installpath')
                 versions[version_name] = install_path
             except:
                 pass
@@ -117,22 +117,22 @@
 python_versions = get_python_versions()
 available_versions = {}
 #print python_versions
-if len(python_versions.keys()) == 0:
-    print "Error: Install Python first"
+if len(list(python_versions.keys())) == 0:
+    print("Error: Install Python first")
     sys.exit(1)
 
 try:
     PYTHON_HOME = python_versions[supported_python_version]
     PYTHON_EXE = os.path.join(PYTHON_HOME, 'python.exe')
     if os.path.exists(PYTHON_EXE):
-        print 'Using Python %s' % supported_python_version
+        print('Using Python %s' % supported_python_version)
         #print 'Python %s seems to be installed correctly' % version
     else:
-        print 'Python %s NOT installed correctly' % version
+        print('Python %s NOT installed correctly' % version)
         sys.exit(1)
 
 except KeyError:
-    print 'This script only supports Python %s' % supported_python_version
+    print('This script only supports Python %s' % supported_python_version)
     sys.exit(1)
 
 
@@ -141,7 +141,7 @@
 else:
     DL_PATH = os.path.join(os.getcwd(), 'install_deps')
 
-print 'using download path: %s' % DL_PATH
+print('using download path: %s' % DL_PATH)
 if not os.path.exists(DL_PATH):
     os.makedirs(DL_PATH)
 
@@ -152,12 +152,12 @@
     dest_file = os.path.join(DL_PATH, filename)
     if os.path.exists(dest_file) and not options.redl:
         continue
-    print 'downloading %s...' % filename
+    print('downloading %s...' % filename)
     try:
-        urllib.urlretrieve(url, os.path.join(DL_PATH, filename))
-    except Exception, e:
-        print e
-        print 'ERROR: Could not download %s' % url
+        urllib.request.urlretrieve(url, os.path.join(DL_PATH, filename))
+    except Exception as e:
+        print(e)
+        print('ERROR: Could not download %s' % url)
         sys.exit(1)
 
 
@@ -177,15 +177,15 @@
     if not os.path.exists(EASY_INSTALL_EXE):
         EZ_SETUP_DL_PATH = os.path.join(DL_PATH, 'ez_setup.py')
         if not os.path.exists(EZ_SETUP_DL_PATH):
-            urllib.urlretrieve(EZ_SETUP_PATH, EZ_SETUP_DL_PATH)
+            urllib.request.urlretrieve(EZ_SETUP_PATH, EZ_SETUP_DL_PATH)
         cmd = '%s "%s"' % (PYTHON_EXE, EZ_SETUP_DL_PATH)
         #print cmd
         os.system(cmd)
 
     # install the eggs
-    for egg, version in eggs_install.iteritems():
+    for egg, version in eggs_install.items():
         #cmd = '%s -Z "%s%s"' % (EASY_INSTALL_EXE, egg, version)
         cmd = '%s -Z -U "%s%s"' % (EASY_INSTALL_EXE, egg, version)
         os.system(cmd)
 
-print 'done.'
+print('done.')
--- ./scripts/kew2csv.py	(original)
+++ ./scripts/kew2csv.py	(refactored)
@@ -66,8 +66,8 @@
 
 try:
     z.close()
-except NameError, e:
-    print 'wasn\'t a zip'
+except NameError as e:
+    print('wasn\'t a zip')
 
 genera_file.close()
 families.close()
--- ./scripts/lab-csv2json.py	(original)
+++ ./scripts/lab-csv2json.py	(refactored)
@@ -69,10 +69,10 @@
     for line_no, r in enumerate(csv.reader(open(input_file_name))):
         if line_no == 0:
             continue
-        obj = dict(zip(header, [i.strip() for i in r]))
+        obj = dict(list(zip(header, [i.strip() for i in r])))
         if len(obj) == 1:
             break
-        for k1, k2 in fields.items():
+        for k1, k2 in list(fields.items()):
             obj[k2] = obj.get(k1)
         if not obj['binomial'].strip():
             obj['binomial'] = 'Zzz sp'
--- ./scripts/make_ico.py	(original)
+++ ./scripts/make_ico.py	(refactored)
@@ -3,7 +3,7 @@
 import sys, os
 
 if not sys.platform.startswith('linux'):
-    print 'This script only works on Linux.'
+    print('This script only works on Linux.')
     sys.exit()
 
 sizes = ('16x16', '32x32', '48x48')
--- ./scripts/manage-gtk.py	(original)
+++ ./scripts/manage-gtk.py	(refactored)
@@ -4,7 +4,7 @@
 import os, sys
 
 if sys.platform != 'win32':
-    print 'only for win32'
+    print('only for win32')
     sys.exit()
 
 GTK_PATH = 'c:\\GTK'
@@ -22,17 +22,17 @@
 import shutil
 if args[0] == 'off':
     if os.path.exists(GTK_OFF_PATH):
-        print '%s already exists' % GTK_OFF_PATH
+        print('%s already exists' % GTK_OFF_PATH)
         sys.exit(1)
     else:
         shutil.move(GTK_PATH, GTK_OFF_PATH)
 elif args[0] == 'on':
     if os.path.exists(GTK_PATH):
-        print '%s already exists' % GTK_PATH
+        print('%s already exists' % GTK_PATH)
         sys.exit(1)
     else:
         shutil.move(GTK_OFF_PATH, GTK_PATH)
 elif args[0] == 'dist':
-    print 'Error: not implemented'
+    print('Error: not implemented')
 
 
--- ./scripts/mytranslated.py	(original)
+++ ./scripts/mytranslated.py	(refactored)
@@ -1,6 +1,7 @@
 #!/usr/bin/env python
 # -*- coding: utf-8 -*-
 from optparse import OptionParser
+import importlib
 usage = 'usage: %prog [options]'
 parser = OptionParser(usage)
 parser.add_option('-f', '--from', dest='translation_from', default='en',
@@ -14,7 +15,7 @@
 translation_to = options.translation_to
 
 import sys  
-reload(sys)  
+importlib.reload(sys)  
 sys.setdefaultencoding('utf8')
 
 import codecs
@@ -24,19 +25,19 @@
 def translate(s):
     try:
         r = requests.get('http://api.mymemory.translated.net/get?q=%s&langpair=%s|%s' % (s, translation_from, translation_to), timeout=6)
-    except requests.exceptions.ReadTimeout, e:
-        print >> sys.stderr, type(e), e
+    except requests.exceptions.ReadTimeout as e:
+        print(type(e), e, file=sys.stderr)
         return ""
         
     j = json.loads(r.text)
     reply = j['responseData']['translatedText']
     if reply is None:
-        print >> sys.stderr, r.text
+        print(r.text, file=sys.stderr)
         return ""
 
     for k in ['INVALID LANGUAGE PAIR SPECIFIED.', 'NO QUERY SPECIFIED', 'QUERY LENGTH LIMIT EXCEDEED', 'MYMEMORY WARNING:']:
         if reply.startswith(k):
-            print >> sys.stderr, reply
+            print(reply, file=sys.stderr)
             return ""
     return reply
 
@@ -44,10 +45,10 @@
 
 import fileinput, re
 for line in fileinput.input(args):
-    text = unicode(line.strip())
+    text = str(line.strip())
     if not text:
         if about_to_stop == True:
             break
         about_to_stop = True
         continue  # skip any empty lines
-    print translate(line)
+    print(translate(line))
--- ./scripts/odk2json.py	(original)
+++ ./scripts/odk2json.py	(refactored)
@@ -79,7 +79,7 @@
     plant['accession'] = accession['code']
     if item['location']:
         # correct location codes according to ILIKE matches,
-        db_loc = session.query(Location).filter(bauble.utils.ilike(Location.code, unicode(item['location']))).first()
+        db_loc = session.query(Location).filter(bauble.utils.ilike(Location.code, str(item['location']))).first()
         if db_loc:
             plant['location'] = db_loc.code
         else:
@@ -89,23 +89,23 @@
     if item['species']:
         item['species'] = item['species'].replace('.', '')
 
-        genus_epithet, species_epithet = (unicode(item['species']).split(u' ') + [u''])[:2]
+        genus_epithet, species_epithet = (str(item['species']).split(' ') + [''])[:2]
         if species_epithet == '':
-            species_epithet = u'sp'
+            species_epithet = 'sp'
 
-        accession['species'] = item['species'] = u"%s %s" % (genus_epithet, species_epithet)
+        accession['species'] = item['species'] = "%s %s" % (genus_epithet, species_epithet)
 
     # add a default quantity=1 for plants relative to new accessions,
     # add a default species=Zzz sp for new accessions,
     # ignore species=Zzz sp for already existing accessions.
     need_species = False
-    db_accession = session.query(Accession).filter(Accession.code == unicode(accession['code'])).first()
+    db_accession = session.query(Accession).filter(Accession.code == str(accession['code'])).first()
 
     if db_accession is None:  # this is a new accession
         plant['quantity'] = 1
-        item['species'] = item.get('species') or u'Zzz sp'
+        item['species'] = item.get('species') or 'Zzz sp'
         accession['species'] = item['species']
-        genus_epithet, species_epithet = (unicode(item['species']).split(u' ') + [u''])[:2]
+        genus_epithet, species_epithet = (str(item['species']).split(' ') + [''])[:2]
         need_species = True
 
     else:                     # this is an existing accession
@@ -143,8 +143,8 @@
     for pic_name in item.get('photo', []):
         try:
             url, md5 = item['media'][pic_name]
-        except Exception, e:
-            print type(e), e
+        except Exception as e:
+            print(type(e), e)
             continue
         pic_name = (item['acc_no_scan'] or item['acc_no_typed']) + ' ' + pic_name
         pic_full_name = os.path.join(pic_path, pic_name)
@@ -158,7 +158,7 @@
     # should create a change object, just like the Accession Editor
     pass
 
-for i in species_needed.values() + locations_needed.values():
+for i in list(species_needed.values()) + list(locations_needed.values()):
     objects.insert(0, i)
 
 with codecs.open(filename, "wb", "utf-8") as output:
--- ./scripts/stream_d2w.py	(original)
+++ ./scripts/stream_d2w.py	(refactored)
@@ -81,27 +81,27 @@
     try:
         keys['gn_epit'], keys['sp_epit'] = keys['species'].split(' ')
     except:
-        keys['gn_epit'], keys['sp_epit'] = (u'Zzz', u'sp')
+        keys['gn_epit'], keys['sp_epit'] = ('Zzz', 'sp')
 
     genus = session.query(Genus).filter(Genus.epithet == keys['gn_epit']).one()
     return genus
 
 
 def get_species(session, keys):
-    if keys['sp_epit'] == u'sp':
-        keys['infrasp1'], keys['sp_epit'] = u'sp', u''
+    if keys['sp_epit'] == 'sp':
+        keys['infrasp1'], keys['sp_epit'] = 'sp', ''
     else:
-        keys['infrasp1'] = u''
-
-    if keys['sp_epit'] == u'sp':
+        keys['infrasp1'] = ''
+
+    if keys['sp_epit'] == 'sp':
         try:
             species = session.query(Species).filter(
                 Species.genus == genus).filter(
-                Species.infrasp1 == u'sp').one()
+                Species.infrasp1 == 'sp').one()
             if species != zzz:  # no hace falta mencionarlo
                 sys.stdout.write('+')  # encontramos
         except:
-            species = Species(genus=genus, sp=u'', infrasp1=u'sp')
+            species = Species(genus=genus, sp='', infrasp1='sp')
             session.add(species)
             session.flush()
             sys.stdout.write('*')  # tuvimos que crear
@@ -112,7 +112,7 @@
                 Species.epithet == keys['sp_epit']).one()
             sys.stdout.write('+')  # encontramos
         except:
-            species = Species(genus=genus, sp=u'', epithet=keys['sp_epit'])
+            species = Species(genus=genus, sp='', epithet=keys['sp_epit'])
             session.add(species)
             session.flush()
             sys.stdout.write('*')  # tuvimos que crear
@@ -121,7 +121,7 @@
 
 def get_location(session, keys):
     try:
-        loc = session.query(Location).filter(bauble.utils.ilike(Location.code, unicode(keys['location']))).one()
+        loc = session.query(Location).filter(bauble.utils.ilike(Location.code, str(keys['location']))).one()
     except:
         loc = Location(code=keys['location'].upper())
         session.add(loc)
@@ -191,7 +191,7 @@
 
     result['species'].append(d)
 
-for k, plants in species.items():
+for k, plants in list(species.items()):
     for v in plants:
         d = {'garden_uuid': garden['uuid'],
              'garden': insti.name,
@@ -202,17 +202,17 @@
              'lon': v.coords['lon']}
         result['plants'].append(d)
 
-print 'db.gardens.update({uuid: "%s"}, {$set: %s}, {upsert: true});' % (garden['uuid'], json.dumps(garden))
+print('db.gardens.update({uuid: "%s"}, {$set: %s}, {upsert: true});' % (garden['uuid'], json.dumps(garden)))
 for i in result['species']:
-    print 'db.taxa.update({name: %s}, {$set: %s}, {upsert: true});' % (json.dumps(i['name']), json.dumps(i))
-print 'db.plants.deleteMany({garden: %s});' % json.dumps(garden['name'])
-print 'db.plants.insertMany(%s);' % json.dumps(result['plants'])
-
-print '''\
+    print('db.taxa.update({name: %s}, {$set: %s}, {upsert: true});' % (json.dumps(i['name']), json.dumps(i)))
+print('db.plants.deleteMany({garden: %s});' % json.dumps(garden['name']))
+print('db.plants.insertMany(%s);' % json.dumps(result['plants']))
+
+print('''\
 db.gardens.find().sort({id:-1}).limit(1).forEach(function(g){
     db.gardens.updateOne({uuid: "%(uuid)s", id: {$exists: false}}, {$set: {id: g.id + 1}});
 });
 db.gardens.find({uuid: "%(uuid)s"}).forEach(function (elem) {
     db.plants.updateMany({garden_uuid: elem.uuid}, {$set: {garden_id: elem.id}})
 });
-''' % garden
+''' % garden)
--- ./scripts/tdgwgeo2csv.py	(original)
+++ ./scripts/tdgwgeo2csv.py	(refactored)
@@ -56,7 +56,7 @@
         m = self.line_rx.match(line.strip())
         if m is None:
             raise ValueError("could not match:\n%s\n%s" % \
-                (unicode(line), (unicode(s))))
+                (str(line), (str(s))))
         return m.groupdict()
 
 
@@ -64,8 +64,8 @@
         return self
 
 
-    def next(self):
-        line = self.file.next()
+    def __next__(self):
+        line = next(self.file)
         # remove the stupid ,00 decimals at the end of the integers
         #line = self.file.next().replace(',00','')
         return self.group(line)
@@ -114,7 +114,7 @@
         r = Row(id=str(id_ctr), name=line['L1_continent'],
                 tdwg_code=line['L1_code'])
         converted_rows[line['L1_code']] = r
-        print r.csv()
+        print(r.csv())
         id_ctr+=1
 
 
@@ -126,7 +126,7 @@
                 tdwg_code=line['L2_code'], iso_code=line['L2_ISOcode'])
         r.parent_id = converted_rows[line['L1_code']]['id']
         converted_rows[line['L2_code']] = r
-        print r.csv()
+        print(r.csv())
         id_ctr+=1
 
 
@@ -139,7 +139,7 @@
         #r.parent_id = converted_rows[line['L2_code']]['id']
         r['parent_id'] = converted_rows[line['L2_code']]['id']
         converted_rows[line['L3_code']] = r
-        print r.csv()
+        print(r.csv())
         id_ctr+=1
 
 
@@ -154,7 +154,7 @@
                 tdwg_code=line['L4_code'], iso_code=line['L4_ISOcode'])
         r.parent_id = converted_rows[line['L3_code']]['id']
         converted_rows[line['L4_code']] = r
-        print r.csv()
+        print(r.csv())
         id_ctr+=1
 
 
@@ -185,35 +185,35 @@
             continue
         try:
             r.parent_id = converted_rows[line['L4_code']]['id']
-        except KeyError, e:
+        except KeyError as e:
             try:
                 r.parent_id = converted_rows[line['L3_code']]['id']
-            except KeyError, e:
+            except KeyError as e:
                 try:
                     r.parent_id = converted_rows[line['L2_code']]['id']
-                except KeyError, e:
+                except KeyError as e:
                     try:
                         r.parent_id = converted_rows[line['L1_code']]['id']
-                    except KeyError, e:
+                    except KeyError as e:
                         pass
 
         # add the converted rows and print out the csv line
         converted_rows[line['ID']] = r
-        print r.csv()
+        print(r.csv())
         id_ctr+=1
 
 
 def main():
     global id_ctr, converted_rows
 
-    print ','.join(['"%s"' % c for c in Row.columns])
+    print(','.join(['"%s"' % c for c in Row.columns]))
     convert_level1()
     convert_level2()
     convert_level3()
     convert_level4()
     convert_gazetteer()
 
-    print Row(id='%s' % id_ctr, name='Cultivated').csv()
+    print(Row(id='%s' % id_ctr, name='Cultivated').csv())
     id_ctr +=1
 
 
--- ./scripts/pac_server/simple_serve.py	(original)
+++ ./scripts/pac_server/simple_serve.py	(refactored)
@@ -68,16 +68,16 @@
 #   page.
 #   Use Ctrl-C to stop this script.
 
-import SimpleHTTPServer
-import SocketServer
+import http.server
+import socketserver
 
-HANDLER = SimpleHTTPServer.SimpleHTTPRequestHandler
+HANDLER = http.server.SimpleHTTPRequestHandler
 
 # consider pac files content type
 HANDLER.extensions_map.update({'.pac': 'application/x-ns-proxy-autoconfig'})
 
 
-class SimpleServer(SocketServer.TCPServer):
+class SimpleServer(socketserver.TCPServer):
     """
     Simplest way to ensure we make the socket accessable after we ctrl-c.
     """
--- setup.py	(original)
+++ setup.py	(refactored)
@@ -136,7 +136,7 @@
 
     # py2exe doesn't seem to respect packages_data so build data_files from
     # package_data
-    for package, patterns in package_data.items():
+    for package, patterns in list(package_data.items()):
         pkg_dir = all_package_dirs[package]
         for p in patterns:
             matches = glob.glob(pkg_dir + '/' + p)
@@ -185,9 +185,9 @@
             dest2 = '%s\\lib\\gdk-pixbuf-2.0\\2.10.0\\loaders.cache' % dist_gtk
             cmd1 = 'call "%s" > "%s"' % (exe, dest1)
             cmd2 = 'call "%s" > "%s"' % (exe, dest2)
-            print cmd1
+            print(cmd1)
             os.system(cmd1)
-            print cmd2
+            print(cmd2)
             os.system(cmd2)
 
             # copy the the MS-Windows gtkrc to make it the default theme
@@ -381,7 +381,7 @@
             os.path.join(self.build_base, 'share', 'ghini', 'LICENSE'))
 
         if not self.single_version_externally_managed:
-            print 'before installing new egg, remove old ones!'
+            print('before installing new egg, remove old ones!')
             old_egg_dirs = [a for (a, _, _) in os.walk(self.install_data)
                             if (
                                 os.path.basename(a).startswith('bauble')
@@ -460,7 +460,7 @@
                     def delete(p):
                         print(f'removing {p}')
                         os.remove(p)
-                    map(delete, [os.path.join(path, m) for m in matches])
+                    list(map(delete, [os.path.join(path, m) for m in matches]))
         if os.path.exists('dist'):
             dir_util.remove_tree('dist')
         if os.path.exists('build'):
